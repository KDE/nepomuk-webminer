<?xml version="2.0" encoding="UTF-8"?>
<kcfg xmlns="http://www.kde.org/standards/kcfg/1.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.kde.org/standards/kcfg/1.0
                          http://www.kde.org/standards/kcfg/1.0/kcfg.xsd" >
  <include>kglobalsettings.h</include>
  <kcfgfile name="nepomuk-webminerrc"/>

  <group name="Fetcher">
    <entry name="DownloadBanner" type="Bool">
      <label>Download Banner/Poster/Cover for the resource if available</label>
      <default>true</default>
    </entry>
    <entry name="SaveBannerInResourceFolder" type="Bool">
      <label>Save the Banner/Poster/Cover in the same folder as the resource.</label>
      <default>false</default>
    </entry>
    <entry name="DownloadReferences" type="Bool">
      <label>Download publication references (might take a while for some publications).</label>
      <default>false</default>
    </entry>
    <entry name="FavoriteMusicPlugin" type="String">
      <label>Favorite plugin to for the music download.</label>
      <default>musicbrainz</default>
    </entry>
    <entry name="FavoriteMoviePlugin" type="String">
      <label>Favorite plugin for the movie download.</label>
      <default>tmdb</default>
    </entry>
    <entry name="FavoriteTvShowPlugin" type="String">
      <label>Favorite plugin for the tv show download.</label>
      <default>tvdb</default>
    </entry>
    <entry name="FavoritePublicationPlugin" type="String">
      <label>Favorite plugin for the tv show download.</label>
      <default>mas</default>
    </entry>
    <entry name="AdditionalPluginFolder" type="String">
      <label>A folder where plugins can be found, aside the installed folder.</label>
    </entry>
    <entry name="CheckNextPlugin" type="Bool">
      <label>If the preferred plugin did not return any results, this will try the all other plugins until a result could be found.</label>
      <default>true</default>
    </entry>
  </group>

  <group name="Service">
    <entry name="DocumentServiceEnabled" type="Bool">
      <label>Automatic document fetcher enabled.</label>
      <default>false</default>
    </entry>
    <entry name="MusicServiceEnabled" type="Bool">
      <label>Automatic music fetcher enabled.</label>
      <default>true</default>
    </entry>
    <entry name="VideoServiceEnabled" type="Bool">
      <label>Automatic video fetcher enabled.</label>
      <default>true</default>
    </entry>
    <entry name="FirstRun" type="Bool">
      <label>Used to disable the service on the first run after installation for privacy reasons.</label>
      <default>true</default>
    </entry>
  </group>

  <group name="FilenameAnalyzer">
    <entry name="StripNames" type="StringList">
      <label>Regular expressions that remove the matched text from any filename.</label>
    </entry>
    <entry name="RegExpTvShow" type="String">
      <label>Regular expressions that will detect and extract parts of a a tv show filename.</label>
      <default>(.+)[\\s\\-]?\\[s([0-9]+)\\]\\s?\\[e([0-9]+)\\].*#,#false#,#2,3,4#,#foo [s01][e01]#|#(.+)[\\s\\-]+([0-9]{1,2})x([0-9]+).*#,#false#,#0,3,4#,#foo 1x03#|#(.+)[\\s\\-]?s([0-9]+)[\\s\\-]?e([0-9]+).*#,#false#,#2,3,4#,#foo s01e01#|#(.*)\\s?\\-\\s?(?:e|Episode)+[\\s\\-]?([0-9]{1,2})\\s?\\-?\\s?.*#,#false#,#2,4#,#foo - e01#|#(.+)[\\s\\-]s([0-9]{1,2})[\\s\\-]+([0-9]+).*#,#false#,#2,3,4#,#foo-s1-1#|#(.*)\\s?\\-\\s?([0-9]{2})+.*#,#false#,#2,4#,#foo - 01 - [01293]#|#(.+)[\\s\\-]([0-9]{1})([0-9]{2})(?:[^\\d][^/]*)?#,#false#,#2,3,4#,#foo 103#|#(.+)[\\s\\-]?([0-9]{2})([0-9]{2,3})(?:[^\\d][^/]*)?#,#false#,#2,3,4#,#foo 0103#|#.*/([^/]*)/(?:[^/]*)([0-9]+)/(?:Episode|e)?\\s?([0-9]+).*#,#true#,#2,3,4#,#~/Videos/Show/Season 1/e01 - title#|#.*/([^/]+)/(?:Episode|e)+[\\s\\-]?([0-9]{1,2}).*#,#true#,#2,4#,#~/Videos/Show/Episode 01#|#.*/([^/]*)/(?:Episode|e)+([0-9]{1,2})\\s?\\-(.*)#,#true#,#2,4,0#,#~/Videos/Show/e01 - title</default>
    </entry>
    <entry name="RegExpMovie" type="String">
      <label>Regular expressions that will detect and extract parts of a movie filename.</label>
      <default>(.*)[\\s\\(\\[]+([0-9]{4})[\\)\\]]?.*#,#false#,#0,1#,#Foo bar [2013]#|#(.*)\\s[\\-]+[\\s(\\[]+([0-9]{4})[\\)\\]]?.*#,#false#,#0,1#,#Foo bar - (2013)</default>
    </entry>
    <entry name="RegExpMusic" type="String">
      <label>Regular expressions that will detect and extract  parts of a music filename.</label>
      <default>(.*)[\\s\\-]+\\s([0-9]+)\\s[\\-]+(.*)#,#false#,#5,7,0#,#Artist - 04 - Track#|#.*/([^/]*)/([^/]*)/([0-9]+)\\s?\\-+(.*)#,#true#,#5,6,7,0#,#~/Music/Artist/Album/04 - Track#|#.*/([^/]*)/([^/]*)/([^/]*)#,#true#,#5,6,7#,#~/Music/Artist/Album/track#|#(.*)\\s?[\\-]+\\s?(.*)#,#false#,#5,0#,#Artist - Track</default>
    </entry>
    <entry name="RegExpDocument" type="String">
      <label>Regular expressions that will detect and extract parts of a document filename.</label>
      <default></default>
    </entry>
  </group>

</kcfg>
