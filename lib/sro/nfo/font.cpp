/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "font.h"



#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Font::Font()
  : InformationElement( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font") )
{
}



Nepomuk2::Font::Font( const Font& res )
  : InformationElement( res )
{
}


Nepomuk2::Font::Font( const Nepomuk2::Resource& res )
  : InformationElement( res )
{
}


Nepomuk2::Font::Font( const QString& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font") )
{
}

Nepomuk2::Font::Font( const QUrl& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font") )
{
}

Nepomuk2::Font::Font( const QString& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}


Nepomuk2::Font::Font( const QUrl& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk2::Font::~Font()
{
}

Nepomuk2::Font& Nepomuk2::Font::operator=( const Font& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Font::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font");
}

QList<Nepomuk2::Resource> Nepomuk2::Font::foundrys() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::Font::setFoundrys( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry"), Variant( value ) );
}

void Nepomuk2::Font::addFoundry( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry"), v );
}

Nepomuk2::Resource Nepomuk2::Font::foundry() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return Resource( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry") ).toResource().uri() );
}

void Nepomuk2::Font::setFoundry( const Nepomuk2::Resource& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry"), Variant( value ) );
}

QUrl Nepomuk2::Font::foundryUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#foundry");
}

QStringList Nepomuk2::Font::fontFamilys() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily") ).toStringList());
}

void Nepomuk2::Font::setFontFamilys( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily"), Variant( value ) );
}

void Nepomuk2::Font::addFontFamily( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily"), v );
}

QString Nepomuk2::Font::fontFamily() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily") ).toStringList() << QString() ).first();
}

void Nepomuk2::Font::setFontFamily( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily"), Variant( value ) );
}

QUrl Nepomuk2::Font::fontFamilyUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#fontFamily");
}


