/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "media.h"

#include "dataobject.h"
#include "compressiontype.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Media::Media()
  : InformationElement( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Media") )
{
}



Nepomuk2::Media::Media( const Media& res )
  : InformationElement( res )
{
}


Nepomuk2::Media::Media( const Nepomuk2::Resource& res )
  : InformationElement( res )
{
}


Nepomuk2::Media::Media( const QString& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Media") )
{
}

Nepomuk2::Media::Media( const QUrl& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Media") )
{
}

Nepomuk2::Media::Media( const QString& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}


Nepomuk2::Media::Media( const QUrl& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk2::Media::~Media()
{
}

Nepomuk2::Media& Nepomuk2::Media::operator=( const Media& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Media::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Media");
}

QList<Nepomuk2::DataObject> Nepomuk2::Media::mediaStreams() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<DataObject> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaStream") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( DataObject( *it ) );
    return rl;
}

void Nepomuk2::Media::setMediaStreams( const QList<Nepomuk2::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaStream"), Variant( l ) );
}

void Nepomuk2::Media::addMediaStream( const Nepomuk2::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaStream") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaStream"), v );
}

QUrl Nepomuk2::Media::mediaStreamUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaStream");
}

QList<double> Nepomuk2::Media::averageBitrates() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate") ).toDoubleList());
}

void Nepomuk2::Media::setAverageBitrates( const QList<double>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate"), Variant( value ) );
}

void Nepomuk2::Media::addAverageBitrate( const double& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate"), v );
}

double Nepomuk2::Media::averageBitrate() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate") ).toDoubleList() << 0.0 ).first();
}

void Nepomuk2::Media::setAverageBitrate( const double& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate"), Variant( value ) );
}

QUrl Nepomuk2::Media::averageBitrateUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate");
}

QStringList Nepomuk2::Media::bitDepths() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth") ).toStringList());
}

void Nepomuk2::Media::setBitDepths( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth"), Variant( value ) );
}

void Nepomuk2::Media::addBitDepth( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth"), v );
}

QString Nepomuk2::Media::bitDepth() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth") ).toStringList() << QString() ).first();
}

void Nepomuk2::Media::setBitDepth( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth"), Variant( value ) );
}

QUrl Nepomuk2::Media::bitDepthUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth");
}

QList<qint64> Nepomuk2::Media::counts() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#count") ).toInt64List());
}

void Nepomuk2::Media::setCounts( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#count"), Variant( value ) );
}

void Nepomuk2::Media::addCount( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#count") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#count"), v );
}

QUrl Nepomuk2::Media::countUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#count");
}

QStringList Nepomuk2::Media::bitrateTypes() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType") ).toStringList());
}

void Nepomuk2::Media::setBitrateTypes( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType"), Variant( value ) );
}

void Nepomuk2::Media::addBitrateType( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType"), v );
}

QString Nepomuk2::Media::bitrateType() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType") ).toStringList() << QString() ).first();
}

void Nepomuk2::Media::setBitrateType( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType"), Variant( value ) );
}

QUrl Nepomuk2::Media::bitrateTypeUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType");
}

QStringList Nepomuk2::Media::codecs() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#codec") ).toStringList());
}

void Nepomuk2::Media::setCodecs( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#codec"), Variant( value ) );
}

void Nepomuk2::Media::addCodec( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#codec") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#codec"), v );
}

QUrl Nepomuk2::Media::codecUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#codec");
}

QList<Nepomuk2::CompressionType> Nepomuk2::Media::compressionTypes() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<CompressionType> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( CompressionType( *it ) );
    return rl;
}

void Nepomuk2::Media::setCompressionTypes( const QList<Nepomuk2::CompressionType>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<CompressionType>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType"), Variant( l ) );
}

void Nepomuk2::Media::addCompressionType( const Nepomuk2::CompressionType& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType"), v );
}

Nepomuk2::CompressionType Nepomuk2::Media::compressionType() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return CompressionType( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType") ).toResource().uri() );
}

void Nepomuk2::Media::setCompressionType( const Nepomuk2::CompressionType& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType"), Variant( value ) );
}

QUrl Nepomuk2::Media::compressionTypeUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType");
}

QList<double> Nepomuk2::Media::rates() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rate") ).toDoubleList());
}

void Nepomuk2::Media::setRates( const QList<double>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rate"), Variant( value ) );
}

void Nepomuk2::Media::addRate( const double& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rate") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rate"), v );
}

QUrl Nepomuk2::Media::rateUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rate");
}


