/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "visual.h"



#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Visual::Visual()
  : Media( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Visual") )
{
}



Nepomuk2::Visual::Visual( const Visual& res )
  : Media( res )
{
}


Nepomuk2::Visual::Visual( const Nepomuk2::Resource& res )
  : Media( res )
{
}


Nepomuk2::Visual::Visual( const QString& uri )
  : Media( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Visual") )
{
}

Nepomuk2::Visual::Visual( const QUrl& uri )
  : Media( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Visual") )
{
}

Nepomuk2::Visual::Visual( const QString& uri, const QUrl& type )
  : Media( uri, type )
{
}


Nepomuk2::Visual::Visual( const QUrl& uri, const QUrl& type )
  : Media( uri, type )
{
}

Nepomuk2::Visual::~Visual()
{
}

Nepomuk2::Visual& Nepomuk2::Visual::operator=( const Visual& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Visual::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Visual");
}

QList<bool> Nepomuk2::Visual::interlaceModes() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode") ).toBoolList());
}

void Nepomuk2::Visual::setInterlaceModes( const QList<bool>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode"), Variant( value ) );
}

void Nepomuk2::Visual::addInterlaceMode( const bool& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode"), v );
}

bool Nepomuk2::Visual::interlaceMode() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode") ).toBoolList() << false ).first();
}

void Nepomuk2::Visual::setInterlaceMode( const bool& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode"), Variant( value ) );
}

QUrl Nepomuk2::Visual::interlaceModeUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode");
}

QList<qint64> Nepomuk2::Visual::widths() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width") ).toInt64List());
}

void Nepomuk2::Visual::setWidths( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width"), Variant( value ) );
}

void Nepomuk2::Visual::addWidth( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width"), v );
}

qint64 Nepomuk2::Visual::width() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Visual::setWidth( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width"), Variant( value ) );
}

QUrl Nepomuk2::Visual::widthUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width");
}

QList<qint64> Nepomuk2::Visual::heights() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height") ).toInt64List());
}

void Nepomuk2::Visual::setHeights( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height"), Variant( value ) );
}

void Nepomuk2::Visual::addHeight( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height"), v );
}

qint64 Nepomuk2::Visual::height() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Visual::setHeight( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height"), Variant( value ) );
}

QUrl Nepomuk2::Visual::heightUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height");
}

QList<qint64> Nepomuk2::Visual::colorDepths() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth") ).toInt64List());
}

void Nepomuk2::Visual::setColorDepths( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth"), Variant( value ) );
}

void Nepomuk2::Visual::addColorDepth( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth"), v );
}

qint64 Nepomuk2::Visual::colorDepth() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Visual::setColorDepth( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth"), Variant( value ) );
}

QUrl Nepomuk2::Visual::colorDepthUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth");
}

QList<double> Nepomuk2::Visual::aspectRatios() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio") ).toDoubleList());
}

void Nepomuk2::Visual::setAspectRatios( const QList<double>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio"), Variant( value ) );
}

void Nepomuk2::Visual::addAspectRatio( const double& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio"), v );
}

double Nepomuk2::Visual::aspectRatio() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio") ).toDoubleList() << 0.0 ).first();
}

void Nepomuk2::Visual::setAspectRatio( const double& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio"), Variant( value ) );
}

QUrl Nepomuk2::Visual::aspectRatioUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio");
}


