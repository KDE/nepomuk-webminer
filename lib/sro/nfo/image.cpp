/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "image.h"



#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Image::Image()
  : Visual( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Image") )
{
}



Nepomuk2::Image::Image( const Image& res )
  : Visual( res )
{
}


Nepomuk2::Image::Image( const Nepomuk2::Resource& res )
  : Visual( res )
{
}


Nepomuk2::Image::Image( const QString& uri )
  : Visual( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Image") )
{
}

Nepomuk2::Image::Image( const QUrl& uri )
  : Visual( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Image") )
{
}

Nepomuk2::Image::Image( const QString& uri, const QUrl& type )
  : Visual( uri, type )
{
}


Nepomuk2::Image::Image( const QUrl& uri, const QUrl& type )
  : Visual( uri, type )
{
}

Nepomuk2::Image::~Image()
{
}

Nepomuk2::Image& Nepomuk2::Image::operator=( const Image& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Image::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Image");
}

QList<qint64> Nepomuk2::Image::horizontalResolutions() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#horizontalResolution") ).toInt64List());
}

void Nepomuk2::Image::setHorizontalResolutions( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#horizontalResolution"), Variant( value ) );
}

void Nepomuk2::Image::addHorizontalResolution( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#horizontalResolution") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#horizontalResolution"), v );
}

qint64 Nepomuk2::Image::horizontalResolution() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#horizontalResolution") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Image::setHorizontalResolution( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#horizontalResolution"), Variant( value ) );
}

QUrl Nepomuk2::Image::horizontalResolutionUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#horizontalResolution");
}

QList<qint64> Nepomuk2::Image::verticalResolutions() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#verticalResolution") ).toInt64List());
}

void Nepomuk2::Image::setVerticalResolutions( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#verticalResolution"), Variant( value ) );
}

void Nepomuk2::Image::addVerticalResolution( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#verticalResolution") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#verticalResolution"), v );
}

qint64 Nepomuk2::Image::verticalResolution() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#verticalResolution") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Image::setVerticalResolution( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#verticalResolution"), Variant( value ) );
}

QUrl Nepomuk2::Image::verticalResolutionUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#verticalResolution");
}

QList<Nepomuk2::Resource> Nepomuk2::Image::depictses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#depicts") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::Image::setDepictses( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#depicts"), Variant( value ) );
}

void Nepomuk2::Image::addDepicts( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#depicts") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#depicts"), v );
}

QUrl Nepomuk2::Image::depictsUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#depicts");
}


