/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _AUDIO_H_
#define _AUDIO_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {

}

#include "media.h"


namespace Nepomuk2 {

    /**
     * A file containing audio content 
     */
    class  Audio : public Media
    {
    public:
        /**
         * Create a new empty and invalid Audio instance
         */
        Audio();

        /**
         * Default copy constructor
         */
        Audio( const Audio& );
        Audio( const Resource& );

        /**
         * Create a new Audio instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Audio( const QString& uriOrIdentifier );

        /**
         * Create a new Audio instance representing the resource
         * referenced by \a uri.
         */
        Audio( const QUrl& uri );
        ~Audio();

        Audio& operator=( const Audio& );

        /**
         * Get property 'sampleRate'. The amount of audio samples per 
         * second. 
         */
        QList<double> sampleRates() const;

        /**
         * Set property 'sampleRate'. The amount of audio samples per 
         * second. 
         */
        void setSampleRates( const QList<double>& value );

        /**
         * Add a value to property 'sampleRate'. The amount of audio samples 
         * per second. 
         */
        void addSampleRate( const double& value );

        /**
         * Get property 'sampleRate'. The amount of audio samples per 
         * second. 
         */
        double sampleRate() const;

        /**
         * Set property 'sampleRate'. The amount of audio samples per 
         * second. 
         */
        void setSampleRate( const double& value );

        /**
         * \return The URI of the property 'sampleRate'. 
         */
        static QUrl sampleRateUri();

        /**
         * Get property 'sampleCount'. The amount of samples in an audio 
         * clip. 
         */
        QList<qint64> sampleCounts() const;

        /**
         * Set property 'sampleCount'. The amount of samples in an audio 
         * clip. 
         */
        void setSampleCounts( const QList<qint64>& value );

        /**
         * Add a value to property 'sampleCount'. The amount of samples 
         * in an audio clip. 
         */
        void addSampleCount( const qint64& value );

        /**
         * Get property 'sampleCount'. The amount of samples in an audio 
         * clip. 
         */
        qint64 sampleCount() const;

        /**
         * Set property 'sampleCount'. The amount of samples in an audio 
         * clip. 
         */
        void setSampleCount( const qint64& value );

        /**
         * \return The URI of the property 'sampleCount'. 
         */
        static QUrl sampleCountUri();

        /**
         * Get property 'bitsPerSample'. Amount of bits in each audio 
         * sample. 
         */
        QList<qint64> bitsPerSamples() const;

        /**
         * Set property 'bitsPerSample'. Amount of bits in each audio 
         * sample. 
         */
        void setBitsPerSamples( const QList<qint64>& value );

        /**
         * Add a value to property 'bitsPerSample'. Amount of bits in each 
         * audio sample. 
         */
        void addBitsPerSample( const qint64& value );

        /**
         * Get property 'bitsPerSample'. Amount of bits in each audio 
         * sample. 
         */
        qint64 bitsPerSample() const;

        /**
         * Set property 'bitsPerSample'. Amount of bits in each audio 
         * sample. 
         */
        void setBitsPerSample( const qint64& value );

        /**
         * \return The URI of the property 'bitsPerSample'. 
         */
        static QUrl bitsPerSampleUri();

        /**
         * Get property 'channels'. Number of channels. This property 
         * is to be used directly if no detailed information is necessary. 
         * Otherwise use more detailed subproperties. 
         */
        QList<qint64> channelses() const;

        /**
         * Set property 'channels'. Number of channels. This property 
         * is to be used directly if no detailed information is necessary. 
         * Otherwise use more detailed subproperties. 
         */
        void setChannelses( const QList<qint64>& value );

        /**
         * Add a value to property 'channels'. Number of channels. This 
         * property is to be used directly if no detailed information is 
         * necessary. Otherwise use more detailed subproperties. 
         */
        void addChannels( const qint64& value );

        /**
         * Get property 'channels'. Number of channels. This property 
         * is to be used directly if no detailed information is necessary. 
         * Otherwise use more detailed subproperties. 
         */
        qint64 channels() const;

        /**
         * Set property 'channels'. Number of channels. This property 
         * is to be used directly if no detailed information is necessary. 
         * Otherwise use more detailed subproperties. 
         */
        void setChannels( const qint64& value );

        /**
         * \return The URI of the property 'channels'. 
         */
        static QUrl channelsUri();

        /**
         * Retrieve a list of all available Audio resources. This list 
         * consists of all resource of type Audio that are stored in the 
         * local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Audio> allAudios();


        /**
         * \return The URI of the resource type that is used in Audio instances.
         */
        static QString resourceTypeUri();

    protected:
       Audio( const QString& uri, const QUrl& type );
       Audio( const QUrl& uri, const QUrl& type );
    };
}

#endif
