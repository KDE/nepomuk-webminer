/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "audio.h"



#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Audio::Audio()
  : Media( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio") )
{
}



Nepomuk2::Audio::Audio( const Audio& res )
  : Media( res )
{
}


Nepomuk2::Audio::Audio( const Nepomuk2::Resource& res )
  : Media( res )
{
}


Nepomuk2::Audio::Audio( const QString& uri )
  : Media( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio") )
{
}

Nepomuk2::Audio::Audio( const QUrl& uri )
  : Media( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio") )
{
}

Nepomuk2::Audio::Audio( const QString& uri, const QUrl& type )
  : Media( uri, type )
{
}


Nepomuk2::Audio::Audio( const QUrl& uri, const QUrl& type )
  : Media( uri, type )
{
}

Nepomuk2::Audio::~Audio()
{
}

Nepomuk2::Audio& Nepomuk2::Audio::operator=( const Audio& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Audio::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio");
}

QList<double> Nepomuk2::Audio::sampleRates() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate") ).toDoubleList());
}

void Nepomuk2::Audio::setSampleRates( const QList<double>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate"), Variant( value ) );
}

void Nepomuk2::Audio::addSampleRate( const double& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate"), v );
}

double Nepomuk2::Audio::sampleRate() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate") ).toDoubleList() << 0.0 ).first();
}

void Nepomuk2::Audio::setSampleRate( const double& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate"), Variant( value ) );
}

QUrl Nepomuk2::Audio::sampleRateUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleRate");
}

QList<qint64> Nepomuk2::Audio::sampleCounts() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount") ).toInt64List());
}

void Nepomuk2::Audio::setSampleCounts( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount"), Variant( value ) );
}

void Nepomuk2::Audio::addSampleCount( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount"), v );
}

qint64 Nepomuk2::Audio::sampleCount() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Audio::setSampleCount( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount"), Variant( value ) );
}

QUrl Nepomuk2::Audio::sampleCountUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sampleCount");
}

QList<qint64> Nepomuk2::Audio::bitsPerSamples() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample") ).toInt64List());
}

void Nepomuk2::Audio::setBitsPerSamples( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample"), Variant( value ) );
}

void Nepomuk2::Audio::addBitsPerSample( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample"), v );
}

qint64 Nepomuk2::Audio::bitsPerSample() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Audio::setBitsPerSample( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample"), Variant( value ) );
}

QUrl Nepomuk2::Audio::bitsPerSampleUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitsPerSample");
}

QList<qint64> Nepomuk2::Audio::channelses() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels") ).toInt64List());
}

void Nepomuk2::Audio::setChannelses( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels"), Variant( value ) );
}

void Nepomuk2::Audio::addChannels( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels"), v );
}

qint64 Nepomuk2::Audio::channels() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Audio::setChannels( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels"), Variant( value ) );
}

QUrl Nepomuk2::Audio::channelsUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#channels");
}


