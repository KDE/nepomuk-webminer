/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "rasterimage.h"



#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::RasterImage::RasterImage()
  : Image( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RasterImage") )
{
}



Nepomuk2::RasterImage::RasterImage( const RasterImage& res )
  : Image( res )
{
}


Nepomuk2::RasterImage::RasterImage( const Nepomuk2::Resource& res )
  : Image( res )
{
}


Nepomuk2::RasterImage::RasterImage( const QString& uri )
  : Image( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RasterImage") )
{
}

Nepomuk2::RasterImage::RasterImage( const QUrl& uri )
  : Image( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RasterImage") )
{
}

Nepomuk2::RasterImage::RasterImage( const QString& uri, const QUrl& type )
  : Image( uri, type )
{
}


Nepomuk2::RasterImage::RasterImage( const QUrl& uri, const QUrl& type )
  : Image( uri, type )
{
}

Nepomuk2::RasterImage::~RasterImage()
{
}

Nepomuk2::RasterImage& Nepomuk2::RasterImage::operator=( const RasterImage& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::RasterImage::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RasterImage");
}

QList<qint64> Nepomuk2::RasterImage::colorCounts() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorCount") ).toInt64List());
}

void Nepomuk2::RasterImage::setColorCounts( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorCount"), Variant( value ) );
}

void Nepomuk2::RasterImage::addColorCount( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorCount") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorCount"), v );
}

qint64 Nepomuk2::RasterImage::colorCount() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorCount") ).toInt64List() << 0 ).first();
}

void Nepomuk2::RasterImage::setColorCount( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorCount"), Variant( value ) );
}

QUrl Nepomuk2::RasterImage::colorCountUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorCount");
}

QList<qint64> Nepomuk2::RasterImage::paletteSizes() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#paletteSize") ).toInt64List());
}

void Nepomuk2::RasterImage::setPaletteSizes( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#paletteSize"), Variant( value ) );
}

void Nepomuk2::RasterImage::addPaletteSize( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#paletteSize") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#paletteSize"), v );
}

qint64 Nepomuk2::RasterImage::paletteSize() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#paletteSize") ).toInt64List() << 0 ).first();
}

void Nepomuk2::RasterImage::setPaletteSize( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#paletteSize"), Variant( value ) );
}

QUrl Nepomuk2::RasterImage::paletteSizeUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#paletteSize");
}


