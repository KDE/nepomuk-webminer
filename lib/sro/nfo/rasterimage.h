/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _RASTERIMAGE_H_
#define _RASTERIMAGE_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {

}

#include "image.h"


namespace Nepomuk2 {

    /**
     * A raster image. 
     */
    class  RasterImage : public Image
    {
    public:
        /**
         * Create a new empty and invalid RasterImage instance
         */
        RasterImage();

        /**
         * Default copy constructor
         */
        RasterImage( const RasterImage& );
        RasterImage( const Resource& );

        /**
         * Create a new RasterImage instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        RasterImage( const QString& uriOrIdentifier );

        /**
         * Create a new RasterImage instance representing the resource
         * referenced by \a uri.
         */
        RasterImage( const QUrl& uri );
        ~RasterImage();

        RasterImage& operator=( const RasterImage& );

        /**
         * Get property 'colorCount'. The number of colors used/available 
         * in a raster image. 
         */
        QList<qint64> colorCounts() const;

        /**
         * Set property 'colorCount'. The number of colors used/available 
         * in a raster image. 
         */
        void setColorCounts( const QList<qint64>& value );

        /**
         * Add a value to property 'colorCount'. The number of colors used/available 
         * in a raster image. 
         */
        void addColorCount( const qint64& value );

        /**
         * Get property 'colorCount'. The number of colors used/available 
         * in a raster image. 
         */
        qint64 colorCount() const;

        /**
         * Set property 'colorCount'. The number of colors used/available 
         * in a raster image. 
         */
        void setColorCount( const qint64& value );

        /**
         * \return The URI of the property 'colorCount'. 
         */
        static QUrl colorCountUri();

        /**
         * Get property 'paletteSize'. The number of colors defined in 
         * palette of the raster image. 
         */
        QList<qint64> paletteSizes() const;

        /**
         * Set property 'paletteSize'. The number of colors defined in 
         * palette of the raster image. 
         */
        void setPaletteSizes( const QList<qint64>& value );

        /**
         * Add a value to property 'paletteSize'. The number of colors 
         * defined in palette of the raster image. 
         */
        void addPaletteSize( const qint64& value );

        /**
         * Get property 'paletteSize'. The number of colors defined in 
         * palette of the raster image. 
         */
        qint64 paletteSize() const;

        /**
         * Set property 'paletteSize'. The number of colors defined in 
         * palette of the raster image. 
         */
        void setPaletteSize( const qint64& value );

        /**
         * \return The URI of the property 'paletteSize'. 
         */
        static QUrl paletteSizeUri();

        /**
         * Retrieve a list of all available RasterImage resources. This 
         * list consists of all resource of type RasterImage that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<RasterImage> allRasterImages();


        /**
         * \return The URI of the resource type that is used in RasterImage instances.
         */
        static QString resourceTypeUri();

    protected:
       RasterImage( const QString& uri, const QUrl& type );
       RasterImage( const QUrl& uri, const QUrl& type );
    };
}

#endif
