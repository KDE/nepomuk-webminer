/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "bookmark.h"

#include "dataobject.h"
#include "bookmarkfolder.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Bookmark::Bookmark()
  : InformationElement( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark") )
{
}



Nepomuk2::Bookmark::Bookmark( const Bookmark& res )
  : InformationElement( res )
{
}


Nepomuk2::Bookmark::Bookmark( const Nepomuk2::Resource& res )
  : InformationElement( res )
{
}


Nepomuk2::Bookmark::Bookmark( const QString& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark") )
{
}

Nepomuk2::Bookmark::Bookmark( const QUrl& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark") )
{
}

Nepomuk2::Bookmark::Bookmark( const QString& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}


Nepomuk2::Bookmark::Bookmark( const QUrl& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk2::Bookmark::~Bookmark()
{
}

Nepomuk2::Bookmark& Nepomuk2::Bookmark::operator=( const Bookmark& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Bookmark::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark");
}

QList<Nepomuk2::DataObject> Nepomuk2::Bookmark::bookmarkses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<DataObject> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( DataObject( *it ) );
    return rl;
}

void Nepomuk2::Bookmark::setBookmarkses( const QList<Nepomuk2::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks"), Variant( l ) );
}

void Nepomuk2::Bookmark::addBookmarks( const Nepomuk2::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks"), v );
}

Nepomuk2::DataObject Nepomuk2::Bookmark::bookmarks() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return DataObject( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks") ).toResource().uri() );
}

void Nepomuk2::Bookmark::setBookmarks( const Nepomuk2::DataObject& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks"), Variant( value ) );
}

QUrl Nepomuk2::Bookmark::bookmarksUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks");
}

QList<qint64> Nepomuk2::Bookmark::characterPositions() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#characterPosition") ).toInt64List());
}

void Nepomuk2::Bookmark::setCharacterPositions( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#characterPosition"), Variant( value ) );
}

void Nepomuk2::Bookmark::addCharacterPosition( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#characterPosition") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#characterPosition"), v );
}

qint64 Nepomuk2::Bookmark::characterPosition() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#characterPosition") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Bookmark::setCharacterPosition( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#characterPosition"), Variant( value ) );
}

QUrl Nepomuk2::Bookmark::characterPositionUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#characterPosition");
}

QList<qint64> Nepomuk2::Bookmark::pageNumbers() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#pageNumber") ).toInt64List());
}

void Nepomuk2::Bookmark::setPageNumbers( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#pageNumber"), Variant( value ) );
}

void Nepomuk2::Bookmark::addPageNumber( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#pageNumber") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#pageNumber"), v );
}

qint64 Nepomuk2::Bookmark::pageNumber() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#pageNumber") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Bookmark::setPageNumber( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#pageNumber"), Variant( value ) );
}

QUrl Nepomuk2::Bookmark::pageNumberUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#pageNumber");
}

QList<qint64> Nepomuk2::Bookmark::streamPositions() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#streamPosition") ).toInt64List());
}

void Nepomuk2::Bookmark::setStreamPositions( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#streamPosition"), Variant( value ) );
}

void Nepomuk2::Bookmark::addStreamPosition( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#streamPosition") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#streamPosition"), v );
}

qint64 Nepomuk2::Bookmark::streamPosition() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#streamPosition") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Bookmark::setStreamPosition( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#streamPosition"), Variant( value ) );
}

QUrl Nepomuk2::Bookmark::streamPositionUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#streamPosition");
}


