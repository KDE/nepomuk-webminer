/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "filesystem.h"



#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Filesystem::Filesystem()
  : DataContainer( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Filesystem") )
{
}



Nepomuk2::Filesystem::Filesystem( const Filesystem& res )
  : DataContainer( res )
{
}


Nepomuk2::Filesystem::Filesystem( const Nepomuk2::Resource& res )
  : DataContainer( res )
{
}


Nepomuk2::Filesystem::Filesystem( const QString& uri )
  : DataContainer( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Filesystem") )
{
}

Nepomuk2::Filesystem::Filesystem( const QUrl& uri )
  : DataContainer( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Filesystem") )
{
}

Nepomuk2::Filesystem::Filesystem( const QString& uri, const QUrl& type )
  : DataContainer( uri, type )
{
}


Nepomuk2::Filesystem::Filesystem( const QUrl& uri, const QUrl& type )
  : DataContainer( uri, type )
{
}

Nepomuk2::Filesystem::~Filesystem()
{
}

Nepomuk2::Filesystem& Nepomuk2::Filesystem::operator=( const Filesystem& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Filesystem::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Filesystem");
}

QStringList Nepomuk2::Filesystem::filesystemTypes() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#filesystemType") ).toStringList());
}

void Nepomuk2::Filesystem::setFilesystemTypes( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#filesystemType"), Variant( value ) );
}

void Nepomuk2::Filesystem::addFilesystemType( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#filesystemType") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#filesystemType"), v );
}

QString Nepomuk2::Filesystem::filesystemType() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#filesystemType") ).toStringList() << QString() ).first();
}

void Nepomuk2::Filesystem::setFilesystemType( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#filesystemType"), Variant( value ) );
}

QUrl Nepomuk2::Filesystem::filesystemTypeUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#filesystemType");
}

QList<qint64> Nepomuk2::Filesystem::totalSpaces() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#totalSpace") ).toInt64List());
}

void Nepomuk2::Filesystem::setTotalSpaces( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#totalSpace"), Variant( value ) );
}

void Nepomuk2::Filesystem::addTotalSpace( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#totalSpace") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#totalSpace"), v );
}

qint64 Nepomuk2::Filesystem::totalSpace() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#totalSpace") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Filesystem::setTotalSpace( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#totalSpace"), Variant( value ) );
}

QUrl Nepomuk2::Filesystem::totalSpaceUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#totalSpace");
}

QList<qint64> Nepomuk2::Filesystem::freeSpaces() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#freeSpace") ).toInt64List());
}

void Nepomuk2::Filesystem::setFreeSpaces( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#freeSpace"), Variant( value ) );
}

void Nepomuk2::Filesystem::addFreeSpace( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#freeSpace") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#freeSpace"), v );
}

qint64 Nepomuk2::Filesystem::freeSpace() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#freeSpace") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Filesystem::setFreeSpace( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#freeSpace"), Variant( value ) );
}

QUrl Nepomuk2::Filesystem::freeSpaceUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#freeSpace");
}

QList<qint64> Nepomuk2::Filesystem::occupiedSpaces() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#occupiedSpace") ).toInt64List());
}

void Nepomuk2::Filesystem::setOccupiedSpaces( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#occupiedSpace"), Variant( value ) );
}

void Nepomuk2::Filesystem::addOccupiedSpace( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#occupiedSpace") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#occupiedSpace"), v );
}

qint64 Nepomuk2::Filesystem::occupiedSpace() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#occupiedSpace") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Filesystem::setOccupiedSpace( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#occupiedSpace"), Variant( value ) );
}

QUrl Nepomuk2::Filesystem::occupiedSpaceUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#occupiedSpace");
}

QStringList Nepomuk2::Filesystem::uuids() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#uuid") ).toStringList());
}

void Nepomuk2::Filesystem::setUuids( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#uuid"), Variant( value ) );
}

void Nepomuk2::Filesystem::addUuid( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#uuid") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#uuid"), v );
}

QUrl Nepomuk2::Filesystem::uuidUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#uuid");
}


