/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _FILESYSTEM_H_
#define _FILESYSTEM_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {

}

#include "datacontainer.h"


namespace Nepomuk2 {

    /**
     * A filesystem. Examples of filesystems include hard disk partitions, 
     * removable media, but also images thereof stored in files such 
     * as ISO. 
     */
    class  Filesystem : public DataContainer
    {
    public:
        /**
         * Create a new empty and invalid Filesystem instance
         */
        Filesystem();

        /**
         * Default copy constructor
         */
        Filesystem( const Filesystem& );
        Filesystem( const Resource& );

        /**
         * Create a new Filesystem instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Filesystem( const QString& uriOrIdentifier );

        /**
         * Create a new Filesystem instance representing the resource
         * referenced by \a uri.
         */
        Filesystem( const QUrl& uri );
        ~Filesystem();

        Filesystem& operator=( const Filesystem& );

        /**
         * Get property 'filesystemType'. Type of filesystem such as 
         * ext3 and ntfs. 
         */
        QStringList filesystemTypes() const;

        /**
         * Set property 'filesystemType'. Type of filesystem such as 
         * ext3 and ntfs. 
         */
        void setFilesystemTypes( const QStringList& value );

        /**
         * Add a value to property 'filesystemType'. Type of filesystem 
         * such as ext3 and ntfs. 
         */
        void addFilesystemType( const QString& value );

        /**
         * Get property 'filesystemType'. Type of filesystem such as 
         * ext3 and ntfs. 
         */
        QString filesystemType() const;

        /**
         * Set property 'filesystemType'. Type of filesystem such as 
         * ext3 and ntfs. 
         */
        void setFilesystemType( const QString& value );

        /**
         * \return The URI of the property 'filesystemType'. 
         */
        static QUrl filesystemTypeUri();

        /**
         * Get property 'totalSpace'. Total storage space of the filesystem, 
         * which can be different from nie:contentSize because the latter 
         * includes filesystem format overhead. 
         */
        QList<qint64> totalSpaces() const;

        /**
         * Set property 'totalSpace'. Total storage space of the filesystem, 
         * which can be different from nie:contentSize because the latter 
         * includes filesystem format overhead. 
         */
        void setTotalSpaces( const QList<qint64>& value );

        /**
         * Add a value to property 'totalSpace'. Total storage space of 
         * the filesystem, which can be different from nie:contentSize 
         * because the latter includes filesystem format overhead. 
         */
        void addTotalSpace( const qint64& value );

        /**
         * Get property 'totalSpace'. Total storage space of the filesystem, 
         * which can be different from nie:contentSize because the latter 
         * includes filesystem format overhead. 
         */
        qint64 totalSpace() const;

        /**
         * Set property 'totalSpace'. Total storage space of the filesystem, 
         * which can be different from nie:contentSize because the latter 
         * includes filesystem format overhead. 
         */
        void setTotalSpace( const qint64& value );

        /**
         * \return The URI of the property 'totalSpace'. 
         */
        static QUrl totalSpaceUri();

        /**
         * Get property 'freeSpace'. Unoccupied storage space of the 
         * filesystem. 
         */
        QList<qint64> freeSpaces() const;

        /**
         * Set property 'freeSpace'. Unoccupied storage space of the 
         * filesystem. 
         */
        void setFreeSpaces( const QList<qint64>& value );

        /**
         * Add a value to property 'freeSpace'. Unoccupied storage space 
         * of the filesystem. 
         */
        void addFreeSpace( const qint64& value );

        /**
         * Get property 'freeSpace'. Unoccupied storage space of the 
         * filesystem. 
         */
        qint64 freeSpace() const;

        /**
         * Set property 'freeSpace'. Unoccupied storage space of the 
         * filesystem. 
         */
        void setFreeSpace( const qint64& value );

        /**
         * \return The URI of the property 'freeSpace'. 
         */
        static QUrl freeSpaceUri();

        /**
         * Get property 'occupiedSpace'. Occupied storage space of the 
         * filesystem. 
         */
        QList<qint64> occupiedSpaces() const;

        /**
         * Set property 'occupiedSpace'. Occupied storage space of the 
         * filesystem. 
         */
        void setOccupiedSpaces( const QList<qint64>& value );

        /**
         * Add a value to property 'occupiedSpace'. Occupied storage 
         * space of the filesystem. 
         */
        void addOccupiedSpace( const qint64& value );

        /**
         * Get property 'occupiedSpace'. Occupied storage space of the 
         * filesystem. 
         */
        qint64 occupiedSpace() const;

        /**
         * Set property 'occupiedSpace'. Occupied storage space of the 
         * filesystem. 
         */
        void setOccupiedSpace( const qint64& value );

        /**
         * \return The URI of the property 'occupiedSpace'. 
         */
        static QUrl occupiedSpaceUri();

        /**
         * Get property 'uuid'. Universally unique identifier of the 
         * filesystem. In the future, this property may have its parent 
         * changed to a more generic class. 
         */
        QStringList uuids() const;

        /**
         * Set property 'uuid'. Universally unique identifier of the 
         * filesystem. In the future, this property may have its parent 
         * changed to a more generic class. 
         */
        void setUuids( const QStringList& value );

        /**
         * Add a value to property 'uuid'. Universally unique identifier 
         * of the filesystem. In the future, this property may have its 
         * parent changed to a more generic class. 
         */
        void addUuid( const QString& value );

        /**
         * \return The URI of the property 'uuid'. 
         */
        static QUrl uuidUri();

        /**
         * Retrieve a list of all available Filesystem resources. This 
         * list consists of all resource of type Filesystem that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Filesystem> allFilesystems();


        /**
         * \return The URI of the resource type that is used in Filesystem instances.
         */
        static QString resourceTypeUri();

    protected:
       Filesystem( const QString& uri, const QUrl& type );
       Filesystem( const QUrl& uri, const QUrl& type );
    };
}

#endif
