/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _TAG_H_
#define _TAG_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Thing;

}

#include "thing.h"


namespace Nepomuk2 {

    /**
     * Tags in the context of PIMO. A marker class for Things that are 
     * used to categorize documents (or other things). Tags must be 
     * a kind of Thing and must have a unique label. Documents should 
     * not be Tags by default. 
     */
    class  Tag : public Thing
    {
    public:
        /**
         * Create a new empty and invalid Tag instance
         */
        Tag();

        /**
         * Default copy constructor
         */
        Tag( const Tag& );
        Tag( const Resource& );

        /**
         * Create a new Tag instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Tag( const QString& uriOrIdentifier );

        /**
         * Create a new Tag instance representing the resource
         * referenced by \a uri.
         */
        Tag( const QUrl& uri );
        ~Tag();

        Tag& operator=( const Tag& );

        /**
         * Get property 'tagLabel'. The unique label of the tag. The label 
         * must be unique within the scope of one PersonalInformationModel. 
         * It is required and a subproperty of nao:prefLabel. It clarifies 
         * the use of nao:personalIdentifier by restricting the scope 
         * to tags. Semantically equivalent to skos:prefLabel, where 
         * uniqueness of labels is also recommended. 
         */
        QStringList tagLabels() const;

        /**
         * Set property 'tagLabel'. The unique label of the tag. The label 
         * must be unique within the scope of one PersonalInformationModel. 
         * It is required and a subproperty of nao:prefLabel. It clarifies 
         * the use of nao:personalIdentifier by restricting the scope 
         * to tags. Semantically equivalent to skos:prefLabel, where 
         * uniqueness of labels is also recommended. 
         */
        void setTagLabels( const QStringList& value );

        /**
         * Add a value to property 'tagLabel'. The unique label of the tag. 
         * The label must be unique within the scope of one PersonalInformationModel. 
         * It is required and a subproperty of nao:prefLabel. It clarifies 
         * the use of nao:personalIdentifier by restricting the scope 
         * to tags. Semantically equivalent to skos:prefLabel, where 
         * uniqueness of labels is also recommended. 
         */
        void addTagLabel( const QString& value );

        /**
         * Get property 'tagLabel'. The unique label of the tag. The label 
         * must be unique within the scope of one PersonalInformationModel. 
         * It is required and a subproperty of nao:prefLabel. It clarifies 
         * the use of nao:personalIdentifier by restricting the scope 
         * to tags. Semantically equivalent to skos:prefLabel, where 
         * uniqueness of labels is also recommended. 
         */
        QString tagLabel() const;

        /**
         * Set property 'tagLabel'. The unique label of the tag. The label 
         * must be unique within the scope of one PersonalInformationModel. 
         * It is required and a subproperty of nao:prefLabel. It clarifies 
         * the use of nao:personalIdentifier by restricting the scope 
         * to tags. Semantically equivalent to skos:prefLabel, where 
         * uniqueness of labels is also recommended. 
         */
        void setTagLabel( const QString& value );

        /**
         * \return The URI of the property 'tagLabel'. 
         */
        static QUrl tagLabelUri();

        /**
         * Get property 'isTagFor'. This thing is described further in 
         * the object thing. Similar semantics as skos:isSubjectOf. 
         */
        QList<Thing> isTagFors() const;

        /**
         * Set property 'isTagFor'. This thing is described further in 
         * the object thing. Similar semantics as skos:isSubjectOf. 
         */
        void setIsTagFors( const QList<Thing>& value );

        /**
         * Add a value to property 'isTagFor'. This thing is described 
         * further in the object thing. Similar semantics as skos:isSubjectOf. 
         */
        void addIsTagFor( const Thing& value );

        /**
         * \return The URI of the property 'isTagFor'. 
         */
        static QUrl isTagForUri();

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Thing toThing() const;

        /**
         * Retrieve a list of all available Tag resources. This list consists 
         * of all resource of type Tag that are stored in the local Nepomuk 
         * meta data storage and any changes made locally. Be aware that 
         * in some cases this list can get very big. Then it might be better 
         * to use libKNep directly. 
         */
        static QList<Tag> allTags();


        /**
         * \return The URI of the resource type that is used in Tag instances.
         */
        static QString resourceTypeUri();

    protected:
       Tag( const QString& uri, const QUrl& type );
       Tag( const QUrl& uri, const QUrl& type );
    };
}

#endif
