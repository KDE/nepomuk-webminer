/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _ASSOCIATION_H_
#define _ASSOCIATION_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class ClassOrThingOrPropertyOrAssociation;
    class Thing;
    class Resource;

}

#include "classorthingorpropertyorassociation.h"


namespace Nepomuk2 {

    /**
     * An association between two or more pimo-things. This is used 
     * to model n-ary relations and metadata about relations. For 
     * example, the asociation of a person being organizational member 
     * is only effectual within a period of time (after the person joined 
     * the organization and before the person left the organization). 
     * There can be multiple periods of time when associations are 
     * valid. 
     */
    class  Association : public ClassOrThingOrPropertyOrAssociation
    {
    public:
        /**
         * Create a new empty and invalid Association instance
         */
        Association();

        /**
         * Default copy constructor
         */
        Association( const Association& );
        Association( const Resource& );

        /**
         * Create a new Association instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Association( const QString& uriOrIdentifier );

        /**
         * Create a new Association instance representing the resource
         * referenced by \a uri.
         */
        Association( const QUrl& uri );
        ~Association();

        Association& operator=( const Association& );

        /**
         * Get property 'associationMember'. An super-property of all 
         * roles that an entity can have in an association. Member is the 
         * generic role of a thing in an association. Association subclasses 
         * should define sub-properties of this property. Associations 
         * can have Things as 
         */
        QList<Thing> associationMembers() const;

        /**
         * Set property 'associationMember'. An super-property of all 
         * roles that an entity can have in an association. Member is the 
         * generic role of a thing in an association. Association subclasses 
         * should define sub-properties of this property. Associations 
         * can have Things as 
         */
        void setAssociationMembers( const QList<Thing>& value );

        /**
         * Add a value to property 'associationMember'. An super-property 
         * of all roles that an entity can have in an association. Member 
         * is the generic role of a thing in an association. Association 
         * subclasses should define sub-properties of this property. 
         * Associations can have Things as 
         */
        void addAssociationMember( const Thing& value );

        /**
         * \return The URI of the property 'associationMember'. 
         */
        static QUrl associationMemberUri();

        /**
         * Get property 'associationEffectual'. During which time is 
         * this association effective? If omitted, the association is 
         * always effective. Start time and end-time may be left open, 
         * an open start time indicates that the fact is unknown, an open 
         * end-time indicates that the end-date is either unknown or the 
         * association has not ended. There can be multiple effectual 
         * periods. 
         */
        QList<Resource> associationEffectuals() const;

        /**
         * Set property 'associationEffectual'. During which time is 
         * this association effective? If omitted, the association is 
         * always effective. Start time and end-time may be left open, 
         * an open start time indicates that the fact is unknown, an open 
         * end-time indicates that the end-date is either unknown or the 
         * association has not ended. There can be multiple effectual 
         * periods. 
         */
        void setAssociationEffectuals( const QList<Resource>& value );

        /**
         * Add a value to property 'associationEffectual'. During which 
         * time is this association effective? If omitted, the association 
         * is always effective. Start time and end-time may be left open, 
         * an open start time indicates that the fact is unknown, an open 
         * end-time indicates that the end-date is either unknown or the 
         * association has not ended. There can be multiple effectual 
         * periods. 
         */
        void addAssociationEffectual( const Resource& value );

        /**
         * \return The URI of the property 'associationEffectual'. 
         */
        static QUrl associationEffectualUri();

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        ClassOrThingOrPropertyOrAssociation toClassOrThingOrPropertyOrAssociation() const;

        /**
         * Retrieve a list of all available Association resources. This 
         * list consists of all resource of type Association that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Association> allAssociations();


        /**
         * \return The URI of the resource type that is used in Association instances.
         */
        static QString resourceTypeUri();

    protected:
       Association( const QString& uri, const QUrl& type );
       Association( const QUrl& uri, const QUrl& type );
    };
}

#endif
