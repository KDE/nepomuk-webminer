/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _COLLECTION_H_
#define _COLLECTION_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {

}

#include "thing.h"


namespace Nepomuk2 {

    /**
     * A collection of Things, independent of their class. The items 
     * in the collection share a common property. Which property may 
     * be modelled explicitly or mentioned in the description of the 
     * Collection. The requirement of explicit modelling the semantic 
     * meaning of the collection is not mandatory, as collections 
     * can be created ad-hoc. Implizit modelling can be applied by 
     * the system by learning the properties. For example, a Collection 
     * of "Coworkers" could be defined as that all elements must be 
     * of class "Person" and have an attribute "work for the same Organization 
     * as the user". Further standards can be used to model these attributes. 
     */
    class  Collection : public Thing
    {
    public:
        /**
         * Create a new empty and invalid Collection instance
         */
        Collection();

        /**
         * Default copy constructor
         */
        Collection( const Collection& );
        Collection( const Resource& );

        /**
         * Create a new Collection instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Collection( const QString& uriOrIdentifier );

        /**
         * Create a new Collection instance representing the resource
         * referenced by \a uri.
         */
        Collection( const QUrl& uri );
        ~Collection();

        Collection& operator=( const Collection& );

        /**
         * Retrieve a list of all available Collection resources. This 
         * list consists of all resource of type Collection that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Collection> allCollections();


        /**
         * \return The URI of the resource type that is used in Collection instances.
         */
        static QString resourceTypeUri();

    protected:
       Collection( const QString& uri, const QUrl& type );
       Collection( const QUrl& uri, const QUrl& type );
    };
}

#endif
