/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _PERSONGROUP_H_
#define _PERSONGROUP_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Agent;
    class Collection;

}

#include "collection.h"


namespace Nepomuk2 {

    /**
     * A group of Persons. They are connected to each other by sharing 
     * a common attribute, for example they all belong to the same organization 
     * or have a common interest. Refer to pimo:Collection for more 
     * information about defining collections. 
     */
    class  PersonGroup : public Collection
    {
    public:
        /**
         * Create a new empty and invalid PersonGroup instance
         */
        PersonGroup();

        /**
         * Default copy constructor
         */
        PersonGroup( const PersonGroup& );
        PersonGroup( const Resource& );

        /**
         * Create a new PersonGroup instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        PersonGroup( const QString& uriOrIdentifier );

        /**
         * Create a new PersonGroup instance representing the resource
         * referenced by \a uri.
         */
        PersonGroup( const QUrl& uri );
        ~PersonGroup();

        PersonGroup& operator=( const PersonGroup& );

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Agent toAgent() const;

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Collection toCollection() const;

        /**
         * Retrieve a list of all available PersonGroup resources. This 
         * list consists of all resource of type PersonGroup that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<PersonGroup> allPersonGroups();


        /**
         * \return The URI of the resource type that is used in PersonGroup instances.
         */
        static QString resourceTypeUri();

    protected:
       PersonGroup( const QString& uri, const QUrl& type );
       PersonGroup( const QUrl& uri, const QUrl& type );
    };
}

#endif
