/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _PROPERTY_H_
#define _PROPERTY_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Resource;

}

#include <Nepomuk2/Resource>


namespace Nepomuk2 {


    class  Property : public Resource
    {
    public:
        /**
         * Create a new empty and invalid Property instance
         */
        Property();

        /**
         * Default copy constructor
         */
        Property( const Property& );
        Property( const Resource& );

        /**
         * Create a new Property instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Property( const QString& uriOrIdentifier );

        /**
         * Create a new Property instance representing the resource
         * referenced by \a uri.
         */
        Property( const QUrl& uri );
        ~Property();

        Property& operator=( const Property& );

        /**
         * Get property 'OtherSlot'. hasOtherSlot points from a clot 
         * in your PIMO to a slot in a domain ontology that represents the 
         * same connection idea. 
         */
        QList<Resource> otherSlots() const;

        /**
         * Set property 'OtherSlot'. hasOtherSlot points from a clot 
         * in your PIMO to a slot in a domain ontology that represents the 
         * same connection idea. 
         */
        void setOtherSlots( const QList<Resource>& value );

        /**
         * Add a value to property 'OtherSlot'. hasOtherSlot points from 
         * a clot in your PIMO to a slot in a domain ontology that represents 
         * the same connection idea. 
         */
        void addOtherSlot( const Resource& value );

        /**
         * \return The URI of the property 'OtherSlot'. 
         */
        static QUrl otherSlotUri();

        /**
         * Retrieve a list of all available Property resources. This list 
         * consists of all resource of type Property that are stored in 
         * the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Property> allPropertys();


        /**
         * \return The URI of the resource type that is used in Property instances.
         */
        static QString resourceTypeUri();

    protected:
       Property( const QString& uri, const QUrl& type );
       Property( const QUrl& uri, const QUrl& type );
    };
}

#endif
