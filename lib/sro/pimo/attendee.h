/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _ATTENDEE_H_
#define _ATTENDEE_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class SocialEvent;

}

#include "personrole.h"


namespace Nepomuk2 {

    /**
     * The role of someone attending a social event. 
     */
    class  Attendee : public PersonRole
    {
    public:
        /**
         * Create a new empty and invalid Attendee instance
         */
        Attendee();

        /**
         * Default copy constructor
         */
        Attendee( const Attendee& );
        Attendee( const Resource& );

        /**
         * Create a new Attendee instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Attendee( const QString& uriOrIdentifier );

        /**
         * Create a new Attendee instance representing the resource
         * referenced by \a uri.
         */
        Attendee( const QUrl& uri );
        ~Attendee();

        Attendee& operator=( const Attendee& );

        /**
         * Get property 'attendingMeeting'. the attended meeting 
         */
        QList<SocialEvent> attendingMeetings() const;

        /**
         * Set property 'attendingMeeting'. the attended meeting 
         */
        void setAttendingMeetings( const QList<SocialEvent>& value );

        /**
         * Add a value to property 'attendingMeeting'. the attended meeting 
         */
        void addAttendingMeeting( const SocialEvent& value );

        /**
         * \return The URI of the property 'attendingMeeting'. 
         */
        static QUrl attendingMeetingUri();

        /**
         * Retrieve a list of all available Attendee resources. This list 
         * consists of all resource of type Attendee that are stored in 
         * the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Attendee> allAttendees();


        /**
         * \return The URI of the resource type that is used in Attendee instances.
         */
        static QString resourceTypeUri();

    protected:
       Attendee( const QString& uri, const QUrl& type );
       Attendee( const QUrl& uri, const QUrl& type );
    };
}

#endif
