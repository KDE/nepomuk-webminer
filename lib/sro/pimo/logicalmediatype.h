/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _LOGICALMEDIATYPE_H_
#define _LOGICALMEDIATYPE_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {

}

#include "thing.h"


namespace Nepomuk2 {

    /**
     * Logical media types represent the content aspect of information 
     * elements e.g. a flyer, a contract, a promotional video, a todo 
     * list. The user can create new logical media types dependend 
     * on their domain: a salesman will need MarketingFlyer, Offer, 
     * Invoice while a student might create Report, Thesis and Homework. 
     * This is independent from the information element and data object 
     * (NIE/NFO) in which the media type will be stored. The same contract 
     * can be stored in a PDF file, a text file, or an HTML website. The 
     * groundingOccurrence of a LogicalMediaType is the Document 
     * that stores the content. 
     */
    class  LogicalMediaType : public Thing
    {
    public:
        /**
         * Create a new empty and invalid LogicalMediaType instance
         */
        LogicalMediaType();

        /**
         * Default copy constructor
         */
        LogicalMediaType( const LogicalMediaType& );
        LogicalMediaType( const Resource& );

        /**
         * Create a new LogicalMediaType instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        LogicalMediaType( const QString& uriOrIdentifier );

        /**
         * Create a new LogicalMediaType instance representing the resource
         * referenced by \a uri.
         */
        LogicalMediaType( const QUrl& uri );
        ~LogicalMediaType();

        LogicalMediaType& operator=( const LogicalMediaType& );

        /**
         * Retrieve a list of all available LogicalMediaType resources. 
         * This list consists of all resource of type LogicalMediaType 
         * that are stored in the local Nepomuk meta data storage and any 
         * changes made locally. Be aware that in some cases this list can 
         * get very big. Then it might be better to use libKNep directly. 
         */
        static QList<LogicalMediaType> allLogicalMediaTypes();


        /**
         * \return The URI of the resource type that is used in LogicalMediaType instances.
         */
        static QString resourceTypeUri();

    protected:
       LogicalMediaType( const QString& uri, const QUrl& type );
       LogicalMediaType( const QUrl& uri, const QUrl& type );
    };
}

#endif
