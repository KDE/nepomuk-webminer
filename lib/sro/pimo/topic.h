/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _TOPIC_H_
#define _TOPIC_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Tag;
    class PersonalInformationModel;
    class Thing;
    class Topic;

}

#include "thing.h"


namespace Nepomuk2 {

    /**
     * A topic is the subject of a discussion or document. Topics are 
     * distinguished from Things in their taxonomic nature, examples 
     * are scientific areas such as "Information Science", "Biology", 
     * or categories used in content syndication such as "Sports", 
     * "Politics". They are specific to the user's domain. 
     */
    class  Topic : public Thing
    {
    public:
        /**
         * Create a new empty and invalid Topic instance
         */
        Topic();

        /**
         * Default copy constructor
         */
        Topic( const Topic& );
        Topic( const Resource& );

        /**
         * Create a new Topic instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Topic( const QString& uriOrIdentifier );

        /**
         * Create a new Topic instance representing the resource
         * referenced by \a uri.
         */
        Topic( const QUrl& uri );
        ~Topic();

        Topic& operator=( const Topic& );

        /**
         * Get property 'superTopic'. The object topic is more general 
         * in meaning than the subject topic. Transitive. Similar to skos:broader. 
         */
        QList<Topic> superTopics() const;

        /**
         * Set property 'superTopic'. The object topic is more general 
         * in meaning than the subject topic. Transitive. Similar to skos:broader. 
         */
        void setSuperTopics( const QList<Topic>& value );

        /**
         * Add a value to property 'superTopic'. The object topic is more 
         * general in meaning than the subject topic. Transitive. Similar 
         * to skos:broader. 
         */
        void addSuperTopic( const Topic& value );

        /**
         * \return The URI of the property 'superTopic'. 
         */
        static QUrl superTopicUri();

        /**
         * Get property 'subTopic'. The object topic is more specific 
         * in meaning than the subject topic. Transitive. Similar in meaning 
         * to skos:narrower 
         */
        QList<Topic> subTopics() const;

        /**
         * Set property 'subTopic'. The object topic is more specific 
         * in meaning than the subject topic. Transitive. Similar in meaning 
         * to skos:narrower 
         */
        void setSubTopics( const QList<Topic>& value );

        /**
         * Add a value to property 'subTopic'. The object topic is more 
         * specific in meaning than the subject topic. Transitive. Similar 
         * in meaning to skos:narrower 
         */
        void addSubTopic( const Topic& value );

        /**
         * \return The URI of the property 'subTopic'. 
         */
        static QUrl subTopicUri();

        /**
         * Get all resources that have this resource set as property 'RootTopic'. 
         * The root topics of this PersonalInformationModel's topic 
         * hierarchy. Every topic that has no pimo:superTopic is a root 
         * topic. Semantically equivalent to skos:hasTopConcept. \sa 
         * ResourceManager::allResourcesWithProperty 
         */
        QList<PersonalInformationModel> rootTopicOf() const;

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Tag toTag() const;

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Thing toThing() const;

        /**
         * Retrieve a list of all available Topic resources. This list 
         * consists of all resource of type Topic that are stored in the 
         * local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Topic> allTopics();


        /**
         * \return The URI of the resource type that is used in Topic instances.
         */
        static QString resourceTypeUri();

    protected:
       Topic( const QString& uri, const QUrl& type );
       Topic( const QUrl& uri, const QUrl& type );
    };
}

#endif
