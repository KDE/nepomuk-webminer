/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _CLASS_H_
#define _CLASS_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Class;

}

#include <Nepomuk2/Resource>


namespace Nepomuk2 {


    class  Class : public Resource
    {
    public:
        /**
         * Create a new empty and invalid Class instance
         */
        Class();

        /**
         * Default copy constructor
         */
        Class( const Class& );
        Class( const Resource& );

        /**
         * Create a new Class instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Class( const QString& uriOrIdentifier );

        /**
         * Create a new Class instance representing the resource
         * referenced by \a uri.
         */
        Class( const QUrl& uri );
        ~Class();

        Class& operator=( const Class& );

        /**
         * Get property 'OtherConceptualization'. Short: hasOtherRepresentation 
         * points from a Class in your PIMO to a class in a domain ontology 
         * that represents the same class. Longer: hasOtherConceptualization 
         * means that a class of real world objects O represented by a concept 
         * C1 in the ontology has additional conceptualizations (as classes 
         * C2-Cn in different domain ontologies). This means: IF (O_i 
         * is conceptialized by C_j in Ontology_k) AND (O_l is conceptialized 
         * by C_m in Ontology_n) THEN (O_i and O_l is the same set of objects). 
         * hasOtherConceptualization is an transitive relation, but 
         * not equivalent (not symmetric nor reflexive). 
         */
        QList<Class> otherConceptualizations() const;

        /**
         * Set property 'OtherConceptualization'. Short: hasOtherRepresentation 
         * points from a Class in your PIMO to a class in a domain ontology 
         * that represents the same class. Longer: hasOtherConceptualization 
         * means that a class of real world objects O represented by a concept 
         * C1 in the ontology has additional conceptualizations (as classes 
         * C2-Cn in different domain ontologies). This means: IF (O_i 
         * is conceptialized by C_j in Ontology_k) AND (O_l is conceptialized 
         * by C_m in Ontology_n) THEN (O_i and O_l is the same set of objects). 
         * hasOtherConceptualization is an transitive relation, but 
         * not equivalent (not symmetric nor reflexive). 
         */
        void setOtherConceptualizations( const QList<Class>& value );

        /**
         * Add a value to property 'OtherConceptualization'. Short: 
         * hasOtherRepresentation points from a Class in your PIMO to 
         * a class in a domain ontology that represents the same class. 
         * Longer: hasOtherConceptualization means that a class of real 
         * world objects O represented by a concept C1 in the ontology has 
         * additional conceptualizations (as classes C2-Cn in different 
         * domain ontologies). This means: IF (O_i is conceptialized 
         * by C_j in Ontology_k) AND (O_l is conceptialized by C_m in Ontology_n) 
         * THEN (O_i and O_l is the same set of objects). hasOtherConceptualization 
         * is an transitive relation, but not equivalent (not symmetric 
         * nor reflexive). 
         */
        void addOtherConceptualization( const Class& value );

        /**
         * \return The URI of the property 'OtherConceptualization'. 
         */
        static QUrl otherConceptualizationUri();

        /**
         * Get all resources that have this resource set as property 'OtherConceptualization'. 
         * Short: hasOtherRepresentation points from a Class in your 
         * PIMO to a class in a domain ontology that represents the same 
         * class. Longer: hasOtherConceptualization means that a class 
         * of real world objects O represented by a concept C1 in the ontology 
         * has additional conceptualizations (as classes C2-Cn in different 
         * domain ontologies). This means: IF (O_i is conceptialized 
         * by C_j in Ontology_k) AND (O_l is conceptialized by C_m in Ontology_n) 
         * THEN (O_i and O_l is the same set of objects). hasOtherConceptualization 
         * is an transitive relation, but not equivalent (not symmetric 
         * nor reflexive). \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Class> otherConceptualizationOf() const;

        /**
         * Retrieve a list of all available Class resources. This list 
         * consists of all resource of type Class that are stored in the 
         * local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Class> allClasss();


        /**
         * \return The URI of the resource type that is used in Class instances.
         */
        static QString resourceTypeUri();

    protected:
       Class( const QString& uri, const QUrl& type );
       Class( const QUrl& uri, const QUrl& type );
    };
}

#endif
