/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _ORGANIZATION_H_
#define _ORGANIZATION_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Agent;
    class Locatable;
    class OrganizationMember;

}

#include "locatable.h"


namespace Nepomuk2 {

    /**
     * An administrative and functional structure (as a business 
     * or a political party). (Definition from Merriam-Webster) 
     */
    class  Organization : public Locatable
    {
    public:
        /**
         * Create a new empty and invalid Organization instance
         */
        Organization();

        /**
         * Default copy constructor
         */
        Organization( const Organization& );
        Organization( const Resource& );

        /**
         * Create a new Organization instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Organization( const QString& uriOrIdentifier );

        /**
         * Create a new Organization instance representing the resource
         * referenced by \a uri.
         */
        Organization( const QUrl& uri );
        ~Organization();

        Organization& operator=( const Organization& );

        /**
         * Get property 'OrganizationMember'. The subject organization 
         * has the object person or organization (Agent) as a member. 
         */
        QList<Agent> organizationMembers() const;

        /**
         * Set property 'OrganizationMember'. The subject organization 
         * has the object person or organization (Agent) as a member. 
         */
        void setOrganizationMembers( const QList<Agent>& value );

        /**
         * Add a value to property 'OrganizationMember'. The subject 
         * organization has the object person or organization (Agent) 
         * as a member. 
         */
        void addOrganizationMember( const Agent& value );

        /**
         * \return The URI of the property 'OrganizationMember'. 
         */
        static QUrl organizationMemberUri();

        /**
         * Get all resources that have this resource set as property 'organization'. 
         * relation to the organization in an OrganizationMember association. 
         * \sa ResourceManager::allResourcesWithProperty 
         */
        QList<OrganizationMember> organizationOf() const;

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Agent toAgent() const;

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Locatable toLocatable() const;

        /**
         * Retrieve a list of all available Organization resources. This 
         * list consists of all resource of type Organization that are 
         * stored in the local Nepomuk meta data storage and any changes 
         * made locally. Be aware that in some cases this list can get very 
         * big. Then it might be better to use libKNep directly. 
         */
        static QList<Organization> allOrganizations();


        /**
         * \return The URI of the resource type that is used in Organization instances.
         */
        static QString resourceTypeUri();

    protected:
       Organization( const QString& uri, const QUrl& type );
       Organization( const QUrl& uri, const QUrl& type );
    };
}

#endif
