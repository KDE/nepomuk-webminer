/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "agent.h"

#include "organization.h"
#include "personalinformationmodel.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Agent::Agent()
  : Thing( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Agent") )
{
}



Nepomuk2::Agent::Agent( const Agent& res )
  : Thing( res )
{
}


Nepomuk2::Agent::Agent( const Nepomuk2::Resource& res )
  : Thing( res )
{
}


Nepomuk2::Agent::Agent( const QString& uri )
  : Thing( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Agent") )
{
}

Nepomuk2::Agent::Agent( const QUrl& uri )
  : Thing( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Agent") )
{
}

Nepomuk2::Agent::Agent( const QString& uri, const QUrl& type )
  : Thing( uri, type )
{
}


Nepomuk2::Agent::Agent( const QUrl& uri, const QUrl& type )
  : Thing( uri, type )
{
}

Nepomuk2::Agent::~Agent()
{
}

Nepomuk2::Agent& Nepomuk2::Agent::operator=( const Agent& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Agent::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Agent");
}

QList<Nepomuk2::Organization> Nepomuk2::Agent::isOrganizationMemberOfs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Organization> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isOrganizationMemberOf") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Organization( *it ) );
    return rl;
}

void Nepomuk2::Agent::setIsOrganizationMemberOfs( const QList<Nepomuk2::Organization>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Organization>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isOrganizationMemberOf"), Variant( l ) );
}

void Nepomuk2::Agent::addIsOrganizationMemberOf( const Nepomuk2::Organization& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isOrganizationMemberOf") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isOrganizationMemberOf"), v );
}

QUrl Nepomuk2::Agent::isOrganizationMemberOfUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isOrganizationMemberOf");
}

QList<Nepomuk2::PersonalInformationModel> Nepomuk2::Agent::createdPimos() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<PersonalInformationModel> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#createdPimo") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( PersonalInformationModel( *it ) );
    return rl;
}

void Nepomuk2::Agent::setCreatedPimos( const QList<Nepomuk2::PersonalInformationModel>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<PersonalInformationModel>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#createdPimo"), Variant( l ) );
}

void Nepomuk2::Agent::addCreatedPimo( const Nepomuk2::PersonalInformationModel& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#createdPimo") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#createdPimo"), v );
}

QUrl Nepomuk2::Agent::createdPimoUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#createdPimo");
}


