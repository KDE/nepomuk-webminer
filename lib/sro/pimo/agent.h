/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _AGENT_H_
#define _AGENT_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Organization;
    class PersonalInformationModel;

}

#include "thing.h"


namespace Nepomuk2 {

    /**
     * An agent (eg. person, group, software or physical artifact). 
     * The Agent class is the class of agents; things that do stuff. 
     * A well known sub-class is Person, representing people. Other 
     * kinds of agents include Organization and Group. (inspired 
     * by FOAF). Agent is not a subclass of NAO:Party. 
     */
    class  Agent : public Thing
    {
    public:
        /**
         * Create a new empty and invalid Agent instance
         */
        Agent();

        /**
         * Default copy constructor
         */
        Agent( const Agent& );
        Agent( const Resource& );

        /**
         * Create a new Agent instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Agent( const QString& uriOrIdentifier );

        /**
         * Create a new Agent instance representing the resource
         * referenced by \a uri.
         */
        Agent( const QUrl& uri );
        ~Agent();

        Agent& operator=( const Agent& );

        /**
         * Get property 'isOrganizationMemberOf'. The subject person 
         * or organozation (Agent) is member of the object organization. 
         */
        QList<Organization> isOrganizationMemberOfs() const;

        /**
         * Set property 'isOrganizationMemberOf'. The subject person 
         * or organozation (Agent) is member of the object organization. 
         */
        void setIsOrganizationMemberOfs( const QList<Organization>& value );

        /**
         * Add a value to property 'isOrganizationMemberOf'. The subject 
         * person or organozation (Agent) is member of the object organization. 
         */
        void addIsOrganizationMemberOf( const Organization& value );

        /**
         * \return The URI of the property 'isOrganizationMemberOf'. 
         */
        static QUrl isOrganizationMemberOfUri();

        /**
         * Get property 'createdPimo'. The creator of the Personal Information 
         * Model. The human being whose mental models are represented 
         * in the PIMO. 
         */
        QList<PersonalInformationModel> createdPimos() const;

        /**
         * Set property 'createdPimo'. The creator of the Personal Information 
         * Model. The human being whose mental models are represented 
         * in the PIMO. 
         */
        void setCreatedPimos( const QList<PersonalInformationModel>& value );

        /**
         * Add a value to property 'createdPimo'. The creator of the Personal 
         * Information Model. The human being whose mental models are 
         * represented in the PIMO. 
         */
        void addCreatedPimo( const PersonalInformationModel& value );

        /**
         * \return The URI of the property 'createdPimo'. 
         */
        static QUrl createdPimoUri();

        /**
         * Retrieve a list of all available Agent resources. This list 
         * consists of all resource of type Agent that are stored in the 
         * local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Agent> allAgents();


        /**
         * \return The URI of the resource type that is used in Agent instances.
         */
        static QString resourceTypeUri();

    protected:
       Agent( const QString& uri, const QUrl& type );
       Agent( const QUrl& uri, const QUrl& type );
    };
}

#endif
