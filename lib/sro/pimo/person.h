/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _PERSON_H_
#define _PERSON_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Agent;
    class SocialEvent;
    class Locatable;
    class PersonRole;

}

#include "agent.h"


namespace Nepomuk2 {

    /**
     * Represents a person. Either living, dead, real or imaginary. 
     * (Definition from foaf:Person) 
     */
    class  Person : public Agent
    {
    public:
        /**
         * Create a new empty and invalid Person instance
         */
        Person();

        /**
         * Default copy constructor
         */
        Person( const Person& );
        Person( const Resource& );

        /**
         * Create a new Person instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Person( const QString& uriOrIdentifier );

        /**
         * Create a new Person instance representing the resource
         * referenced by \a uri.
         */
        Person( const QUrl& uri );
        ~Person();

        Person& operator=( const Person& );

        /**
         * Get property 'jabberId'. Jabber-ID of the user. Used to communicate 
         * amongst peers in the social scenario of the semantic desktop. 
         * Use the xmpp node identifier as specified by RFC3920, see http://www.xmpp.org/specs/rfc3920.html#addressing-node. 
         * The format is the same as e-mail addresses: username@hostname. 
         */
        QStringList jabberIds() const;

        /**
         * Set property 'jabberId'. Jabber-ID of the user. Used to communicate 
         * amongst peers in the social scenario of the semantic desktop. 
         * Use the xmpp node identifier as specified by RFC3920, see http://www.xmpp.org/specs/rfc3920.html#addressing-node. 
         * The format is the same as e-mail addresses: username@hostname. 
         */
        void setJabberIds( const QStringList& value );

        /**
         * Add a value to property 'jabberId'. Jabber-ID of the user. Used 
         * to communicate amongst peers in the social scenario of the semantic 
         * desktop. Use the xmpp node identifier as specified by RFC3920, 
         * see http://www.xmpp.org/specs/rfc3920.html#addressing-node. 
         * The format is the same as e-mail addresses: username@hostname. 
         */
        void addJabberId( const QString& value );

        /**
         * Get property 'jabberId'. Jabber-ID of the user. Used to communicate 
         * amongst peers in the social scenario of the semantic desktop. 
         * Use the xmpp node identifier as specified by RFC3920, see http://www.xmpp.org/specs/rfc3920.html#addressing-node. 
         * The format is the same as e-mail addresses: username@hostname. 
         */
        QString jabberId() const;

        /**
         * Set property 'jabberId'. Jabber-ID of the user. Used to communicate 
         * amongst peers in the social scenario of the semantic desktop. 
         * Use the xmpp node identifier as specified by RFC3920, see http://www.xmpp.org/specs/rfc3920.html#addressing-node. 
         * The format is the same as e-mail addresses: username@hostname. 
         */
        void setJabberId( const QString& value );

        /**
         * \return The URI of the property 'jabberId'. 
         */
        static QUrl jabberIdUri();

        /**
         * Get property 'attends'. A person attends a social event. 
         */
        QList<SocialEvent> attendses() const;

        /**
         * Set property 'attends'. A person attends a social event. 
         */
        void setAttendses( const QList<SocialEvent>& value );

        /**
         * Add a value to property 'attends'. A person attends a social 
         * event. 
         */
        void addAttends( const SocialEvent& value );

        /**
         * \return The URI of the property 'attends'. 
         */
        static QUrl attendsUri();

        /**
         * Get all resources that have this resource set as property 'roleHolder'. 
         * the person taking the role \sa ResourceManager::allResourcesWithProperty 
         */
        QList<PersonRole> roleHolderOf() const;

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Agent toAgent() const;

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Locatable toLocatable() const;

        /**
         * Retrieve a list of all available Person resources. This list 
         * consists of all resource of type Person that are stored in the 
         * local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Person> allPersons();


        /**
         * \return The URI of the resource type that is used in Person instances.
         */
        static QString resourceTypeUri();

    protected:
       Person( const QString& uri, const QUrl& type );
       Person( const QUrl& uri, const QUrl& type );
    };
}

#endif
