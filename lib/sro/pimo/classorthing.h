/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _CLASSORTHING_H_
#define _CLASSORTHING_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Resource;

}

#include "classorthingorpropertyorassociation.h"


namespace Nepomuk2 {

    /**
     * Superclass of class and thing. To add properties to both class 
     * and thing. 
     */
    class  ClassOrThing : public ClassOrThingOrPropertyOrAssociation
    {
    public:
        /**
         * Create a new empty and invalid ClassOrThing instance
         */
        ClassOrThing();

        /**
         * Default copy constructor
         */
        ClassOrThing( const ClassOrThing& );
        ClassOrThing( const Resource& );

        /**
         * Create a new ClassOrThing instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        ClassOrThing( const QString& uriOrIdentifier );

        /**
         * Create a new ClassOrThing instance representing the resource
         * referenced by \a uri.
         */
        ClassOrThing( const QUrl& uri );
        ~ClassOrThing();

        ClassOrThing& operator=( const ClassOrThing& );

        /**
         * Get property 'wikiText'. A wiki-like free-text description 
         * of a Thing or a Class. The text can be formatted using a limited 
         * set of HTML elements and can contain links to other Things. The 
         * format is described in detail in the WIF specification (http://semanticweb.org/wiki/Wiki_Interchange_Format). 
         */
        QStringList wikiTexts() const;

        /**
         * Set property 'wikiText'. A wiki-like free-text description 
         * of a Thing or a Class. The text can be formatted using a limited 
         * set of HTML elements and can contain links to other Things. The 
         * format is described in detail in the WIF specification (http://semanticweb.org/wiki/Wiki_Interchange_Format). 
         */
        void setWikiTexts( const QStringList& value );

        /**
         * Add a value to property 'wikiText'. A wiki-like free-text description 
         * of a Thing or a Class. The text can be formatted using a limited 
         * set of HTML elements and can contain links to other Things. The 
         * format is described in detail in the WIF specification (http://semanticweb.org/wiki/Wiki_Interchange_Format). 
         */
        void addWikiText( const QString& value );

        /**
         * Get property 'wikiText'. A wiki-like free-text description 
         * of a Thing or a Class. The text can be formatted using a limited 
         * set of HTML elements and can contain links to other Things. The 
         * format is described in detail in the WIF specification (http://semanticweb.org/wiki/Wiki_Interchange_Format). 
         */
        QString wikiText() const;

        /**
         * Set property 'wikiText'. A wiki-like free-text description 
         * of a Thing or a Class. The text can be formatted using a limited 
         * set of HTML elements and can contain links to other Things. The 
         * format is described in detail in the WIF specification (http://semanticweb.org/wiki/Wiki_Interchange_Format). 
         */
        void setWikiText( const QString& value );

        /**
         * \return The URI of the property 'wikiText'. 
         */
        static QUrl wikiTextUri();

        /**
         * Get property 'Folder'. Folders can be used to store information 
         * elements related to a Thing or Class. This property can be used 
         * to connect a Class or Thing to existing Folders. Implementations 
         * can suggest annotations for documents stored inside these 
         * folders or suggest the folder for new documents related to the 
         * Thing or Class. 
         */
        QList<Resource> folders() const;

        /**
         * Set property 'Folder'. Folders can be used to store information 
         * elements related to a Thing or Class. This property can be used 
         * to connect a Class or Thing to existing Folders. Implementations 
         * can suggest annotations for documents stored inside these 
         * folders or suggest the folder for new documents related to the 
         * Thing or Class. 
         */
        void setFolders( const QList<Resource>& value );

        /**
         * Add a value to property 'Folder'. Folders can be used to store 
         * information elements related to a Thing or Class. This property 
         * can be used to connect a Class or Thing to existing Folders. Implementations 
         * can suggest annotations for documents stored inside these 
         * folders or suggest the folder for new documents related to the 
         * Thing or Class. 
         */
        void addFolder( const Resource& value );

        /**
         * \return The URI of the property 'Folder'. 
         */
        static QUrl folderUri();

        /**
         * Retrieve a list of all available ClassOrThing resources. This 
         * list consists of all resource of type ClassOrThing that are 
         * stored in the local Nepomuk meta data storage and any changes 
         * made locally. Be aware that in some cases this list can get very 
         * big. Then it might be better to use libKNep directly. 
         */
        static QList<ClassOrThing> allClassOrThings();


        /**
         * \return The URI of the resource type that is used in ClassOrThing instances.
         */
        static QString resourceTypeUri();

    protected:
       ClassOrThing( const QString& uri, const QUrl& type );
       ClassOrThing( const QUrl& uri, const QUrl& type );
    };
}

#endif
