/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _LOCATION_H_
#define _LOCATION_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Thing;
    class Location;

}

#include "thing.h"


namespace Nepomuk2 {

    /**
     * A physical location. Subclasses are modeled for the most common 
     * locations humans work in: Building, City, Country, Room, State. 
     * This selection is intended to be applicable cross-cultural 
     * and cross-domain. City is a prototype that can be further refined 
     * for villages, etc. Subclass of a WGS84:SpatialThing, can have 
     * geo-coordinates. 
     */
    class  Location : public Thing
    {
    public:
        /**
         * Create a new empty and invalid Location instance
         */
        Location();

        /**
         * Default copy constructor
         */
        Location( const Location& );
        Location( const Resource& );

        /**
         * Create a new Location instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Location( const QString& uriOrIdentifier );

        /**
         * Create a new Location instance representing the resource
         * referenced by \a uri.
         */
        Location( const QUrl& uri );
        ~Location();

        Location& operator=( const Location& );

        /**
         * Get property 'isLocationOf'. The subject location is the current 
         * location of the object. 
         */
        QList<Thing> isLocationOfs() const;

        /**
         * Set property 'isLocationOf'. The subject location is the current 
         * location of the object. 
         */
        void setIsLocationOfs( const QList<Thing>& value );

        /**
         * Add a value to property 'isLocationOf'. The subject location 
         * is the current location of the object. 
         */
        void addIsLocationOf( const Thing& value );

        /**
         * \return The URI of the property 'isLocationOf'. 
         */
        static QUrl isLocationOfUri();

        /**
         * Get property 'locatedWithin'. The subject location is contained 
         * within the object location. For example, a room is located within 
         * a building or a city is located within a country. 
         */
        QList<Location> locatedWithins() const;

        /**
         * Set property 'locatedWithin'. The subject location is contained 
         * within the object location. For example, a room is located within 
         * a building or a city is located within a country. 
         */
        void setLocatedWithins( const QList<Location>& value );

        /**
         * Add a value to property 'locatedWithin'. The subject location 
         * is contained within the object location. For example, a room 
         * is located within a building or a city is located within a country. 
         */
        void addLocatedWithin( const Location& value );

        /**
         * \return The URI of the property 'locatedWithin'. 
         */
        static QUrl locatedWithinUri();

        /**
         * Get property 'containsLocation'. The subject location contains 
         * the object location. For example, a building contains a room 
         * or a country contains a city. 
         */
        QList<Location> containsLocations() const;

        /**
         * Set property 'containsLocation'. The subject location contains 
         * the object location. For example, a building contains a room 
         * or a country contains a city. 
         */
        void setContainsLocations( const QList<Location>& value );

        /**
         * Add a value to property 'containsLocation'. The subject location 
         * contains the object location. For example, a building contains 
         * a room or a country contains a city. 
         */
        void addContainsLocation( const Location& value );

        /**
         * \return The URI of the property 'containsLocation'. 
         */
        static QUrl containsLocationUri();

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Thing toThing() const;

        /**
         * Retrieve a list of all available Location resources. This list 
         * consists of all resource of type Location that are stored in 
         * the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Location> allLocations();


        /**
         * \return The URI of the resource type that is used in Location instances.
         */
        static QString resourceTypeUri();

    protected:
       Location( const QString& uri, const QUrl& type );
       Location( const QUrl& uri, const QUrl& type );
    };
}

#endif
