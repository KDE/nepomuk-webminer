/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _PROCESSCONCEPT_H_
#define _PROCESSCONCEPT_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {

}

#include "thing.h"


namespace Nepomuk2 {

    /**
     * Concepts that relate to a series of actions or operations conducing 
     * to an end. Abstract class. Defines optional start and endtime 
     * properties, names taken from NCAL. 
     */
    class  ProcessConcept : public Thing
    {
    public:
        /**
         * Create a new empty and invalid ProcessConcept instance
         */
        ProcessConcept();

        /**
         * Default copy constructor
         */
        ProcessConcept( const ProcessConcept& );
        ProcessConcept( const Resource& );

        /**
         * Create a new ProcessConcept instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        ProcessConcept( const QString& uriOrIdentifier );

        /**
         * Create a new ProcessConcept instance representing the resource
         * referenced by \a uri.
         */
        ProcessConcept( const QUrl& uri );
        ~ProcessConcept();

        ProcessConcept& operator=( const ProcessConcept& );

        /**
         * Get property 'dtstart'. This property specifies when the process 
         * begins. Inspired by NCAL:dtstart. 
         */
        QList<QDateTime> dtstarts() const;

        /**
         * Set property 'dtstart'. This property specifies when the process 
         * begins. Inspired by NCAL:dtstart. 
         */
        void setDtstarts( const QList<QDateTime>& value );

        /**
         * Add a value to property 'dtstart'. This property specifies 
         * when the process begins. Inspired by NCAL:dtstart. 
         */
        void addDtstart( const QDateTime& value );

        /**
         * Get property 'dtstart'. This property specifies when the process 
         * begins. Inspired by NCAL:dtstart. 
         */
        QDateTime dtstart() const;

        /**
         * Set property 'dtstart'. This property specifies when the process 
         * begins. Inspired by NCAL:dtstart. 
         */
        void setDtstart( const QDateTime& value );

        /**
         * \return The URI of the property 'dtstart'. 
         */
        static QUrl dtstartUri();

        /**
         * Get property 'dtend'. This property specifies the date and 
         * time when a process ends. Inspired by NCAL:dtend. 
         */
        QList<QDateTime> dtends() const;

        /**
         * Set property 'dtend'. This property specifies the date and 
         * time when a process ends. Inspired by NCAL:dtend. 
         */
        void setDtends( const QList<QDateTime>& value );

        /**
         * Add a value to property 'dtend'. This property specifies the 
         * date and time when a process ends. Inspired by NCAL:dtend. 
         */
        void addDtend( const QDateTime& value );

        /**
         * Get property 'dtend'. This property specifies the date and 
         * time when a process ends. Inspired by NCAL:dtend. 
         */
        QDateTime dtend() const;

        /**
         * Set property 'dtend'. This property specifies the date and 
         * time when a process ends. Inspired by NCAL:dtend. 
         */
        void setDtend( const QDateTime& value );

        /**
         * \return The URI of the property 'dtend'. 
         */
        static QUrl dtendUri();

        /**
         * Retrieve a list of all available ProcessConcept resources. 
         * This list consists of all resource of type ProcessConcept that 
         * are stored in the local Nepomuk meta data storage and any changes 
         * made locally. Be aware that in some cases this list can get very 
         * big. Then it might be better to use libKNep directly. 
         */
        static QList<ProcessConcept> allProcessConcepts();


        /**
         * \return The URI of the resource type that is used in ProcessConcept instances.
         */
        static QString resourceTypeUri();

    protected:
       ProcessConcept( const QString& uri, const QUrl& type );
       ProcessConcept( const QUrl& uri, const QUrl& type );
    };
}

#endif
