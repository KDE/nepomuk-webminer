/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _ORGANIZATIONMEMBER_H_
#define _ORGANIZATIONMEMBER_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Organization;

}

#include "personrole.h"


namespace Nepomuk2 {

    /**
     * The role of one or multiple persons being a member in one or multiple 
     * organizations. Use pimo:organization and pimo:roleHolder 
     * to link to the organizations and persons. 
     */
    class  OrganizationMember : public PersonRole
    {
    public:
        /**
         * Create a new empty and invalid OrganizationMember instance
         */
        OrganizationMember();

        /**
         * Default copy constructor
         */
        OrganizationMember( const OrganizationMember& );
        OrganizationMember( const Resource& );

        /**
         * Create a new OrganizationMember instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        OrganizationMember( const QString& uriOrIdentifier );

        /**
         * Create a new OrganizationMember instance representing the resource
         * referenced by \a uri.
         */
        OrganizationMember( const QUrl& uri );
        ~OrganizationMember();

        OrganizationMember& operator=( const OrganizationMember& );

        /**
         * Get property 'organization'. relation to the organization 
         * in an OrganizationMember association. 
         */
        QList<Organization> organizations() const;

        /**
         * Set property 'organization'. relation to the organization 
         * in an OrganizationMember association. 
         */
        void setOrganizations( const QList<Organization>& value );

        /**
         * Add a value to property 'organization'. relation to the organization 
         * in an OrganizationMember association. 
         */
        void addOrganization( const Organization& value );

        /**
         * \return The URI of the property 'organization'. 
         */
        static QUrl organizationUri();

        /**
         * Retrieve a list of all available OrganizationMember resources. 
         * This list consists of all resource of type OrganizationMember 
         * that are stored in the local Nepomuk meta data storage and any 
         * changes made locally. Be aware that in some cases this list can 
         * get very big. Then it might be better to use libKNep directly. 
         */
        static QList<OrganizationMember> allOrganizationMembers();


        /**
         * \return The URI of the resource type that is used in OrganizationMember instances.
         */
        static QString resourceTypeUri();

    protected:
       OrganizationMember( const QString& uri, const QUrl& type );
       OrganizationMember( const QUrl& uri, const QUrl& type );
    };
}

#endif
