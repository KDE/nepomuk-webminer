/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _TASK_H_
#define _TASK_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {

}

#include "processconcept.h"


namespace Nepomuk2 {

    /**
     * A (usually assigned) piece of work (often to be finished within 
     * a certain time). (Definition from Merriam-Webster) 
     */
    class  Task : public ProcessConcept
    {
    public:
        /**
         * Create a new empty and invalid Task instance
         */
        Task();

        /**
         * Default copy constructor
         */
        Task( const Task& );
        Task( const Resource& );

        /**
         * Create a new Task instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Task( const QString& uriOrIdentifier );

        /**
         * Create a new Task instance representing the resource
         * referenced by \a uri.
         */
        Task( const QUrl& uri );
        ~Task();

        Task& operator=( const Task& );

        /**
         * Get property 'taskDueTime'. when is this task due? Represented 
         * in ISO 8601, example: 2003-11-22T17:00:00 
         */
        QList<QDateTime> taskDueTimes() const;

        /**
         * Set property 'taskDueTime'. when is this task due? Represented 
         * in ISO 8601, example: 2003-11-22T17:00:00 
         */
        void setTaskDueTimes( const QList<QDateTime>& value );

        /**
         * Add a value to property 'taskDueTime'. when is this task due? 
         * Represented in ISO 8601, example: 2003-11-22T17:00:00 
         */
        void addTaskDueTime( const QDateTime& value );

        /**
         * Get property 'taskDueTime'. when is this task due? Represented 
         * in ISO 8601, example: 2003-11-22T17:00:00 
         */
        QDateTime taskDueTime() const;

        /**
         * Set property 'taskDueTime'. when is this task due? Represented 
         * in ISO 8601, example: 2003-11-22T17:00:00 
         */
        void setTaskDueTime( const QDateTime& value );

        /**
         * \return The URI of the property 'taskDueTime'. 
         */
        static QUrl taskDueTimeUri();

        /**
         * Retrieve a list of all available Task resources. This list consists 
         * of all resource of type Task that are stored in the local Nepomuk 
         * meta data storage and any changes made locally. Be aware that 
         * in some cases this list can get very big. Then it might be better 
         * to use libKNep directly. 
         */
        static QList<Task> allTasks();


        /**
         * \return The URI of the resource type that is used in Task instances.
         */
        static QString resourceTypeUri();

    protected:
       Task( const QString& uri, const QUrl& type );
       Task( const QUrl& uri, const QUrl& type );
    };
}

#endif
