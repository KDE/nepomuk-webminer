/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _CLASSROLE_H_
#define _CLASSROLE_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Resource;

}

#include <Nepomuk2/Resource>


namespace Nepomuk2 {

    /**
     * Roles of classes in PIMO: concrete instances are Abstract and 
     * Concrete. 
     */
    class  ClassRole : public Resource
    {
    public:
        /**
         * Create a new empty and invalid ClassRole instance
         */
        ClassRole();

        /**
         * Default copy constructor
         */
        ClassRole( const ClassRole& );
        ClassRole( const Resource& );

        /**
         * Create a new ClassRole instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        ClassRole( const QString& uriOrIdentifier );

        /**
         * Create a new ClassRole instance representing the resource
         * referenced by \a uri.
         */
        ClassRole( const QUrl& uri );
        ~ClassRole();

        ClassRole& operator=( const ClassRole& );

        /**
         * Get all resources that have this resource set as property 'classRole'. 
         * Annotating abstract and concrete classes. Implementations 
         * may offer the feature to hide abstract classes. By default, 
         * classes are concrete. Classes can be declared abstract by setting 
         * their classRole to abstract. Instances should not have an abstract 
         * class as type (if not inferred). \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Resource> classRoleOf() const;

        /**
         * Retrieve a list of all available ClassRole resources. This 
         * list consists of all resource of type ClassRole that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<ClassRole> allClassRoles();


        /**
         * \return The URI of the resource type that is used in ClassRole instances.
         */
        static QString resourceTypeUri();

    protected:
       ClassRole( const QString& uri, const QUrl& type );
       ClassRole( const QUrl& uri, const QUrl& type );
    };
}

#endif
