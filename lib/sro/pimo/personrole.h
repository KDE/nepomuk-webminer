/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _PERSONROLE_H_
#define _PERSONROLE_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Person;
    class Thing;

}

#include "association.h"


namespace Nepomuk2 {

    /**
     * A person takes a certain role in a given context. The role can 
     * be that of "a mentor or another person" or "giving a talk at a meeting", 
     * etc. 
     */
    class  PersonRole : public Association
    {
    public:
        /**
         * Create a new empty and invalid PersonRole instance
         */
        PersonRole();

        /**
         * Default copy constructor
         */
        PersonRole( const PersonRole& );
        PersonRole( const Resource& );

        /**
         * Create a new PersonRole instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        PersonRole( const QString& uriOrIdentifier );

        /**
         * Create a new PersonRole instance representing the resource
         * referenced by \a uri.
         */
        PersonRole( const QUrl& uri );
        ~PersonRole();

        PersonRole& operator=( const PersonRole& );

        /**
         * Get property 'roleHolder'. the person taking the role 
         */
        QList<Person> roleHolders() const;

        /**
         * Set property 'roleHolder'. the person taking the role 
         */
        void setRoleHolders( const QList<Person>& value );

        /**
         * Add a value to property 'roleHolder'. the person taking the 
         * role 
         */
        void addRoleHolder( const Person& value );

        /**
         * \return The URI of the property 'roleHolder'. 
         */
        static QUrl roleHolderUri();

        /**
         * Get property 'roleContext'. The context where the role-holder 
         * impersonates this role. For example, the company where a person 
         * is employed. 
         */
        QList<Thing> roleContexts() const;

        /**
         * Set property 'roleContext'. The context where the role-holder 
         * impersonates this role. For example, the company where a person 
         * is employed. 
         */
        void setRoleContexts( const QList<Thing>& value );

        /**
         * Add a value to property 'roleContext'. The context where the 
         * role-holder impersonates this role. For example, the company 
         * where a person is employed. 
         */
        void addRoleContext( const Thing& value );

        /**
         * \return The URI of the property 'roleContext'. 
         */
        static QUrl roleContextUri();

        /**
         * Retrieve a list of all available PersonRole resources. This 
         * list consists of all resource of type PersonRole that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<PersonRole> allPersonRoles();


        /**
         * \return The URI of the resource type that is used in PersonRole instances.
         */
        static QString resourceTypeUri();

    protected:
       PersonRole( const QString& uri, const QUrl& type );
       PersonRole( const QUrl& uri, const QUrl& type );
    };
}

#endif
