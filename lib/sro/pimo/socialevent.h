/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _SOCIALEVENT_H_
#define _SOCIALEVENT_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Person;
    class Attendee;
    class Event;
    class Locatable;

}

#include "locatable.h"


namespace Nepomuk2 {

    /**
     * A social occasion or activity. (Definition from Merriam-Webster) 
     */
    class  SocialEvent : public Locatable
    {
    public:
        /**
         * Create a new empty and invalid SocialEvent instance
         */
        SocialEvent();

        /**
         * Default copy constructor
         */
        SocialEvent( const SocialEvent& );
        SocialEvent( const Resource& );

        /**
         * Create a new SocialEvent instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        SocialEvent( const QString& uriOrIdentifier );

        /**
         * Create a new SocialEvent instance representing the resource
         * referenced by \a uri.
         */
        SocialEvent( const QUrl& uri );
        ~SocialEvent();

        SocialEvent& operator=( const SocialEvent& );

        /**
         * Get property 'attendee'. A social event is attended by a person. 
         */
        QList<Person> attendees() const;

        /**
         * Set property 'attendee'. A social event is attended by a person. 
         */
        void setAttendees( const QList<Person>& value );

        /**
         * Add a value to property 'attendee'. A social event is attended 
         * by a person. 
         */
        void addAttendee( const Person& value );

        /**
         * \return The URI of the property 'attendee'. 
         */
        static QUrl attendeeUri();

        /**
         * Get all resources that have this resource set as property 'attendingMeeting'. 
         * the attended meeting \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Attendee> attendingMeetingOf() const;

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Event toEvent() const;

        /**
         * Nepomuk does not support multiple inheritance. Thus, to access 
         * properties from all parent classes helper methods like this 
         * are introduced. The object returned represents the exact same 
         * resource. 
         */
        Locatable toLocatable() const;

        /**
         * Retrieve a list of all available SocialEvent resources. This 
         * list consists of all resource of type SocialEvent that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<SocialEvent> allSocialEvents();


        /**
         * \return The URI of the resource type that is used in SocialEvent instances.
         */
        static QString resourceTypeUri();

    protected:
       SocialEvent( const QString& uri, const QUrl& type );
       SocialEvent( const QUrl& uri, const QUrl& type );
    };
}

#endif
