/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _LOCATABLE_H_
#define _LOCATABLE_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Location;

}

#include "thing.h"


namespace Nepomuk2 {

    /**
     * Things that can be at a location. Abstract class, use it as a superclass 
     * of things that can be placed in physical space. 
     */
    class  Locatable : public Thing
    {
    public:
        /**
         * Create a new empty and invalid Locatable instance
         */
        Locatable();

        /**
         * Default copy constructor
         */
        Locatable( const Locatable& );
        Locatable( const Resource& );

        /**
         * Create a new Locatable instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Locatable( const QString& uriOrIdentifier );

        /**
         * Create a new Locatable instance representing the resource
         * referenced by \a uri.
         */
        Locatable( const QUrl& uri );
        ~Locatable();

        Locatable& operator=( const Locatable& );

        /**
         * Get property 'Location'. The subject thing is currently located 
         * at the object location. 
         */
        QList<Location> locations() const;

        /**
         * Set property 'Location'. The subject thing is currently located 
         * at the object location. 
         */
        void setLocations( const QList<Location>& value );

        /**
         * Add a value to property 'Location'. The subject thing is currently 
         * located at the object location. 
         */
        void addLocation( const Location& value );

        /**
         * Get property 'Location'. The subject thing is currently located 
         * at the object location. 
         */
        Location location() const;

        /**
         * Set property 'Location'. The subject thing is currently located 
         * at the object location. 
         */
        void setLocation( const Location& value );

        /**
         * \return The URI of the property 'Location'. 
         */
        static QUrl locationUri();

        /**
         * Retrieve a list of all available Locatable resources. This 
         * list consists of all resource of type Locatable that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Locatable> allLocatables();


        /**
         * \return The URI of the resource type that is used in Locatable instances.
         */
        static QString resourceTypeUri();

    protected:
       Locatable( const QString& uri, const QUrl& type );
       Locatable( const QUrl& uri, const QUrl& type );
    };
}

#endif
