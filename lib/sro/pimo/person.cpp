/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "person.h"

#include "personrole.h"
#include "socialevent.h"
#include "agent.h"
#include "locatable.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Person::Person()
  : Agent( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Person") )
{
}



Nepomuk2::Person::Person( const Person& res )
  : Agent( res )
{
}


Nepomuk2::Person::Person( const Nepomuk2::Resource& res )
  : Agent( res )
{
}


Nepomuk2::Person::Person( const QString& uri )
  : Agent( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Person") )
{
}

Nepomuk2::Person::Person( const QUrl& uri )
  : Agent( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Person") )
{
}

Nepomuk2::Person::Person( const QString& uri, const QUrl& type )
  : Agent( uri, type )
{
}


Nepomuk2::Person::Person( const QUrl& uri, const QUrl& type )
  : Agent( uri, type )
{
}

Nepomuk2::Person::~Person()
{
}

Nepomuk2::Person& Nepomuk2::Person::operator=( const Person& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Person::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Person");
}

QStringList Nepomuk2::Person::jabberIds() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#jabberId") ).toStringList());
}

void Nepomuk2::Person::setJabberIds( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#jabberId"), Variant( value ) );
}

void Nepomuk2::Person::addJabberId( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#jabberId") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#jabberId"), v );
}

QString Nepomuk2::Person::jabberId() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#jabberId") ).toStringList() << QString() ).first();
}

void Nepomuk2::Person::setJabberId( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#jabberId"), Variant( value ) );
}

QUrl Nepomuk2::Person::jabberIdUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#jabberId");
}

QList<Nepomuk2::SocialEvent> Nepomuk2::Person::attendses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<SocialEvent> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#attends") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( SocialEvent( *it ) );
    return rl;
}

void Nepomuk2::Person::setAttendses( const QList<Nepomuk2::SocialEvent>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<SocialEvent>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#attends"), Variant( l ) );
}

void Nepomuk2::Person::addAttends( const Nepomuk2::SocialEvent& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#attends") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#attends"), v );
}

QUrl Nepomuk2::Person::attendsUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#attends");
}

Nepomuk2::Agent Nepomuk2::Person::toAgent() const
{
    return Nepomuk2::Agent( *this );
}

Nepomuk2::Locatable Nepomuk2::Person::toLocatable() const
{
    return Nepomuk2::Locatable( *this );
}


