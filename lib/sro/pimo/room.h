/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _ROOM_H_
#define _ROOM_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {

}

#include "location.h"


namespace Nepomuk2 {

    /**
     * A properPart of a Building which is separated from the exterior 
     * of the Building and/or other Rooms of the Building by walls. 
     * Some Rooms may have a specific purpose, e.g. sleeping, bathing, 
     * cooking, entertainment, etc. (Definition from SUMO). 
     */
    class  Room : public Location
    {
    public:
        /**
         * Create a new empty and invalid Room instance
         */
        Room();

        /**
         * Default copy constructor
         */
        Room( const Room& );
        Room( const Resource& );

        /**
         * Create a new Room instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Room( const QString& uriOrIdentifier );

        /**
         * Create a new Room instance representing the resource
         * referenced by \a uri.
         */
        Room( const QUrl& uri );
        ~Room();

        Room& operator=( const Room& );

        /**
         * Retrieve a list of all available Room resources. This list consists 
         * of all resource of type Room that are stored in the local Nepomuk 
         * meta data storage and any changes made locally. Be aware that 
         * in some cases this list can get very big. Then it might be better 
         * to use libKNep directly. 
         */
        static QList<Room> allRooms();


        /**
         * \return The URI of the resource type that is used in Room instances.
         */
        static QString resourceTypeUri();

    protected:
       Room( const QString& uri, const QUrl& type );
       Room( const QUrl& uri, const QUrl& type );
    };
}

#endif
