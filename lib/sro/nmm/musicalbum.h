/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _MUSICALBUM_H_
#define _MUSICALBUM_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class MusicPiece;

}

#include <Nepomuk2/Resource>


namespace Nepomuk2 {

    /**
     * The music album as provided by the publisher. Not to be confused 
     * with media lists or collections. 
     */
    class  MusicAlbum : public Resource
    {
    public:
        /**
         * Create a new empty and invalid MusicAlbum instance
         */
        MusicAlbum();

        /**
         * Default copy constructor
         */
        MusicAlbum( const MusicAlbum& );
        MusicAlbum( const Resource& );

        /**
         * Create a new MusicAlbum instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        MusicAlbum( const QString& uriOrIdentifier );

        /**
         * Create a new MusicAlbum instance representing the resource
         * referenced by \a uri.
         */
        MusicAlbum( const QUrl& uri );
        ~MusicAlbum();

        MusicAlbum& operator=( const MusicAlbum& );

        /**
         * Get property 'musicCDIdentifier'. Music CD identifier to 
         * for databases like FreeDB.org. This property is intended for 
         * music that comes from a CD, so that the CD can be identified in 
         * external databases. 
         */
        QStringList musicCDIdentifiers() const;

        /**
         * Set property 'musicCDIdentifier'. Music CD identifier to 
         * for databases like FreeDB.org. This property is intended for 
         * music that comes from a CD, so that the CD can be identified in 
         * external databases. 
         */
        void setMusicCDIdentifiers( const QStringList& value );

        /**
         * Add a value to property 'musicCDIdentifier'. Music CD identifier 
         * to for databases like FreeDB.org. This property is intended 
         * for music that comes from a CD, so that the CD can be identified 
         * in external databases. 
         */
        void addMusicCDIdentifier( const QString& value );

        /**
         * \return The URI of the property 'musicCDIdentifier'. 
         */
        static QUrl musicCDIdentifierUri();

        /**
         * Get property 'internationalStandardRecordingCode'. ISRC 
         * ID. Format: 'CC-XXX-YY-NNNNN' 
         */
        QStringList internationalStandardRecordingCodes() const;

        /**
         * Set property 'internationalStandardRecordingCode'. ISRC 
         * ID. Format: 'CC-XXX-YY-NNNNN' 
         */
        void setInternationalStandardRecordingCodes( const QStringList& value );

        /**
         * Add a value to property 'internationalStandardRecordingCode'. 
         * ISRC ID. Format: 'CC-XXX-YY-NNNNN' 
         */
        void addInternationalStandardRecordingCode( const QString& value );

        /**
         * Get property 'internationalStandardRecordingCode'. ISRC 
         * ID. Format: 'CC-XXX-YY-NNNNN' 
         */
        QString internationalStandardRecordingCode() const;

        /**
         * Set property 'internationalStandardRecordingCode'. ISRC 
         * ID. Format: 'CC-XXX-YY-NNNNN' 
         */
        void setInternationalStandardRecordingCode( const QString& value );

        /**
         * \return The URI of the property 'internationalStandardRecordingCode'. 
         */
        static QUrl internationalStandardRecordingCodeUri();

        /**
         * Get property 'musicBrainzAlbumID'. MusicBrainz album ID 
         */
        QStringList musicBrainzAlbumIDs() const;

        /**
         * Set property 'musicBrainzAlbumID'. MusicBrainz album ID 
         */
        void setMusicBrainzAlbumIDs( const QStringList& value );

        /**
         * Add a value to property 'musicBrainzAlbumID'. MusicBrainz 
         * album ID 
         */
        void addMusicBrainzAlbumID( const QString& value );

        /**
         * Get property 'musicBrainzAlbumID'. MusicBrainz album ID 
         */
        QString musicBrainzAlbumID() const;

        /**
         * Set property 'musicBrainzAlbumID'. MusicBrainz album ID 
         */
        void setMusicBrainzAlbumID( const QString& value );

        /**
         * \return The URI of the property 'musicBrainzAlbumID'. 
         */
        static QUrl musicBrainzAlbumIDUri();

        /**
         * Get property 'albumGain'. ReplayGain album(audiophile) 
         * gain 
         */
        QList<double> albumGains() const;

        /**
         * Set property 'albumGain'. ReplayGain album(audiophile) 
         * gain 
         */
        void setAlbumGains( const QList<double>& value );

        /**
         * Add a value to property 'albumGain'. ReplayGain album(audiophile) 
         * gain 
         */
        void addAlbumGain( const double& value );

        /**
         * Get property 'albumGain'. ReplayGain album(audiophile) 
         * gain 
         */
        double albumGain() const;

        /**
         * Set property 'albumGain'. ReplayGain album(audiophile) 
         * gain 
         */
        void setAlbumGain( const double& value );

        /**
         * \return The URI of the property 'albumGain'. 
         */
        static QUrl albumGainUri();

        /**
         * Get property 'albumPeakGain'. ReplayGain album(audiophile) 
         * peak gain 
         */
        QList<double> albumPeakGains() const;

        /**
         * Set property 'albumPeakGain'. ReplayGain album(audiophile) 
         * peak gain 
         */
        void setAlbumPeakGains( const QList<double>& value );

        /**
         * Add a value to property 'albumPeakGain'. ReplayGain album(audiophile) 
         * peak gain 
         */
        void addAlbumPeakGain( const double& value );

        /**
         * Get property 'albumPeakGain'. ReplayGain album(audiophile) 
         * peak gain 
         */
        double albumPeakGain() const;

        /**
         * Set property 'albumPeakGain'. ReplayGain album(audiophile) 
         * peak gain 
         */
        void setAlbumPeakGain( const double& value );

        /**
         * \return The URI of the property 'albumPeakGain'. 
         */
        static QUrl albumPeakGainUri();

        /**
         * Get property 'albumTrackCount'. The number of tracks in a music 
         * album. 
         */
        QList<qint64> albumTrackCounts() const;

        /**
         * Set property 'albumTrackCount'. The number of tracks in a music 
         * album. 
         */
        void setAlbumTrackCounts( const QList<qint64>& value );

        /**
         * Add a value to property 'albumTrackCount'. The number of tracks 
         * in a music album. 
         */
        void addAlbumTrackCount( const qint64& value );

        /**
         * Get property 'albumTrackCount'. The number of tracks in a music 
         * album. 
         */
        qint64 albumTrackCount() const;

        /**
         * Set property 'albumTrackCount'. The number of tracks in a music 
         * album. 
         */
        void setAlbumTrackCount( const qint64& value );

        /**
         * \return The URI of the property 'albumTrackCount'. 
         */
        static QUrl albumTrackCountUri();

        /**
         * Get property 'setSize'. The number of parts in the set. 
         */
        QList<qint64> setSizes() const;

        /**
         * Set property 'setSize'. The number of parts in the set. 
         */
        void setSetSizes( const QList<qint64>& value );

        /**
         * Add a value to property 'setSize'. The number of parts in the 
         * set. 
         */
        void addSetSize( const qint64& value );

        /**
         * Get property 'setSize'. The number of parts in the set. 
         */
        qint64 setSize() const;

        /**
         * Set property 'setSize'. The number of parts in the set. 
         */
        void setSetSize( const qint64& value );

        /**
         * \return The URI of the property 'setSize'. 
         */
        static QUrl setSizeUri();

        /**
         * Get all resources that have this resource set as property 'musicAlbum'. 
         * Album the music belongs to \sa ResourceManager::allResourcesWithProperty 
         */
        QList<MusicPiece> musicAlbumOf() const;

        /**
         * Retrieve a list of all available MusicAlbum resources. This 
         * list consists of all resource of type MusicAlbum that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<MusicAlbum> allMusicAlbums();


        /**
         * \return The URI of the resource type that is used in MusicAlbum instances.
         */
        static QString resourceTypeUri();

    protected:
       MusicAlbum( const QString& uri, const QUrl& type );
       MusicAlbum( const QUrl& uri, const QUrl& type );
    };
}

#endif
