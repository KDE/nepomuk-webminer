/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _VIDEO_H_
#define _VIDEO_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Resource;

}

#include <Nepomuk2/Resource>


namespace Nepomuk2 {


    class  Video : public Resource
    {
    public:
        /**
         * Create a new empty and invalid Video instance
         */
        Video();

        /**
         * Default copy constructor
         */
        Video( const Video& );
        Video( const Resource& );

        /**
         * Create a new Video instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Video( const QString& uriOrIdentifier );

        /**
         * Create a new Video instance representing the resource
         * referenced by \a uri.
         */
        Video( const QUrl& uri );
        ~Video();

        Video& operator=( const Video& );

        /**
         * Get property 'synopsis'. Long form description of video content 
         * (plot, premise, etc.) 
         */
        QStringList synopsises() const;

        /**
         * Set property 'synopsis'. Long form description of video content 
         * (plot, premise, etc.) 
         */
        void setSynopsises( const QStringList& value );

        /**
         * Add a value to property 'synopsis'. Long form description of 
         * video content (plot, premise, etc.) 
         */
        void addSynopsis( const QString& value );

        /**
         * Get property 'synopsis'. Long form description of video content 
         * (plot, premise, etc.) 
         */
        QString synopsis() const;

        /**
         * Set property 'synopsis'. Long form description of video content 
         * (plot, premise, etc.) 
         */
        void setSynopsis( const QString& value );

        /**
         * \return The URI of the property 'synopsis'. 
         */
        static QUrl synopsisUri();

        /**
         * Get property 'audienceRating'. Rating used to identify appropriate 
         * audience for video (MPAA rating, BBFC, FSK, TV content rating, 
         * etc.) 
         */
        QStringList audienceRatings() const;

        /**
         * Set property 'audienceRating'. Rating used to identify appropriate 
         * audience for video (MPAA rating, BBFC, FSK, TV content rating, 
         * etc.) 
         */
        void setAudienceRatings( const QStringList& value );

        /**
         * Add a value to property 'audienceRating'. Rating used to identify 
         * appropriate audience for video (MPAA rating, BBFC, FSK, TV 
         * content rating, etc.) 
         */
        void addAudienceRating( const QString& value );

        /**
         * \return The URI of the property 'audienceRating'. 
         */
        static QUrl audienceRatingUri();

        /**
         * Get property 'writer'. Writer 
         */
        QList<Resource> writers() const;

        /**
         * Set property 'writer'. Writer 
         */
        void setWriters( const QList<Resource>& value );

        /**
         * Add a value to property 'writer'. Writer 
         */
        void addWriter( const Resource& value );

        /**
         * \return The URI of the property 'writer'. 
         */
        static QUrl writerUri();

        /**
         * Get property 'director'. Director 
         */
        QList<Resource> directors() const;

        /**
         * Set property 'director'. Director 
         */
        void setDirectors( const QList<Resource>& value );

        /**
         * Add a value to property 'director'. Director 
         */
        void addDirector( const Resource& value );

        /**
         * \return The URI of the property 'director'. 
         */
        static QUrl directorUri();

        /**
         * Get property 'producer'. Producer 
         */
        QList<Resource> producers() const;

        /**
         * Set property 'producer'. Producer 
         */
        void setProducers( const QList<Resource>& value );

        /**
         * Add a value to property 'producer'. Producer 
         */
        void addProducer( const Resource& value );

        /**
         * \return The URI of the property 'producer'. 
         */
        static QUrl producerUri();

        /**
         * Get property 'actor'. Actor 
         */
        QList<Resource> actors() const;

        /**
         * Set property 'actor'. Actor 
         */
        void setActors( const QList<Resource>& value );

        /**
         * Add a value to property 'actor'. Actor 
         */
        void addActor( const Resource& value );

        /**
         * \return The URI of the property 'actor'. 
         */
        static QUrl actorUri();

        /**
         * Get property 'cinematographer'. 
         */
        QList<Resource> cinematographers() const;

        /**
         * Set property 'cinematographer'. 
         */
        void setCinematographers( const QList<Resource>& value );

        /**
         * Add a value to property 'cinematographer'. 
         */
        void addCinematographer( const Resource& value );

        /**
         * \return The URI of the property 'cinematographer'. 
         */
        static QUrl cinematographerUri();

        /**
         * Get property 'assistantDirector'. 
         */
        QList<Resource> assistantDirectors() const;

        /**
         * Set property 'assistantDirector'. 
         */
        void setAssistantDirectors( const QList<Resource>& value );

        /**
         * Add a value to property 'assistantDirector'. 
         */
        void addAssistantDirector( const Resource& value );

        /**
         * \return The URI of the property 'assistantDirector'. 
         */
        static QUrl assistantDirectorUri();

        /**
         * Retrieve a list of all available Video resources. This list 
         * consists of all resource of type Video that are stored in the 
         * local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Video> allVideos();


        /**
         * \return The URI of the resource type that is used in Video instances.
         */
        static QString resourceTypeUri();

    protected:
       Video( const QString& uri, const QUrl& type );
       Video( const QUrl& uri, const QUrl& type );
    };
}

#endif
