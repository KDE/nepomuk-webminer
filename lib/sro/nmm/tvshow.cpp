/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "tvshow.h"

#include "tvseason.h"
#include "tvseries.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::TVShow::TVShow()
  : Video( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVShow") )
{
}



Nepomuk2::TVShow::TVShow( const TVShow& res )
  : Video( res )
{
}


Nepomuk2::TVShow::TVShow( const Nepomuk2::Resource& res )
  : Video( res )
{
}


Nepomuk2::TVShow::TVShow( const QString& uri )
  : Video( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVShow") )
{
}

Nepomuk2::TVShow::TVShow( const QUrl& uri )
  : Video( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVShow") )
{
}

Nepomuk2::TVShow::TVShow( const QString& uri, const QUrl& type )
  : Video( uri, type )
{
}


Nepomuk2::TVShow::TVShow( const QUrl& uri, const QUrl& type )
  : Video( uri, type )
{
}

Nepomuk2::TVShow::~TVShow()
{
}

Nepomuk2::TVShow& Nepomuk2::TVShow::operator=( const TVShow& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::TVShow::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVShow");
}

QList<Nepomuk2::TVSeries> Nepomuk2::TVShow::serieses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<TVSeries> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#series") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( TVSeries( *it ) );
    return rl;
}

void Nepomuk2::TVShow::setSerieses( const QList<Nepomuk2::TVSeries>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<TVSeries>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#series"), Variant( l ) );
}

void Nepomuk2::TVShow::addSeries( const Nepomuk2::TVSeries& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#series") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#series"), v );
}

Nepomuk2::TVSeries Nepomuk2::TVShow::series() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return TVSeries( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#series") ).toResource().uri() );
}

void Nepomuk2::TVShow::setSeries( const Nepomuk2::TVSeries& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#series"), Variant( value ) );
}

QUrl Nepomuk2::TVShow::seriesUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#series");
}

QList<qint64> Nepomuk2::TVShow::seasons() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#season") ).toInt64List());
}

void Nepomuk2::TVShow::setSeasons( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#season"), Variant( value ) );
}

void Nepomuk2::TVShow::addSeason( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#season") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#season"), v );
}

qint64 Nepomuk2::TVShow::season() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#season") ).toInt64List() << 0 ).first();
}

void Nepomuk2::TVShow::setSeason( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#season"), Variant( value ) );
}

QUrl Nepomuk2::TVShow::seasonUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#season");
}

QList<qint64> Nepomuk2::TVShow::episodeNumbers() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#episodeNumber") ).toInt64List());
}

void Nepomuk2::TVShow::setEpisodeNumbers( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#episodeNumber"), Variant( value ) );
}

void Nepomuk2::TVShow::addEpisodeNumber( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#episodeNumber") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#episodeNumber"), v );
}

qint64 Nepomuk2::TVShow::episodeNumber() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#episodeNumber") ).toInt64List() << 0 ).first();
}

void Nepomuk2::TVShow::setEpisodeNumber( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#episodeNumber"), Variant( value ) );
}

QUrl Nepomuk2::TVShow::episodeNumberUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#episodeNumber");
}

QList<Nepomuk2::TVSeason> Nepomuk2::TVShow::isPartOfSeasons() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<TVSeason> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#isPartOfSeason") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( TVSeason( *it ) );
    return rl;
}

void Nepomuk2::TVShow::setIsPartOfSeasons( const QList<Nepomuk2::TVSeason>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<TVSeason>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#isPartOfSeason"), Variant( l ) );
}

void Nepomuk2::TVShow::addIsPartOfSeason( const Nepomuk2::TVSeason& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#isPartOfSeason") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#isPartOfSeason"), v );
}

Nepomuk2::TVSeason Nepomuk2::TVShow::isPartOfSeason() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return TVSeason( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#isPartOfSeason") ).toResource().uri() );
}

void Nepomuk2::TVShow::setIsPartOfSeason( const Nepomuk2::TVSeason& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#isPartOfSeason"), Variant( value ) );
}

QUrl Nepomuk2::TVShow::isPartOfSeasonUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#isPartOfSeason");
}


