/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "tvseason.h"

#include "tvshow.h"
#include "tvseries.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::TVSeason::TVSeason()
  : Resource( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVSeason") )
{
}



Nepomuk2::TVSeason::TVSeason( const TVSeason& res )
  : Resource( res )
{
}


Nepomuk2::TVSeason::TVSeason( const Nepomuk2::Resource& res )
  : Resource( res )
{
}


Nepomuk2::TVSeason::TVSeason( const QString& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVSeason") )
{
}

Nepomuk2::TVSeason::TVSeason( const QUrl& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVSeason") )
{
}

Nepomuk2::TVSeason::TVSeason( const QString& uri, const QUrl& type )
  : Resource( uri, type )
{
}


Nepomuk2::TVSeason::TVSeason( const QUrl& uri, const QUrl& type )
  : Resource( uri, type )
{
}

Nepomuk2::TVSeason::~TVSeason()
{
}

Nepomuk2::TVSeason& Nepomuk2::TVSeason::operator=( const TVSeason& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::TVSeason::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVSeason");
}

QList<qint64> Nepomuk2::TVSeason::seasonNumbers() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonNumber") ).toInt64List());
}

void Nepomuk2::TVSeason::setSeasonNumbers( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonNumber"), Variant( value ) );
}

void Nepomuk2::TVSeason::addSeasonNumber( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonNumber") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonNumber"), v );
}

qint64 Nepomuk2::TVSeason::seasonNumber() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonNumber") ).toInt64List() << 0 ).first();
}

void Nepomuk2::TVSeason::setSeasonNumber( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonNumber"), Variant( value ) );
}

QUrl Nepomuk2::TVSeason::seasonNumberUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonNumber");
}

QList<Nepomuk2::TVSeries> Nepomuk2::TVSeason::seasonOfs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<TVSeries> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonOf") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( TVSeries( *it ) );
    return rl;
}

void Nepomuk2::TVSeason::setSeasonOfs( const QList<Nepomuk2::TVSeries>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<TVSeries>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonOf"), Variant( l ) );
}

void Nepomuk2::TVSeason::addSeasonOf( const Nepomuk2::TVSeries& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonOf") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonOf"), v );
}

Nepomuk2::TVSeries Nepomuk2::TVSeason::seasonOf() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return TVSeries( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonOf") ).toResource().uri() );
}

void Nepomuk2::TVSeason::setSeasonOf( const Nepomuk2::TVSeries& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonOf"), Variant( value ) );
}

QUrl Nepomuk2::TVSeason::seasonOfUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#seasonOf");
}

QList<Nepomuk2::TVShow> Nepomuk2::TVSeason::seasonEpisodes() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<TVShow> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#hasSeasonEpisode") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( TVShow( *it ) );
    return rl;
}

void Nepomuk2::TVSeason::setSeasonEpisodes( const QList<Nepomuk2::TVShow>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<TVShow>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#hasSeasonEpisode"), Variant( l ) );
}

void Nepomuk2::TVSeason::addSeasonEpisode( const Nepomuk2::TVShow& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#hasSeasonEpisode") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#hasSeasonEpisode"), v );
}

QUrl Nepomuk2::TVSeason::seasonEpisodeUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#hasSeasonEpisode");
}


