/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _RESOURCE_H_
#define _RESOURCE_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Party;
    class Agent;
    class InstanceBase;
    class Tag;
    class Symbol;
    class Resource;

}

#include "resource.h"


namespace Nepomuk2 {


    class  Resource : public Resource
    {
    public:
        /**
         * Create a new empty and invalid Resource instance
         */
        Resource();

        /**
         * Default copy constructor
         */
        Resource( const Resource& );
        Resource( const Resource& );

        /**
         * Create a new Resource instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Resource( const QString& uriOrIdentifier );

        /**
         * Create a new Resource instance representing the resource
         * referenced by \a uri.
         */
        Resource( const QUrl& uri );
        ~Resource();

        Resource& operator=( const Resource& );

        /**
         * Get property 'score'. An authoritative score for an item valued 
         * between 0 and 1 
         */
        QList<double> scores() const;

        /**
         * Set property 'score'. An authoritative score for an item valued 
         * between 0 and 1 
         */
        void setScores( const QList<double>& value );

        /**
         * Add a value to property 'score'. An authoritative score for 
         * an item valued between 0 and 1 
         */
        void addScore( const double& value );

        /**
         * Get property 'score'. An authoritative score for an item valued 
         * between 0 and 1 
         */
        double score() const;

        /**
         * Set property 'score'. An authoritative score for an item valued 
         * between 0 and 1 
         */
        void setScore( const double& value );

        /**
         * \return The URI of the property 'score'. 
         */
        static QUrl scoreUri();

        /**
         * Get property 'scoreParameter'. A marker property to mark selected 
         * properties which are input to a mathematical algorithm to generate 
         * scores for resources. Properties are marked by being defined 
         * as subproperties of this property 
         */
        QList<double> scoreParameters() const;

        /**
         * Set property 'scoreParameter'. A marker property to mark selected 
         * properties which are input to a mathematical algorithm to generate 
         * scores for resources. Properties are marked by being defined 
         * as subproperties of this property 
         */
        void setScoreParameters( const QList<double>& value );

        /**
         * Add a value to property 'scoreParameter'. A marker property 
         * to mark selected properties which are input to a mathematical 
         * algorithm to generate scores for resources. Properties are 
         * marked by being defined as subproperties of this property 
         */
        void addScoreParameter( const double& value );

        /**
         * \return The URI of the property 'scoreParameter'. 
         */
        static QUrl scoreParameterUri();

        /**
         * Get property 'Symbol'. Annotation for a resource in the form 
         * of a visual representation. Typically the symbol is a double-typed 
         * image file or a nao:FreeDesktopIcon. 
         */
        QList<Symbol> symbols() const;

        /**
         * Set property 'Symbol'. Annotation for a resource in the form 
         * of a visual representation. Typically the symbol is a double-typed 
         * image file or a nao:FreeDesktopIcon. 
         */
        void setSymbols( const QList<Symbol>& value );

        /**
         * Add a value to property 'Symbol'. Annotation for a resource 
         * in the form of a visual representation. Typically the symbol 
         * is a double-typed image file or a nao:FreeDesktopIcon. 
         */
        void addSymbol( const Symbol& value );

        /**
         * \return The URI of the property 'Symbol'. 
         */
        static QUrl symbolUri();

        /**
         * Get property 'prefSymbol'. A unique preferred symbol representation 
         * for a resource 
         */
        QList<Symbol> prefSymbols() const;

        /**
         * Set property 'prefSymbol'. A unique preferred symbol representation 
         * for a resource 
         */
        void setPrefSymbols( const QList<Symbol>& value );

        /**
         * Add a value to property 'prefSymbol'. A unique preferred symbol 
         * representation for a resource 
         */
        void addPrefSymbol( const Symbol& value );

        /**
         * Get property 'prefSymbol'. A unique preferred symbol representation 
         * for a resource 
         */
        Symbol prefSymbol() const;

        /**
         * Set property 'prefSymbol'. A unique preferred symbol representation 
         * for a resource 
         */
        void setPrefSymbol( const Symbol& value );

        /**
         * \return The URI of the property 'prefSymbol'. 
         */
        static QUrl prefSymbolUri();

        /**
         * Get property 'altSymbol'. An alternative symbol representation 
         * for a resource 
         */
        QList<Symbol> altSymbols() const;

        /**
         * Set property 'altSymbol'. An alternative symbol representation 
         * for a resource 
         */
        void setAltSymbols( const QList<Symbol>& value );

        /**
         * Add a value to property 'altSymbol'. An alternative symbol 
         * representation for a resource 
         */
        void addAltSymbol( const Symbol& value );

        /**
         * \return The URI of the property 'altSymbol'. 
         */
        static QUrl altSymbolUri();

        /**
         * Get property 'creator'. Refers to the single or group of individuals 
         * that created the resource 
         */
        QList<Party> creators() const;

        /**
         * Set property 'creator'. Refers to the single or group of individuals 
         * that created the resource 
         */
        void setCreators( const QList<Party>& value );

        /**
         * Add a value to property 'creator'. Refers to the single or group 
         * of individuals that created the resource 
         */
        void addCreator( const Party& value );

        /**
         * Get property 'creator'. Refers to the single or group of individuals 
         * that created the resource 
         */
        Party creator() const;

        /**
         * Set property 'creator'. Refers to the single or group of individuals 
         * that created the resource 
         */
        void setCreator( const Party& value );

        /**
         * \return The URI of the property 'creator'. 
         */
        static QUrl creatorUri();

        /**
         * Get property 'numericRating'. Annotation for a resource in 
         * the form of a numeric rating (float value), allowed values are 
         * between 1 and 10 whereas 0 is interpreted as not set 
         */
        QList<qint64> numericRatings() const;

        /**
         * Set property 'numericRating'. Annotation for a resource in 
         * the form of a numeric rating (float value), allowed values are 
         * between 1 and 10 whereas 0 is interpreted as not set 
         */
        void setNumericRatings( const QList<qint64>& value );

        /**
         * Add a value to property 'numericRating'. Annotation for a resource 
         * in the form of a numeric rating (float value), allowed values 
         * are between 1 and 10 whereas 0 is interpreted as not set 
         */
        void addNumericRating( const qint64& value );

        /**
         * Get property 'numericRating'. Annotation for a resource in 
         * the form of a numeric rating (float value), allowed values are 
         * between 1 and 10 whereas 0 is interpreted as not set 
         */
        qint64 numericRating() const;

        /**
         * Set property 'numericRating'. Annotation for a resource in 
         * the form of a numeric rating (float value), allowed values are 
         * between 1 and 10 whereas 0 is interpreted as not set 
         */
        void setNumericRating( const qint64& value );

        /**
         * \return The URI of the property 'numericRating'. 
         */
        static QUrl numericRatingUri();

        /**
         * Get property 'contributor'. Refers to a single or a group of 
         * individuals that contributed to a resource 
         */
        QList<Party> contributors() const;

        /**
         * Set property 'contributor'. Refers to a single or a group of 
         * individuals that contributed to a resource 
         */
        void setContributors( const QList<Party>& value );

        /**
         * Add a value to property 'contributor'. Refers to a single or 
         * a group of individuals that contributed to a resource 
         */
        void addContributor( const Party& value );

        /**
         * \return The URI of the property 'contributor'. 
         */
        static QUrl contributorUri();

        /**
         * Get property 'modified'. States the modification time for 
         * a resource 
         */
        QList<QDateTime> modifieds() const;

        /**
         * Set property 'modified'. States the modification time for 
         * a resource 
         */
        void setModifieds( const QList<QDateTime>& value );

        /**
         * Add a value to property 'modified'. States the modification 
         * time for a resource 
         */
        void addModified( const QDateTime& value );

        /**
         * \return The URI of the property 'modified'. 
         */
        static QUrl modifiedUri();

        /**
         * Get property 'created'. States the creation, or first modification 
         * time for a resource 
         */
        QList<QDateTime> createds() const;

        /**
         * Set property 'created'. States the creation, or first modification 
         * time for a resource 
         */
        void setCreateds( const QList<QDateTime>& value );

        /**
         * Add a value to property 'created'. States the creation, or first 
         * modification time for a resource 
         */
        void addCreated( const QDateTime& value );

        /**
         * Get property 'created'. States the creation, or first modification 
         * time for a resource 
         */
        QDateTime created() const;

        /**
         * Set property 'created'. States the creation, or first modification 
         * time for a resource 
         */
        void setCreated( const QDateTime& value );

        /**
         * \return The URI of the property 'created'. 
         */
        static QUrl createdUri();

        /**
         * Get property 'lastModified'. States the last modification 
         * time for a resource 
         */
        QList<QDateTime> lastModifieds() const;

        /**
         * Set property 'lastModified'. States the last modification 
         * time for a resource 
         */
        void setLastModifieds( const QList<QDateTime>& value );

        /**
         * Add a value to property 'lastModified'. States the last modification 
         * time for a resource 
         */
        void addLastModified( const QDateTime& value );

        /**
         * Get property 'lastModified'. States the last modification 
         * time for a resource 
         */
        QDateTime lastModified() const;

        /**
         * Set property 'lastModified'. States the last modification 
         * time for a resource 
         */
        void setLastModified( const QDateTime& value );

        /**
         * \return The URI of the property 'lastModified'. 
         */
        static QUrl lastModifiedUri();

        /**
         * Get property 'Tag'. Defines an existing tag for a resource 
         */
        QList<Tag> tags() const;

        /**
         * Set property 'Tag'. Defines an existing tag for a resource 
         */
        void setTags( const QList<Tag>& value );

        /**
         * Add a value to property 'Tag'. Defines an existing tag for a resource 
         */
        void addTag( const Tag& value );

        /**
         * \return The URI of the property 'Tag'. 
         */
        static QUrl tagUri();

        /**
         * Get property 'deprecated'. If this property is assigned, the 
         * subject class, property, or resource, is deprecated and should 
         * not be used in production systems any longer. It may be removed 
         * without further notice. 
         */
        QList<Resource> deprecateds() const;

        /**
         * Set property 'deprecated'. If this property is assigned, the 
         * subject class, property, or resource, is deprecated and should 
         * not be used in production systems any longer. It may be removed 
         * without further notice. 
         */
        void setDeprecateds( const QList<Resource>& value );

        /**
         * Add a value to property 'deprecated'. If this property is assigned, 
         * the subject class, property, or resource, is deprecated and 
         * should not be used in production systems any longer. It may be 
         * removed without further notice. 
         */
        void addDeprecated( const Resource& value );

        /**
         * Get property 'deprecated'. If this property is assigned, the 
         * subject class, property, or resource, is deprecated and should 
         * not be used in production systems any longer. It may be removed 
         * without further notice. 
         */
        Resource deprecated() const;

        /**
         * Set property 'deprecated'. If this property is assigned, the 
         * subject class, property, or resource, is deprecated and should 
         * not be used in production systems any longer. It may be removed 
         * without further notice. 
         */
        void setDeprecated( const Resource& value );

        /**
         * \return The URI of the property 'deprecated'. 
         */
        static QUrl deprecatedUri();

        /**
         * Get property 'userVisible'. Mark a property, class, or even 
         * resource as user visible or not. Non-user-visible entities 
         * should never be presented to the user. By default everything 
         * is user-visible. 
         */
        QList<bool> userVisibles() const;

        /**
         * Set property 'userVisible'. Mark a property, class, or even 
         * resource as user visible or not. Non-user-visible entities 
         * should never be presented to the user. By default everything 
         * is user-visible. 
         */
        void setUserVisibles( const QList<bool>& value );

        /**
         * Add a value to property 'userVisible'. Mark a property, class, 
         * or even resource as user visible or not. Non-user-visible entities 
         * should never be presented to the user. By default everything 
         * is user-visible. 
         */
        void addUserVisible( const bool& value );

        /**
         * Get property 'userVisible'. Mark a property, class, or even 
         * resource as user visible or not. Non-user-visible entities 
         * should never be presented to the user. By default everything 
         * is user-visible. 
         */
        bool userVisible() const;

        /**
         * Set property 'userVisible'. Mark a property, class, or even 
         * resource as user visible or not. Non-user-visible entities 
         * should never be presented to the user. By default everything 
         * is user-visible. 
         */
        void setUserVisible( const bool& value );

        /**
         * \return The URI of the property 'userVisible'. 
         */
        static QUrl userVisibleUri();

        /**
         * Get property 'maintainedBy'. The agent that maintains this 
         * resource, ie. created it and knows what to do with it. 
         */
        QList<Agent> maintainedBys() const;

        /**
         * Set property 'maintainedBy'. The agent that maintains this 
         * resource, ie. created it and knows what to do with it. 
         */
        void setMaintainedBys( const QList<Agent>& value );

        /**
         * Add a value to property 'maintainedBy'. The agent that maintains 
         * this resource, ie. created it and knows what to do with it. 
         */
        void addMaintainedBy( const Agent& value );

        /**
         * \return The URI of the property 'maintainedBy'. 
         */
        static QUrl maintainedByUri();

        /**
         * Get all resources that have this resource set as property 'deprecated'. 
         * If this property is assigned, the subject class, property, 
         * or resource, is deprecated and should not be used in production 
         * systems any longer. It may be removed without further notice. 
         * \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Resource> deprecatedOf() const;

        /**
         * Get all resources that have this resource set as property 'isDataGraphFor'. 
         * Links a named graph to the resource for which it contains metadata. 
         * Its typical usage would be to link the graph containing extracted 
         * file metadata to the file resource. This allows for easy maintenance 
         * later on. \sa ResourceManager::allResourcesWithProperty 
         */
        QList<InstanceBase> isDataGraphForOf() const;

        /**
         * Get all resources that have this resource set as property 'isRelated'. 
         * Defines an annotation for a resource in the form of a relationship 
         * between the subject resource and another resource \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Resource> isRelatedOf() const;

        /**
         * Retrieve a list of all available Resource resources. This list 
         * consists of all resource of type Resource that are stored in 
         * the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Resource> allResources();


        /**
         * \return The URI of the resource type that is used in Resource instances.
         */
        static QString resourceTypeUri();

    protected:
       Resource( const QString& uri, const QUrl& type );
       Resource( const QUrl& uri, const QUrl& type );
    };
}

#endif
