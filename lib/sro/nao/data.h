/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _DATA_H_
#define _DATA_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {

}

#include "resource.h"


namespace Nepomuk2 {


    class  Data : public Resource
    {
    public:
        /**
         * Create a new empty and invalid Data instance
         */
        Data();

        /**
         * Default copy constructor
         */
        Data( const Data& );
        Data( const Resource& );

        /**
         * Create a new Data instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Data( const QString& uriOrIdentifier );

        /**
         * Create a new Data instance representing the resource
         * referenced by \a uri.
         */
        Data( const QUrl& uri );
        ~Data();

        Data& operator=( const Data& );

        /**
         * Get property 'DefaultNamespaceAbbreviation'. Defines the 
         * default static namespace abbreviation for a graph 
         */
        QStringList defaultNamespaceAbbreviations() const;

        /**
         * Set property 'DefaultNamespaceAbbreviation'. Defines the 
         * default static namespace abbreviation for a graph 
         */
        void setDefaultNamespaceAbbreviations( const QStringList& value );

        /**
         * Add a value to property 'DefaultNamespaceAbbreviation'. 
         * Defines the default static namespace abbreviation for a graph 
         */
        void addDefaultNamespaceAbbreviation( const QString& value );

        /**
         * Get property 'DefaultNamespaceAbbreviation'. Defines the 
         * default static namespace abbreviation for a graph 
         */
        QString defaultNamespaceAbbreviation() const;

        /**
         * Set property 'DefaultNamespaceAbbreviation'. Defines the 
         * default static namespace abbreviation for a graph 
         */
        void setDefaultNamespaceAbbreviation( const QString& value );

        /**
         * \return The URI of the property 'DefaultNamespaceAbbreviation'. 
         */
        static QUrl defaultNamespaceAbbreviationUri();

        /**
         * Get property 'version'. Specifies the version of a graph, in 
         * numeric format 
         */
        QList<double> versions() const;

        /**
         * Set property 'version'. Specifies the version of a graph, in 
         * numeric format 
         */
        void setVersions( const QList<double>& value );

        /**
         * Add a value to property 'version'. Specifies the version of 
         * a graph, in numeric format 
         */
        void addVersion( const double& value );

        /**
         * Get property 'version'. Specifies the version of a graph, in 
         * numeric format 
         */
        double version() const;

        /**
         * Set property 'version'. Specifies the version of a graph, in 
         * numeric format 
         */
        void setVersion( const double& value );

        /**
         * \return The URI of the property 'version'. 
         */
        static QUrl versionUri();

        /**
         * Get property 'DefaultNamespace'. Defines the default static 
         * namespace for a graph 
         */
        QStringList defaultNamespaces() const;

        /**
         * Set property 'DefaultNamespace'. Defines the default static 
         * namespace for a graph 
         */
        void setDefaultNamespaces( const QStringList& value );

        /**
         * Add a value to property 'DefaultNamespace'. Defines the default 
         * static namespace for a graph 
         */
        void addDefaultNamespace( const QString& value );

        /**
         * Get property 'DefaultNamespace'. Defines the default static 
         * namespace for a graph 
         */
        QString defaultNamespace() const;

        /**
         * Set property 'DefaultNamespace'. Defines the default static 
         * namespace for a graph 
         */
        void setDefaultNamespace( const QString& value );

        /**
         * \return The URI of the property 'DefaultNamespace'. 
         */
        static QUrl defaultNamespaceUri();

        /**
         * Get property 'status'. Specifies the status of a graph, stable, 
         * unstable or testing 
         */
        QStringList statuses() const;

        /**
         * Set property 'status'. Specifies the status of a graph, stable, 
         * unstable or testing 
         */
        void setStatuses( const QStringList& value );

        /**
         * Add a value to property 'status'. Specifies the status of a graph, 
         * stable, unstable or testing 
         */
        void addStatus( const QString& value );

        /**
         * Get property 'status'. Specifies the status of a graph, stable, 
         * unstable or testing 
         */
        QString status() const;

        /**
         * Set property 'status'. Specifies the status of a graph, stable, 
         * unstable or testing 
         */
        void setStatus( const QString& value );

        /**
         * \return The URI of the property 'status'. 
         */
        static QUrl statusUri();

        /**
         * Get property 'engineeringTool'. Specifies the engineering 
         * tool used to generate the graph 
         */
        QStringList engineeringTools() const;

        /**
         * Set property 'engineeringTool'. Specifies the engineering 
         * tool used to generate the graph 
         */
        void setEngineeringTools( const QStringList& value );

        /**
         * Add a value to property 'engineeringTool'. Specifies the engineering 
         * tool used to generate the graph 
         */
        void addEngineeringTool( const QString& value );

        /**
         * \return The URI of the property 'engineeringTool'. 
         */
        static QUrl engineeringToolUri();

        /**
         * Retrieve a list of all available Data resources. This list consists 
         * of all resource of type Data that are stored in the local Nepomuk 
         * meta data storage and any changes made locally. Be aware that 
         * in some cases this list can get very big. Then it might be better 
         * to use libKNep directly. 
         */
        static QList<Data> allDatas();


        /**
         * \return The URI of the resource type that is used in Data instances.
         */
        static QString resourceTypeUri();

    protected:
       Data( const QString& uri, const QUrl& type );
       Data( const QUrl& uri, const QUrl& type );
    };
}

#endif
