/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _AGENT_H_
#define _AGENT_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Resource;

}

#include "resource.h"


namespace Nepomuk2 {

    /**
     * An agent is the artificial counterpart to nao:Party. It can 
     * be a software component or some service. 
     */
    class  Agent : public Resource
    {
    public:
        /**
         * Create a new empty and invalid Agent instance
         */
        Agent();

        /**
         * Default copy constructor
         */
        Agent( const Agent& );
        Agent( const Resource& );

        /**
         * Create a new Agent instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Agent( const QString& uriOrIdentifier );

        /**
         * Create a new Agent instance representing the resource
         * referenced by \a uri.
         */
        Agent( const QUrl& uri );
        ~Agent();

        Agent& operator=( const Agent& );

        /**
         * Get all resources that have this resource set as property 'maintainedBy'. 
         * The agent that maintains this resource, ie. created it and knows 
         * what to do with it. \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Resource> maintainedByOf() const;

        /**
         * Retrieve a list of all available Agent resources. This list 
         * consists of all resource of type Agent that are stored in the 
         * local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Agent> allAgents();


        /**
         * \return The URI of the resource type that is used in Agent instances.
         */
        static QString resourceTypeUri();

    protected:
       Agent( const QString& uri, const QUrl& type );
       Agent( const QUrl& uri, const QUrl& type );
    };
}

#endif
