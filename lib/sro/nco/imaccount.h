/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _IMACCOUNT_H_
#define _IMACCOUNT_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class IMStatusType;
    class Role;
    class IMCapability;
    class IMAccount;

}

#include "contactmedium.h"


namespace Nepomuk2 {

    /**
     * An account in an Instant Messaging system. 
     */
    class  IMAccount : public ContactMedium
    {
    public:
        /**
         * Create a new empty and invalid IMAccount instance
         */
        IMAccount();

        /**
         * Default copy constructor
         */
        IMAccount( const IMAccount& );
        IMAccount( const Resource& );

        /**
         * Create a new IMAccount instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        IMAccount( const QString& uriOrIdentifier );

        /**
         * Create a new IMAccount instance representing the resource
         * referenced by \a uri.
         */
        IMAccount( const QUrl& uri );
        ~IMAccount();

        IMAccount& operator=( const IMAccount& );

        /**
         * Get property 'imStatus'. Current status of the given IM account. 
         * When this property is set, the nco:imStatusType should also 
         * always be set. Applications should attempt to parse this property 
         * to determine the presence, only falling back to the nco:imStatusType 
         * property in the case that this property's value is unrecognised. 
         * Values for this property may include 'available', 'offline', 
         * 'busy' etc. The exact choice of them is unspecified, although 
         * it is recommended to follow the guidance of the Telepathy project 
         * when choosing a string identifier http://telepathy.freedesktop.org/spec/Connection_Interface_Simple_Presence.html#description 
         */
        QStringList imStatuses() const;

        /**
         * Set property 'imStatus'. Current status of the given IM account. 
         * When this property is set, the nco:imStatusType should also 
         * always be set. Applications should attempt to parse this property 
         * to determine the presence, only falling back to the nco:imStatusType 
         * property in the case that this property's value is unrecognised. 
         * Values for this property may include 'available', 'offline', 
         * 'busy' etc. The exact choice of them is unspecified, although 
         * it is recommended to follow the guidance of the Telepathy project 
         * when choosing a string identifier http://telepathy.freedesktop.org/spec/Connection_Interface_Simple_Presence.html#description 
         */
        void setImStatuses( const QStringList& value );

        /**
         * Add a value to property 'imStatus'. Current status of the given 
         * IM account. When this property is set, the nco:imStatusType 
         * should also always be set. Applications should attempt to parse 
         * this property to determine the presence, only falling back 
         * to the nco:imStatusType property in the case that this property's 
         * value is unrecognised. Values for this property may include 
         * 'available', 'offline', 'busy' etc. The exact choice of them 
         * is unspecified, although it is recommended to follow the guidance 
         * of the Telepathy project when choosing a string identifier 
         * http://telepathy.freedesktop.org/spec/Connection_Interface_Simple_Presence.html#description 
         */
        void addImStatus( const QString& value );

        /**
         * Get property 'imStatus'. Current status of the given IM account. 
         * When this property is set, the nco:imStatusType should also 
         * always be set. Applications should attempt to parse this property 
         * to determine the presence, only falling back to the nco:imStatusType 
         * property in the case that this property's value is unrecognised. 
         * Values for this property may include 'available', 'offline', 
         * 'busy' etc. The exact choice of them is unspecified, although 
         * it is recommended to follow the guidance of the Telepathy project 
         * when choosing a string identifier http://telepathy.freedesktop.org/spec/Connection_Interface_Simple_Presence.html#description 
         */
        QString imStatus() const;

        /**
         * Set property 'imStatus'. Current status of the given IM account. 
         * When this property is set, the nco:imStatusType should also 
         * always be set. Applications should attempt to parse this property 
         * to determine the presence, only falling back to the nco:imStatusType 
         * property in the case that this property's value is unrecognised. 
         * Values for this property may include 'available', 'offline', 
         * 'busy' etc. The exact choice of them is unspecified, although 
         * it is recommended to follow the guidance of the Telepathy project 
         * when choosing a string identifier http://telepathy.freedesktop.org/spec/Connection_Interface_Simple_Presence.html#description 
         */
        void setImStatus( const QString& value );

        /**
         * \return The URI of the property 'imStatus'. 
         */
        static QUrl imStatusUri();

        /**
         * Get property 'imStatusType'. Current status type of the given 
         * IM account. When this property is set, the nco:imStatus property 
         * should also always be set. Applications should attempt to parse 
         * the nco:imStatus property to determine the presence, only 
         * falling back to this property in the case that the nco:imStatus 
         * property's value is unrecognised. 
         */
        QList<IMStatusType> imStatusTypes() const;

        /**
         * Set property 'imStatusType'. Current status type of the given 
         * IM account. When this property is set, the nco:imStatus property 
         * should also always be set. Applications should attempt to parse 
         * the nco:imStatus property to determine the presence, only 
         * falling back to this property in the case that the nco:imStatus 
         * property's value is unrecognised. 
         */
        void setImStatusTypes( const QList<IMStatusType>& value );

        /**
         * Add a value to property 'imStatusType'. Current status type 
         * of the given IM account. When this property is set, the nco:imStatus 
         * property should also always be set. Applications should attempt 
         * to parse the nco:imStatus property to determine the presence, 
         * only falling back to this property in the case that the nco:imStatus 
         * property's value is unrecognised. 
         */
        void addImStatusType( const IMStatusType& value );

        /**
         * Get property 'imStatusType'. Current status type of the given 
         * IM account. When this property is set, the nco:imStatus property 
         * should also always be set. Applications should attempt to parse 
         * the nco:imStatus property to determine the presence, only 
         * falling back to this property in the case that the nco:imStatus 
         * property's value is unrecognised. 
         */
        IMStatusType imStatusType() const;

        /**
         * Set property 'imStatusType'. Current status type of the given 
         * IM account. When this property is set, the nco:imStatus property 
         * should also always be set. Applications should attempt to parse 
         * the nco:imStatus property to determine the presence, only 
         * falling back to this property in the case that the nco:imStatus 
         * property's value is unrecognised. 
         */
        void setImStatusType( const IMStatusType& value );

        /**
         * \return The URI of the property 'imStatusType'. 
         */
        static QUrl imStatusTypeUri();

        /**
         * Get property 'imID'. Identifier of the IM account. Examples 
         * of such identifier might include ICQ UINs, Jabber IDs, Skype 
         * names etc. 
         */
        QStringList imIDs() const;

        /**
         * Set property 'imID'. Identifier of the IM account. Examples 
         * of such identifier might include ICQ UINs, Jabber IDs, Skype 
         * names etc. 
         */
        void setImIDs( const QStringList& value );

        /**
         * Add a value to property 'imID'. Identifier of the IM account. 
         * Examples of such identifier might include ICQ UINs, Jabber 
         * IDs, Skype names etc. 
         */
        void addImID( const QString& value );

        /**
         * \return The URI of the property 'imID'. 
         */
        static QUrl imIDUri();

        /**
         * Get property 'imNickname'. A nickname attached to a particular 
         * IM Account. 
         */
        QStringList imNicknames() const;

        /**
         * Set property 'imNickname'. A nickname attached to a particular 
         * IM Account. 
         */
        void setImNicknames( const QStringList& value );

        /**
         * Add a value to property 'imNickname'. A nickname attached to 
         * a particular IM Account. 
         */
        void addImNickname( const QString& value );

        /**
         * \return The URI of the property 'imNickname'. 
         */
        static QUrl imNicknameUri();

        /**
         * Get property 'imAccountType'. Type of the IM account. This 
         * may be the name of the service that provides the IM functionality. 
         * Examples might include Jabber, ICQ, MSN etc 
         */
        QStringList imAccountTypes() const;

        /**
         * Set property 'imAccountType'. Type of the IM account. This 
         * may be the name of the service that provides the IM functionality. 
         * Examples might include Jabber, ICQ, MSN etc 
         */
        void setImAccountTypes( const QStringList& value );

        /**
         * Add a value to property 'imAccountType'. Type of the IM account. 
         * This may be the name of the service that provides the IM functionality. 
         * Examples might include Jabber, ICQ, MSN etc 
         */
        void addImAccountType( const QString& value );

        /**
         * Get property 'imAccountType'. Type of the IM account. This 
         * may be the name of the service that provides the IM functionality. 
         * Examples might include Jabber, ICQ, MSN etc 
         */
        QString imAccountType() const;

        /**
         * Set property 'imAccountType'. Type of the IM account. This 
         * may be the name of the service that provides the IM functionality. 
         * Examples might include Jabber, ICQ, MSN etc 
         */
        void setImAccountType( const QString& value );

        /**
         * \return The URI of the property 'imAccountType'. 
         */
        static QUrl imAccountTypeUri();

        /**
         * Get property 'imStatusMessage'. A feature common in most IM 
         * systems. A message left by the user for all his/her contacts 
         * to see. 
         */
        QStringList imStatusMessages() const;

        /**
         * Set property 'imStatusMessage'. A feature common in most IM 
         * systems. A message left by the user for all his/her contacts 
         * to see. 
         */
        void setImStatusMessages( const QStringList& value );

        /**
         * Add a value to property 'imStatusMessage'. A feature common 
         * in most IM systems. A message left by the user for all his/her 
         * contacts to see. 
         */
        void addImStatusMessage( const QString& value );

        /**
         * Get property 'imStatusMessage'. A feature common in most IM 
         * systems. A message left by the user for all his/her contacts 
         * to see. 
         */
        QString imStatusMessage() const;

        /**
         * Set property 'imStatusMessage'. A feature common in most IM 
         * systems. A message left by the user for all his/her contacts 
         * to see. 
         */
        void setImStatusMessage( const QString& value );

        /**
         * \return The URI of the property 'imStatusMessage'. 
         */
        static QUrl imStatusMessageUri();

        /**
         * Get property 'IMCapability'. Indicates that an IMAccount 
         * has a certain capability. 
         */
        QList<IMCapability> iMCapabilitys() const;

        /**
         * Set property 'IMCapability'. Indicates that an IMAccount 
         * has a certain capability. 
         */
        void setIMCapabilitys( const QList<IMCapability>& value );

        /**
         * Add a value to property 'IMCapability'. Indicates that an IMAccount 
         * has a certain capability. 
         */
        void addIMCapability( const IMCapability& value );

        /**
         * \return The URI of the property 'IMCapability'. 
         */
        static QUrl iMCapabilityUri();

        /**
         * Get property 'isAccessedBy'. Indicates the local IMAccount 
         * by which this IMAccount is accessed. This does not imply membership 
         * of a contact list. 
         */
        QList<IMAccount> isAccessedBys() const;

        /**
         * Set property 'isAccessedBy'. Indicates the local IMAccount 
         * by which this IMAccount is accessed. This does not imply membership 
         * of a contact list. 
         */
        void setIsAccessedBys( const QList<IMAccount>& value );

        /**
         * Add a value to property 'isAccessedBy'. Indicates the local 
         * IMAccount by which this IMAccount is accessed. This does not 
         * imply membership of a contact list. 
         */
        void addIsAccessedBy( const IMAccount& value );

        /**
         * \return The URI of the property 'isAccessedBy'. 
         */
        static QUrl isAccessedByUri();

        /**
         * Get property 'publishesPresenceTo'. Indicates that this 
         * IMAccount publishes its presence information to the other 
         * IMAccount. 
         */
        QList<IMAccount> publishesPresenceTos() const;

        /**
         * Set property 'publishesPresenceTo'. Indicates that this 
         * IMAccount publishes its presence information to the other 
         * IMAccount. 
         */
        void setPublishesPresenceTos( const QList<IMAccount>& value );

        /**
         * Add a value to property 'publishesPresenceTo'. Indicates 
         * that this IMAccount publishes its presence information to 
         * the other IMAccount. 
         */
        void addPublishesPresenceTo( const IMAccount& value );

        /**
         * \return The URI of the property 'publishesPresenceTo'. 
         */
        static QUrl publishesPresenceToUri();

        /**
         * Get property 'requestedPresenceSubscriptionTo'. Indicates 
         * that this IMAccount has requested a subscription to the presence 
         * information of the other IMAccount. 
         */
        QList<IMAccount> requestedPresenceSubscriptionTos() const;

        /**
         * Set property 'requestedPresenceSubscriptionTo'. Indicates 
         * that this IMAccount has requested a subscription to the presence 
         * information of the other IMAccount. 
         */
        void setRequestedPresenceSubscriptionTos( const QList<IMAccount>& value );

        /**
         * Add a value to property 'requestedPresenceSubscriptionTo'. 
         * Indicates that this IMAccount has requested a subscription 
         * to the presence information of the other IMAccount. 
         */
        void addRequestedPresenceSubscriptionTo( const IMAccount& value );

        /**
         * \return The URI of the property 'requestedPresenceSubscriptionTo'. 
         */
        static QUrl requestedPresenceSubscriptionToUri();

        /**
         * Get property 'isBlocked'. Indicates that this IMAccount has 
         * been blocked. 
         */
        QList<bool> isBlockeds() const;

        /**
         * Set property 'isBlocked'. Indicates that this IMAccount has 
         * been blocked. 
         */
        void setIsBlockeds( const QList<bool>& value );

        /**
         * Add a value to property 'isBlocked'. Indicates that this IMAccount 
         * has been blocked. 
         */
        void addIsBlocked( const bool& value );

        /**
         * Get property 'isBlocked'. Indicates that this IMAccount has 
         * been blocked. 
         */
        bool isBlocked() const;

        /**
         * Set property 'isBlocked'. Indicates that this IMAccount has 
         * been blocked. 
         */
        void setIsBlocked( const bool& value );

        /**
         * \return The URI of the property 'isBlocked'. 
         */
        static QUrl isBlockedUri();

        /**
         * Get all resources that have this resource set as property 'IMAccount'. 
         * Indicates that an Instant Messaging account owned by an entity 
         * represented by this contact. \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Role> iMAccountOf() const;

        /**
         * Get all resources that have this resource set as property 'isAccessedBy'. 
         * Indicates the local IMAccount by which this IMAccount is accessed. 
         * This does not imply membership of a contact list. \sa ResourceManager::allResourcesWithProperty 
         */
        QList<IMAccount> isAccessedByOf() const;

        /**
         * Get all resources that have this resource set as property 'publishesPresenceTo'. 
         * Indicates that this IMAccount publishes its presence information 
         * to the other IMAccount. \sa ResourceManager::allResourcesWithProperty 
         */
        QList<IMAccount> publishesPresenceToOf() const;

        /**
         * Get all resources that have this resource set as property 'requestedPresenceSubscriptionTo'. 
         * Indicates that this IMAccount has requested a subscription 
         * to the presence information of the other IMAccount. \sa ResourceManager::allResourcesWithProperty 
         */
        QList<IMAccount> requestedPresenceSubscriptionToOf() const;

        /**
         * Retrieve a list of all available IMAccount resources. This 
         * list consists of all resource of type IMAccount that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<IMAccount> allIMAccounts();


        /**
         * \return The URI of the resource type that is used in IMAccount instances.
         */
        static QString resourceTypeUri();

    protected:
       IMAccount( const QString& uri, const QUrl& type );
       IMAccount( const QUrl& uri, const QUrl& type );
    };
}

#endif
