/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "affiliation.h"

#include "personcontact.h"
#include "organizationcontact.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Affiliation::Affiliation()
  : Role( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Affiliation") )
{
}



Nepomuk2::Affiliation::Affiliation( const Affiliation& res )
  : Role( res )
{
}


Nepomuk2::Affiliation::Affiliation( const Nepomuk2::Resource& res )
  : Role( res )
{
}


Nepomuk2::Affiliation::Affiliation( const QString& uri )
  : Role( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Affiliation") )
{
}

Nepomuk2::Affiliation::Affiliation( const QUrl& uri )
  : Role( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Affiliation") )
{
}

Nepomuk2::Affiliation::Affiliation( const QString& uri, const QUrl& type )
  : Role( uri, type )
{
}


Nepomuk2::Affiliation::Affiliation( const QUrl& uri, const QUrl& type )
  : Role( uri, type )
{
}

Nepomuk2::Affiliation::~Affiliation()
{
}

Nepomuk2::Affiliation& Nepomuk2::Affiliation::operator=( const Affiliation& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Affiliation::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Affiliation");
}

QStringList Nepomuk2::Affiliation::departments() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#department") ).toStringList());
}

void Nepomuk2::Affiliation::setDepartments( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#department"), Variant( value ) );
}

void Nepomuk2::Affiliation::addDepartment( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#department") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#department"), v );
}

QUrl Nepomuk2::Affiliation::departmentUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#department");
}

QList<Nepomuk2::OrganizationContact> Nepomuk2::Affiliation::orgs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<OrganizationContact> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#org") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( OrganizationContact( *it ) );
    return rl;
}

void Nepomuk2::Affiliation::setOrgs( const QList<Nepomuk2::OrganizationContact>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<OrganizationContact>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#org"), Variant( l ) );
}

void Nepomuk2::Affiliation::addOrg( const Nepomuk2::OrganizationContact& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#org") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#org"), v );
}

Nepomuk2::OrganizationContact Nepomuk2::Affiliation::org() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return OrganizationContact( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#org") ).toResource().uri() );
}

void Nepomuk2::Affiliation::setOrg( const Nepomuk2::OrganizationContact& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#org"), Variant( value ) );
}

QUrl Nepomuk2::Affiliation::orgUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#org");
}

QStringList Nepomuk2::Affiliation::titles() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#title") ).toStringList());
}

void Nepomuk2::Affiliation::setTitles( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#title"), Variant( value ) );
}

void Nepomuk2::Affiliation::addTitle( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#title") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#title"), v );
}

QString Nepomuk2::Affiliation::title() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#title") ).toStringList() << QString() ).first();
}

void Nepomuk2::Affiliation::setTitle( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#title"), Variant( value ) );
}

QUrl Nepomuk2::Affiliation::titleUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#title");
}

QStringList Nepomuk2::Affiliation::roles() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#role") ).toStringList());
}

void Nepomuk2::Affiliation::setRoles( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#role"), Variant( value ) );
}

void Nepomuk2::Affiliation::addRole( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#role") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#role"), v );
}

QUrl Nepomuk2::Affiliation::roleUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#role");
}


