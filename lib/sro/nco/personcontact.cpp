/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "personcontact.h"

#include "affiliation.h"
#include "gender.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::PersonContact::PersonContact()
  : Contact( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact") )
{
}



Nepomuk2::PersonContact::PersonContact( const PersonContact& res )
  : Contact( res )
{
}


Nepomuk2::PersonContact::PersonContact( const Nepomuk2::Resource& res )
  : Contact( res )
{
}


Nepomuk2::PersonContact::PersonContact( const QString& uri )
  : Contact( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact") )
{
}

Nepomuk2::PersonContact::PersonContact( const QUrl& uri )
  : Contact( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact") )
{
}

Nepomuk2::PersonContact::PersonContact( const QString& uri, const QUrl& type )
  : Contact( uri, type )
{
}


Nepomuk2::PersonContact::PersonContact( const QUrl& uri, const QUrl& type )
  : Contact( uri, type )
{
}

Nepomuk2::PersonContact::~PersonContact()
{
}

Nepomuk2::PersonContact& Nepomuk2::PersonContact::operator=( const PersonContact& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::PersonContact::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact");
}

QStringList Nepomuk2::PersonContact::nameHonorificSuffixs() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificSuffix") ).toStringList());
}

void Nepomuk2::PersonContact::setNameHonorificSuffixs( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificSuffix"), Variant( value ) );
}

void Nepomuk2::PersonContact::addNameHonorificSuffix( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificSuffix") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificSuffix"), v );
}

QUrl Nepomuk2::PersonContact::nameHonorificSuffixUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificSuffix");
}

QStringList Nepomuk2::PersonContact::nameFamilys() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily") ).toStringList());
}

void Nepomuk2::PersonContact::setNameFamilys( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily"), Variant( value ) );
}

void Nepomuk2::PersonContact::addNameFamily( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily"), v );
}

QString Nepomuk2::PersonContact::nameFamily() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily") ).toStringList() << QString() ).first();
}

void Nepomuk2::PersonContact::setNameFamily( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily"), Variant( value ) );
}

QUrl Nepomuk2::PersonContact::nameFamilyUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameFamily");
}

QStringList Nepomuk2::PersonContact::nameHonorificPrefixs() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificPrefix") ).toStringList());
}

void Nepomuk2::PersonContact::setNameHonorificPrefixs( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificPrefix"), Variant( value ) );
}

void Nepomuk2::PersonContact::addNameHonorificPrefix( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificPrefix") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificPrefix"), v );
}

QUrl Nepomuk2::PersonContact::nameHonorificPrefixUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameHonorificPrefix");
}

QStringList Nepomuk2::PersonContact::nameAdditionals() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameAdditional") ).toStringList());
}

void Nepomuk2::PersonContact::setNameAdditionals( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameAdditional"), Variant( value ) );
}

void Nepomuk2::PersonContact::addNameAdditional( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameAdditional") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameAdditional"), v );
}

QUrl Nepomuk2::PersonContact::nameAdditionalUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameAdditional");
}

QStringList Nepomuk2::PersonContact::nameGivens() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven") ).toStringList());
}

void Nepomuk2::PersonContact::setNameGivens( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven"), Variant( value ) );
}

void Nepomuk2::PersonContact::addNameGiven( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven"), v );
}

QString Nepomuk2::PersonContact::nameGiven() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven") ).toStringList() << QString() ).first();
}

void Nepomuk2::PersonContact::setNameGiven( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven"), Variant( value ) );
}

QUrl Nepomuk2::PersonContact::nameGivenUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#nameGiven");
}

QStringList Nepomuk2::PersonContact::hobbys() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby") ).toStringList());
}

void Nepomuk2::PersonContact::setHobbys( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby"), Variant( value ) );
}

void Nepomuk2::PersonContact::addHobby( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby"), v );
}

QUrl Nepomuk2::PersonContact::hobbyUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby");
}

QList<Nepomuk2::Affiliation> Nepomuk2::PersonContact::affiliations() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Affiliation> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Affiliation( *it ) );
    return rl;
}

void Nepomuk2::PersonContact::setAffiliations( const QList<Nepomuk2::Affiliation>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Affiliation>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation"), Variant( l ) );
}

void Nepomuk2::PersonContact::addAffiliation( const Nepomuk2::Affiliation& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation"), v );
}

QUrl Nepomuk2::PersonContact::affiliationUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation");
}

QList<Nepomuk2::Gender> Nepomuk2::PersonContact::genders() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Gender> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Gender( *it ) );
    return rl;
}

void Nepomuk2::PersonContact::setGenders( const QList<Nepomuk2::Gender>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Gender>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender"), Variant( l ) );
}

void Nepomuk2::PersonContact::addGender( const Nepomuk2::Gender& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender"), v );
}

Nepomuk2::Gender Nepomuk2::PersonContact::gender() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return Gender( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender") ).toResource().uri() );
}

void Nepomuk2::PersonContact::setGender( const Nepomuk2::Gender& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender"), Variant( value ) );
}

QUrl Nepomuk2::PersonContact::genderUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender");
}


