/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _ROLE_H_
#define _ROLE_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class EmailAddress;
    class PostalAddress;
    class PhoneNumber;
    class Resource;
    class ContactMedium;
    class IMAccount;

}



namespace Nepomuk2 {

    /**
     * A role played by a contact. Contacts that denote people, can 
     * have many roles (e.g. see the hasAffiliation property and Affiliation 
     * class). Contacts that denote Organizations or other Agents 
     * usually have one role. Each role can introduce additional contact 
     * media. 
     */
    class  Role : public Resource
    {
    public:
        /**
         * Create a new empty and invalid Role instance
         */
        Role();

        /**
         * Default copy constructor
         */
        Role( const Role& );
        Role( const Resource& );

        /**
         * Create a new Role instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Role( const QString& uriOrIdentifier );

        /**
         * Create a new Role instance representing the resource
         * referenced by \a uri.
         */
        Role( const QUrl& uri );
        ~Role();

        Role& operator=( const Role& );

        /**
         * Get property 'url'. A uniform resource locator associated 
         * with the given role of a Contact. Inspired by the 'URL' property 
         * defined in RFC 2426 Sec. 3.6.8. 
         */
        QList<Resource> urls() const;

        /**
         * Set property 'url'. A uniform resource locator associated 
         * with the given role of a Contact. Inspired by the 'URL' property 
         * defined in RFC 2426 Sec. 3.6.8. 
         */
        void setUrls( const QList<Resource>& value );

        /**
         * Add a value to property 'url'. A uniform resource locator associated 
         * with the given role of a Contact. Inspired by the 'URL' property 
         * defined in RFC 2426 Sec. 3.6.8. 
         */
        void addUrl( const Resource& value );

        /**
         * \return The URI of the property 'url'. 
         */
        static QUrl urlUri();

        /**
         * Get property 'IMAccount'. Indicates that an Instant Messaging 
         * account owned by an entity represented by this contact. 
         */
        QList<IMAccount> iMAccounts() const;

        /**
         * Set property 'IMAccount'. Indicates that an Instant Messaging 
         * account owned by an entity represented by this contact. 
         */
        void setIMAccounts( const QList<IMAccount>& value );

        /**
         * Add a value to property 'IMAccount'. Indicates that an Instant 
         * Messaging account owned by an entity represented by this contact. 
         */
        void addIMAccount( const IMAccount& value );

        /**
         * \return The URI of the property 'IMAccount'. 
         */
        static QUrl iMAccountUri();

        /**
         * Get property 'PhoneNumber'. A number for telephony communication 
         * with the object represented by this Contact. An equivalent 
         * of the 'TEL' property defined in RFC 2426 Sec. 3.3.1 
         */
        QList<PhoneNumber> phoneNumbers() const;

        /**
         * Set property 'PhoneNumber'. A number for telephony communication 
         * with the object represented by this Contact. An equivalent 
         * of the 'TEL' property defined in RFC 2426 Sec. 3.3.1 
         */
        void setPhoneNumbers( const QList<PhoneNumber>& value );

        /**
         * Add a value to property 'PhoneNumber'. A number for telephony 
         * communication with the object represented by this Contact. 
         * An equivalent of the 'TEL' property defined in RFC 2426 Sec. 
         * 3.3.1 
         */
        void addPhoneNumber( const PhoneNumber& value );

        /**
         * \return The URI of the property 'PhoneNumber'. 
         */
        static QUrl phoneNumberUri();

        /**
         * Get property 'websiteUrl'. A url of a website. 
         */
        QList<Resource> websiteUrls() const;

        /**
         * Set property 'websiteUrl'. A url of a website. 
         */
        void setWebsiteUrls( const QList<Resource>& value );

        /**
         * Add a value to property 'websiteUrl'. A url of a website. 
         */
        void addWebsiteUrl( const Resource& value );

        /**
         * \return The URI of the property 'websiteUrl'. 
         */
        static QUrl websiteUrlUri();

        /**
         * Get property 'EmailAddress'. An address for electronic mail 
         * communication with the object specified by this contact. An 
         * equivalent of the 'EMAIL' property as defined in RFC 2426 Sec. 
         * 3.3.1. 
         */
        QList<EmailAddress> emailAddresses() const;

        /**
         * Set property 'EmailAddress'. An address for electronic mail 
         * communication with the object specified by this contact. An 
         * equivalent of the 'EMAIL' property as defined in RFC 2426 Sec. 
         * 3.3.1. 
         */
        void setEmailAddresses( const QList<EmailAddress>& value );

        /**
         * Add a value to property 'EmailAddress'. An address for electronic 
         * mail communication with the object specified by this contact. 
         * An equivalent of the 'EMAIL' property as defined in RFC 2426 
         * Sec. 3.3.1. 
         */
        void addEmailAddress( const EmailAddress& value );

        /**
         * \return The URI of the property 'EmailAddress'. 
         */
        static QUrl emailAddressUri();

        /**
         * Get property 'ContactMedium'. A superProperty for all properties 
         * linking a Contact to an instance of a contact medium. 
         */
        QList<ContactMedium> contactMediums() const;

        /**
         * Set property 'ContactMedium'. A superProperty for all properties 
         * linking a Contact to an instance of a contact medium. 
         */
        void setContactMediums( const QList<ContactMedium>& value );

        /**
         * Add a value to property 'ContactMedium'. A superProperty for 
         * all properties linking a Contact to an instance of a contact 
         * medium. 
         */
        void addContactMedium( const ContactMedium& value );

        /**
         * \return The URI of the property 'ContactMedium'. 
         */
        static QUrl contactMediumUri();

        /**
         * Get property 'foafUrl'. The URL of the FOAF file. 
         */
        QList<Resource> foafUrls() const;

        /**
         * Set property 'foafUrl'. The URL of the FOAF file. 
         */
        void setFoafUrls( const QList<Resource>& value );

        /**
         * Add a value to property 'foafUrl'. The URL of the FOAF file. 
         */
        void addFoafUrl( const Resource& value );

        /**
         * \return The URI of the property 'foafUrl'. 
         */
        static QUrl foafUrlUri();

        /**
         * Get property 'blogUrl'. A Blog url. 
         */
        QList<Resource> blogUrls() const;

        /**
         * Set property 'blogUrl'. A Blog url. 
         */
        void setBlogUrls( const QList<Resource>& value );

        /**
         * Add a value to property 'blogUrl'. A Blog url. 
         */
        void addBlogUrl( const Resource& value );

        /**
         * \return The URI of the property 'blogUrl'. 
         */
        static QUrl blogUrlUri();

        /**
         * Get property 'PostalAddress'. The default Address for a Contact. 
         * An equivalent of the 'ADR' property as defined in RFC 2426 Sec. 
         * 3.2.1. 
         */
        QList<PostalAddress> postalAddresses() const;

        /**
         * Set property 'PostalAddress'. The default Address for a Contact. 
         * An equivalent of the 'ADR' property as defined in RFC 2426 Sec. 
         * 3.2.1. 
         */
        void setPostalAddresses( const QList<PostalAddress>& value );

        /**
         * Add a value to property 'PostalAddress'. The default Address 
         * for a Contact. An equivalent of the 'ADR' property as defined 
         * in RFC 2426 Sec. 3.2.1. 
         */
        void addPostalAddress( const PostalAddress& value );

        /**
         * \return The URI of the property 'PostalAddress'. 
         */
        static QUrl postalAddressUri();

        /**
         * Get property 'start'. Start datetime for the role, such as: 
         * the datetime of joining a project or organization, datetime 
         * of starting employment, datetime of marriage 
         */
        QList<QDateTime> starts() const;

        /**
         * Set property 'start'. Start datetime for the role, such as: 
         * the datetime of joining a project or organization, datetime 
         * of starting employment, datetime of marriage 
         */
        void setStarts( const QList<QDateTime>& value );

        /**
         * Add a value to property 'start'. Start datetime for the role, 
         * such as: the datetime of joining a project or organization, 
         * datetime of starting employment, datetime of marriage 
         */
        void addStart( const QDateTime& value );

        /**
         * Get property 'start'. Start datetime for the role, such as: 
         * the datetime of joining a project or organization, datetime 
         * of starting employment, datetime of marriage 
         */
        QDateTime start() const;

        /**
         * Set property 'start'. Start datetime for the role, such as: 
         * the datetime of joining a project or organization, datetime 
         * of starting employment, datetime of marriage 
         */
        void setStart( const QDateTime& value );

        /**
         * \return The URI of the property 'start'. 
         */
        static QUrl startUri();

        /**
         * Get property 'end'. End datetime for the role, such as: the datetime 
         * of leaving a project or organization, datetime of ending employment, 
         * datetime of divorce. If absent or set to a date in the future, 
         * the role is currently active. 
         */
        QList<QDateTime> ends() const;

        /**
         * Set property 'end'. End datetime for the role, such as: the datetime 
         * of leaving a project or organization, datetime of ending employment, 
         * datetime of divorce. If absent or set to a date in the future, 
         * the role is currently active. 
         */
        void setEnds( const QList<QDateTime>& value );

        /**
         * Add a value to property 'end'. End datetime for the role, such 
         * as: the datetime of leaving a project or organization, datetime 
         * of ending employment, datetime of divorce. If absent or set 
         * to a date in the future, the role is currently active. 
         */
        void addEnd( const QDateTime& value );

        /**
         * Get property 'end'. End datetime for the role, such as: the datetime 
         * of leaving a project or organization, datetime of ending employment, 
         * datetime of divorce. If absent or set to a date in the future, 
         * the role is currently active. 
         */
        QDateTime end() const;

        /**
         * Set property 'end'. End datetime for the role, such as: the datetime 
         * of leaving a project or organization, datetime of ending employment, 
         * datetime of divorce. If absent or set to a date in the future, 
         * the role is currently active. 
         */
        void setEnd( const QDateTime& value );

        /**
         * \return The URI of the property 'end'. 
         */
        static QUrl endUri();

        /**
         * Retrieve a list of all available Role resources. This list consists 
         * of all resource of type Role that are stored in the local Nepomuk 
         * meta data storage and any changes made locally. Be aware that 
         * in some cases this list can get very big. Then it might be better 
         * to use libKNep directly. 
         */
        static QList<Role> allRoles();


        /**
         * \return The URI of the resource type that is used in Role instances.
         */
        static QString resourceTypeUri();

    protected:
       Role( const QString& uri, const QUrl& type );
       Role( const QUrl& uri, const QUrl& type );
    };
}

#endif
