/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _INFORMATIONELEMENT_H_
#define _INFORMATIONELEMENT_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Contact;

}

#include <Nepomuk2/Resource>


namespace Nepomuk2 {


    class  InformationElement : public Resource
    {
    public:
        /**
         * Create a new empty and invalid InformationElement instance
         */
        InformationElement();

        /**
         * Default copy constructor
         */
        InformationElement( const InformationElement& );
        InformationElement( const Resource& );

        /**
         * Create a new InformationElement instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        InformationElement( const QString& uriOrIdentifier );

        /**
         * Create a new InformationElement instance representing the resource
         * referenced by \a uri.
         */
        InformationElement( const QUrl& uri );
        ~InformationElement();

        InformationElement& operator=( const InformationElement& );

        /**
         * Get property 'publisher'. An entity responsible for making 
         * the InformationElement available. 
         */
        QList<Contact> publishers() const;

        /**
         * Set property 'publisher'. An entity responsible for making 
         * the InformationElement available. 
         */
        void setPublishers( const QList<Contact>& value );

        /**
         * Add a value to property 'publisher'. An entity responsible 
         * for making the InformationElement available. 
         */
        void addPublisher( const Contact& value );

        /**
         * \return The URI of the property 'publisher'. 
         */
        static QUrl publisherUri();

        /**
         * Get property 'creator'. Creator of an information element, 
         * an entity primarily responsible for the creation of the content 
         * of the data object. 
         */
        QList<Contact> creators() const;

        /**
         * Set property 'creator'. Creator of an information element, 
         * an entity primarily responsible for the creation of the content 
         * of the data object. 
         */
        void setCreators( const QList<Contact>& value );

        /**
         * Add a value to property 'creator'. Creator of an information 
         * element, an entity primarily responsible for the creation 
         * of the content of the data object. 
         */
        void addCreator( const Contact& value );

        /**
         * \return The URI of the property 'creator'. 
         */
        static QUrl creatorUri();

        /**
         * Get property 'contributor'. An entity responsible for making 
         * contributions to the content of the InformationElement. 
         */
        QList<Contact> contributors() const;

        /**
         * Set property 'contributor'. An entity responsible for making 
         * contributions to the content of the InformationElement. 
         */
        void setContributors( const QList<Contact>& value );

        /**
         * Add a value to property 'contributor'. An entity responsible 
         * for making contributions to the content of the InformationElement. 
         */
        void addContributor( const Contact& value );

        /**
         * \return The URI of the property 'contributor'. 
         */
        static QUrl contributorUri();

        /**
         * Retrieve a list of all available InformationElement resources. 
         * This list consists of all resource of type InformationElement 
         * that are stored in the local Nepomuk meta data storage and any 
         * changes made locally. Be aware that in some cases this list can 
         * get very big. Then it might be better to use libKNep directly. 
         */
        static QList<InformationElement> allInformationElements();


        /**
         * \return The URI of the resource type that is used in InformationElement instances.
         */
        static QString resourceTypeUri();

    protected:
       InformationElement( const QString& uri, const QUrl& type );
       InformationElement( const QUrl& uri, const QUrl& type );
    };
}

#endif
