/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _LEGALDOCUMENT_H_
#define _LEGALDOCUMENT_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Resource;

}

#include "publication.h"


namespace Nepomuk2 {

    /**
     * A legal document; for example, a court decision, a brief, and 
     * so forth. 
     */
    class  LegalDocument : public Publication
    {
    public:
        /**
         * Create a new empty and invalid LegalDocument instance
         */
        LegalDocument();

        /**
         * Default copy constructor
         */
        LegalDocument( const LegalDocument& );
        LegalDocument( const Resource& );

        /**
         * Create a new LegalDocument instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        LegalDocument( const QString& uriOrIdentifier );

        /**
         * Create a new LegalDocument instance representing the resource
         * referenced by \a uri.
         */
        LegalDocument( const QUrl& uri );
        ~LegalDocument();

        LegalDocument& operator=( const LegalDocument& );

        /**
         * Get property 'counsel'. The counsel related to a Legal document 
         */
        QList<Resource> counsels() const;

        /**
         * Set property 'counsel'. The counsel related to a Legal document 
         */
        void setCounsels( const QList<Resource>& value );

        /**
         * Add a value to property 'counsel'. The counsel related to a Legal 
         * document 
         */
        void addCounsel( const Resource& value );

        /**
         * \return The URI of the property 'counsel'. 
         */
        static QUrl counselUri();

        /**
         * Get property 'history'. The history of a legal document 
         */
        QStringList historys() const;

        /**
         * Set property 'history'. The history of a legal document 
         */
        void setHistorys( const QStringList& value );

        /**
         * Add a value to property 'history'. The history of a legal document 
         */
        void addHistory( const QString& value );

        /**
         * Get property 'history'. The history of a legal document 
         */
        QString history() const;

        /**
         * Set property 'history'. The history of a legal document 
         */
        void setHistory( const QString& value );

        /**
         * \return The URI of the property 'history'. 
         */
        static QUrl historyUri();

        /**
         * Get property 'arguedDate'. The date on which a legal case is 
         * argued before a court. 
         */
        QList<QDateTime> arguedDates() const;

        /**
         * Set property 'arguedDate'. The date on which a legal case is 
         * argued before a court. 
         */
        void setArguedDates( const QList<QDateTime>& value );

        /**
         * Add a value to property 'arguedDate'. The date on which a legal 
         * case is argued before a court. 
         */
        void addArguedDate( const QDateTime& value );

        /**
         * Get property 'arguedDate'. The date on which a legal case is 
         * argued before a court. 
         */
        QDateTime arguedDate() const;

        /**
         * Set property 'arguedDate'. The date on which a legal case is 
         * argued before a court. 
         */
        void setArguedDate( const QDateTime& value );

        /**
         * \return The URI of the property 'arguedDate'. 
         */
        static QUrl arguedDateUri();

        /**
         * Retrieve a list of all available LegalDocument resources. 
         * This list consists of all resource of type LegalDocument that 
         * are stored in the local Nepomuk meta data storage and any changes 
         * made locally. Be aware that in some cases this list can get very 
         * big. Then it might be better to use libKNep directly. 
         */
        static QList<LegalDocument> allLegalDocuments();


        /**
         * \return The URI of the resource type that is used in LegalDocument instances.
         */
        static QString resourceTypeUri();

    protected:
       LegalDocument( const QString& uri, const QUrl& type );
       LegalDocument( const QUrl& uri, const QUrl& type );
    };
}

#endif
