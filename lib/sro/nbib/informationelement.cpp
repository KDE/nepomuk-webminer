/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "informationelement.h"

#include "reference.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::InformationElement::InformationElement()
  : Resource( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement") )
{
}



Nepomuk2::InformationElement::InformationElement( const InformationElement& res )
  : Resource( res )
{
}


Nepomuk2::InformationElement::InformationElement( const Nepomuk2::Resource& res )
  : Resource( res )
{
}


Nepomuk2::InformationElement::InformationElement( const QString& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement") )
{
}

Nepomuk2::InformationElement::InformationElement( const QUrl& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement") )
{
}

Nepomuk2::InformationElement::InformationElement( const QString& uri, const QUrl& type )
  : Resource( uri, type )
{
}


Nepomuk2::InformationElement::InformationElement( const QUrl& uri, const QUrl& type )
  : Resource( uri, type )
{
}

Nepomuk2::InformationElement::~InformationElement()
{
}

Nepomuk2::InformationElement& Nepomuk2::InformationElement::operator=( const InformationElement& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::InformationElement::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement");
}

QStringList Nepomuk2::InformationElement::abstracts() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#abstract") ).toStringList());
}

void Nepomuk2::InformationElement::setAbstracts( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#abstract"), Variant( value ) );
}

void Nepomuk2::InformationElement::addAbstract( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#abstract") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#abstract"), v );
}

QString Nepomuk2::InformationElement::abstract() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#abstract") ).toStringList() << QString() ).first();
}

void Nepomuk2::InformationElement::setAbstract( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#abstract"), Variant( value ) );
}

QUrl Nepomuk2::InformationElement::abstractUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#abstract");
}

QStringList Nepomuk2::InformationElement::dois() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#doi") ).toStringList());
}

void Nepomuk2::InformationElement::setDois( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#doi"), Variant( value ) );
}

void Nepomuk2::InformationElement::addDoi( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#doi") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#doi"), v );
}

QString Nepomuk2::InformationElement::doi() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#doi") ).toStringList() << QString() ).first();
}

void Nepomuk2::InformationElement::setDoi( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#doi"), Variant( value ) );
}

QUrl Nepomuk2::InformationElement::doiUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#doi");
}

QList<Nepomuk2::Resource> Nepomuk2::InformationElement::editors() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#editor") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::InformationElement::setEditors( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#editor"), Variant( value ) );
}

void Nepomuk2::InformationElement::addEditor( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#editor") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#editor"), v );
}

QUrl Nepomuk2::InformationElement::editorUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#editor");
}

QList<Nepomuk2::Reference> Nepomuk2::InformationElement::citedReferences() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Reference> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#citedReference") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Reference( *it ) );
    return rl;
}

void Nepomuk2::InformationElement::setCitedReferences( const QList<Nepomuk2::Reference>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Reference>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#citedReference"), Variant( l ) );
}

void Nepomuk2::InformationElement::addCitedReference( const Nepomuk2::Reference& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#citedReference") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#citedReference"), v );
}

QUrl Nepomuk2::InformationElement::citedReferenceUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#citedReference");
}

QList<QDateTime> Nepomuk2::InformationElement::publicationDates() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#publicationDate") ).toDateTimeList());
}

void Nepomuk2::InformationElement::setPublicationDates( const QList<QDateTime>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#publicationDate"), Variant( value ) );
}

void Nepomuk2::InformationElement::addPublicationDate( const QDateTime& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#publicationDate") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#publicationDate"), v );
}

QDateTime Nepomuk2::InformationElement::publicationDate() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#publicationDate") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk2::InformationElement::setPublicationDate( const QDateTime& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#publicationDate"), Variant( value ) );
}

QUrl Nepomuk2::InformationElement::publicationDateUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#publicationDate");
}


