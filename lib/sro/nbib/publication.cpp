/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "publication.h"

#include "series.h"
#include "event.h"
#include "reference.h"
#include "documentstatus.h"
#include "document.h"
#include "publication.h"
#include "documentpart.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Publication::Publication()
  : InformationElement( QUrl(), QUrl::fromEncoded("http://www.example.com/nbib#Publication") )
{
}



Nepomuk2::Publication::Publication( const Publication& res )
  : InformationElement( res )
{
}


Nepomuk2::Publication::Publication( const Nepomuk2::Resource& res )
  : InformationElement( res )
{
}


Nepomuk2::Publication::Publication( const QString& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.example.com/nbib#Publication") )
{
}

Nepomuk2::Publication::Publication( const QUrl& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.example.com/nbib#Publication") )
{
}

Nepomuk2::Publication::Publication( const QString& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}


Nepomuk2::Publication::Publication( const QUrl& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk2::Publication::~Publication()
{
}

Nepomuk2::Publication& Nepomuk2::Publication::operator=( const Publication& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Publication::resourceTypeUri()
{
    return QLatin1String("http://www.example.com/nbib#Publication");
}

QList<Nepomuk2::DocumentStatus> Nepomuk2::Publication::documentStatuses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<DocumentStatus> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#documentStatus") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( DocumentStatus( *it ) );
    return rl;
}

void Nepomuk2::Publication::setDocumentStatuses( const QList<Nepomuk2::DocumentStatus>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DocumentStatus>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#documentStatus"), Variant( l ) );
}

void Nepomuk2::Publication::addDocumentStatus( const Nepomuk2::DocumentStatus& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#documentStatus") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#documentStatus"), v );
}

Nepomuk2::DocumentStatus Nepomuk2::Publication::documentStatus() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return DocumentStatus( property( QUrl::fromEncoded("http://www.example.com/nbib#documentStatus") ).toResource().uri() );
}

void Nepomuk2::Publication::setDocumentStatus( const Nepomuk2::DocumentStatus& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#documentStatus"), Variant( value ) );
}

QUrl Nepomuk2::Publication::documentStatusUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#documentStatus");
}

QList<Nepomuk2::Resource> Nepomuk2::Publication::translators() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#translator") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::Publication::setTranslators( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#translator"), Variant( value ) );
}

void Nepomuk2::Publication::addTranslator( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#translator") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#translator"), v );
}

QUrl Nepomuk2::Publication::translatorUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#translator");
}

QList<Nepomuk2::Resource> Nepomuk2::Publication::contributors() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#contributor") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::Publication::setContributors( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#contributor"), Variant( value ) );
}

void Nepomuk2::Publication::addContributor( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#contributor") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#contributor"), v );
}

QUrl Nepomuk2::Publication::contributorUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#contributor");
}

QList<Nepomuk2::Resource> Nepomuk2::Publication::reviewedAuthors() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#reviewedAuthor") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::Publication::setReviewedAuthors( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#reviewedAuthor"), Variant( value ) );
}

void Nepomuk2::Publication::addReviewedAuthor( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#reviewedAuthor") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#reviewedAuthor"), v );
}

QUrl Nepomuk2::Publication::reviewedAuthorUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#reviewedAuthor");
}

QList<Nepomuk2::Resource> Nepomuk2::Publication::commenters() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#commenter") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::Publication::setCommenters( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#commenter"), Variant( value ) );
}

void Nepomuk2::Publication::addCommenter( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#commenter") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#commenter"), v );
}

QUrl Nepomuk2::Publication::commenterUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#commenter");
}

QList<Nepomuk2::Document> Nepomuk2::Publication::isPublicationOfs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Document> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#isPublicationOf") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Document( *it ) );
    return rl;
}

void Nepomuk2::Publication::setIsPublicationOfs( const QList<Nepomuk2::Document>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Document>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#isPublicationOf"), Variant( l ) );
}

void Nepomuk2::Publication::addIsPublicationOf( const Nepomuk2::Document& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#isPublicationOf") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#isPublicationOf"), v );
}

QUrl Nepomuk2::Publication::isPublicationOfUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#isPublicationOf");
}

QStringList Nepomuk2::Publication::editions() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#edition") ).toStringList());
}

void Nepomuk2::Publication::setEditions( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#edition"), Variant( value ) );
}

void Nepomuk2::Publication::addEdition( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#edition") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#edition"), v );
}

QString Nepomuk2::Publication::edition() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#edition") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setEdition( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#edition"), Variant( value ) );
}

QUrl Nepomuk2::Publication::editionUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#edition");
}

QStringList Nepomuk2::Publication::eprints() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#eprint") ).toStringList());
}

void Nepomuk2::Publication::setEprints( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#eprint"), Variant( value ) );
}

void Nepomuk2::Publication::addEprint( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#eprint") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#eprint"), v );
}

QString Nepomuk2::Publication::eprint() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#eprint") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setEprint( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#eprint"), Variant( value ) );
}

QUrl Nepomuk2::Publication::eprintUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#eprint");
}

QStringList Nepomuk2::Publication::archives() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#archive") ).toStringList());
}

void Nepomuk2::Publication::setArchives( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#archive"), Variant( value ) );
}

void Nepomuk2::Publication::addArchive( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#archive") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#archive"), v );
}

QString Nepomuk2::Publication::archive() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#archive") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setArchive( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#archive"), Variant( value ) );
}

QUrl Nepomuk2::Publication::archiveUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#archive");
}

QStringList Nepomuk2::Publication::archiveLocations() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#archiveLocation") ).toStringList());
}

void Nepomuk2::Publication::setArchiveLocations( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#archiveLocation"), Variant( value ) );
}

void Nepomuk2::Publication::addArchiveLocation( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#archiveLocation") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#archiveLocation"), v );
}

QString Nepomuk2::Publication::archiveLocation() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#archiveLocation") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setArchiveLocation( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#archiveLocation"), Variant( value ) );
}

QUrl Nepomuk2::Publication::archiveLocationUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#archiveLocation");
}

QStringList Nepomuk2::Publication::libraryCatalogs() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#libraryCatalog") ).toStringList());
}

void Nepomuk2::Publication::setLibraryCatalogs( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#libraryCatalog"), Variant( value ) );
}

void Nepomuk2::Publication::addLibraryCatalog( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#libraryCatalog") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#libraryCatalog"), v );
}

QString Nepomuk2::Publication::libraryCatalog() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#libraryCatalog") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setLibraryCatalog( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#libraryCatalog"), Variant( value ) );
}

QUrl Nepomuk2::Publication::libraryCatalogUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#libraryCatalog");
}

QList<Nepomuk2::DocumentPart> Nepomuk2::Publication::documentParts() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<DocumentPart> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#documentPart") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( DocumentPart( *it ) );
    return rl;
}

void Nepomuk2::Publication::setDocumentParts( const QList<Nepomuk2::DocumentPart>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DocumentPart>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#documentPart"), Variant( l ) );
}

void Nepomuk2::Publication::addDocumentPart( const Nepomuk2::DocumentPart& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#documentPart") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#documentPart"), v );
}

QUrl Nepomuk2::Publication::documentPartUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#documentPart");
}

QList<Nepomuk2::Reference> Nepomuk2::Publication::references() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Reference> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#reference") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Reference( *it ) );
    return rl;
}

void Nepomuk2::Publication::setReferences( const QList<Nepomuk2::Reference>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Reference>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#reference"), Variant( l ) );
}

void Nepomuk2::Publication::addReference( const Nepomuk2::Reference& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#reference") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#reference"), v );
}

QUrl Nepomuk2::Publication::referenceUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#reference");
}

QStringList Nepomuk2::Publication::publicationMethods() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#publicationMethod") ).toStringList());
}

void Nepomuk2::Publication::setPublicationMethods( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#publicationMethod"), Variant( value ) );
}

void Nepomuk2::Publication::addPublicationMethod( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#publicationMethod") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#publicationMethod"), v );
}

QString Nepomuk2::Publication::publicationMethod() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#publicationMethod") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setPublicationMethod( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#publicationMethod"), Variant( value ) );
}

QUrl Nepomuk2::Publication::publicationMethodUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#publicationMethod");
}

QStringList Nepomuk2::Publication::isbns() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#isbn") ).toStringList());
}

void Nepomuk2::Publication::setIsbns( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#isbn"), Variant( value ) );
}

void Nepomuk2::Publication::addIsbn( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#isbn") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#isbn"), v );
}

QString Nepomuk2::Publication::isbn() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#isbn") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setIsbn( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#isbn"), Variant( value ) );
}

QUrl Nepomuk2::Publication::isbnUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#isbn");
}

QStringList Nepomuk2::Publication::lccns() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#lccn") ).toStringList());
}

void Nepomuk2::Publication::setLccns( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#lccn"), Variant( value ) );
}

void Nepomuk2::Publication::addLccn( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#lccn") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#lccn"), v );
}

QString Nepomuk2::Publication::lccn() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#lccn") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setLccn( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#lccn"), Variant( value ) );
}

QUrl Nepomuk2::Publication::lccnUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#lccn");
}

QStringList Nepomuk2::Publication::mrNumbers() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#mrNumber") ).toStringList());
}

void Nepomuk2::Publication::setMrNumbers( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#mrNumber"), Variant( value ) );
}

void Nepomuk2::Publication::addMrNumber( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#mrNumber") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#mrNumber"), v );
}

QString Nepomuk2::Publication::mrNumber() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#mrNumber") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setMrNumber( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#mrNumber"), Variant( value ) );
}

QUrl Nepomuk2::Publication::mrNumberUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#mrNumber");
}

QList<qint64> Nepomuk2::Publication::numberOfPageses() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#numberOfPages") ).toInt64List());
}

void Nepomuk2::Publication::setNumberOfPageses( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#numberOfPages"), Variant( value ) );
}

void Nepomuk2::Publication::addNumberOfPages( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#numberOfPages") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#numberOfPages"), v );
}

qint64 Nepomuk2::Publication::numberOfPages() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#numberOfPages") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Publication::setNumberOfPages( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#numberOfPages"), Variant( value ) );
}

QUrl Nepomuk2::Publication::numberOfPagesUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#numberOfPages");
}

QList<qint64> Nepomuk2::Publication::numberOfVolumeses() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#numberOfVolumes") ).toInt64List());
}

void Nepomuk2::Publication::setNumberOfVolumeses( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#numberOfVolumes"), Variant( value ) );
}

void Nepomuk2::Publication::addNumberOfVolumes( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#numberOfVolumes") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#numberOfVolumes"), v );
}

qint64 Nepomuk2::Publication::numberOfVolumes() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#numberOfVolumes") ).toInt64List() << 0 ).first();
}

void Nepomuk2::Publication::setNumberOfVolumes( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#numberOfVolumes"), Variant( value ) );
}

QUrl Nepomuk2::Publication::numberOfVolumesUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#numberOfVolumes");
}

QStringList Nepomuk2::Publication::numbers() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#number") ).toStringList());
}

void Nepomuk2::Publication::setNumbers( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#number"), Variant( value ) );
}

void Nepomuk2::Publication::addNumber( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#number") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#number"), v );
}

QString Nepomuk2::Publication::number() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#number") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setNumber( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#number"), Variant( value ) );
}

QUrl Nepomuk2::Publication::numberUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#number");
}

QList<Nepomuk2::Resource> Nepomuk2::Publication::organizations() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#organization") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::Publication::setOrganizations( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#organization"), Variant( value ) );
}

void Nepomuk2::Publication::addOrganization( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#organization") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#organization"), v );
}

Nepomuk2::Resource Nepomuk2::Publication::organization() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return Resource( property( QUrl::fromEncoded("http://www.example.com/nbib#organization") ).toResource().uri() );
}

void Nepomuk2::Publication::setOrganization( const Nepomuk2::Resource& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#organization"), Variant( value ) );
}

QUrl Nepomuk2::Publication::organizationUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#organization");
}

QList<Nepomuk2::Event> Nepomuk2::Publication::events() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Event> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#event") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Event( *it ) );
    return rl;
}

void Nepomuk2::Publication::setEvents( const QList<Nepomuk2::Event>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Event>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#event"), Variant( l ) );
}

void Nepomuk2::Publication::addEvent( const Nepomuk2::Event& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#event") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#event"), v );
}

Nepomuk2::Event Nepomuk2::Publication::event() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return Event( property( QUrl::fromEncoded("http://www.example.com/nbib#event") ).toResource().uri() );
}

void Nepomuk2::Publication::setEvent( const Nepomuk2::Event& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#event"), Variant( value ) );
}

QUrl Nepomuk2::Publication::eventUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#event");
}

QStringList Nepomuk2::Publication::pubMeds() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#pubMed") ).toStringList());
}

void Nepomuk2::Publication::setPubMeds( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#pubMed"), Variant( value ) );
}

void Nepomuk2::Publication::addPubMed( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#pubMed") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#pubMed"), v );
}

QString Nepomuk2::Publication::pubMed() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#pubMed") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setPubMed( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#pubMed"), Variant( value ) );
}

QUrl Nepomuk2::Publication::pubMedUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#pubMed");
}

QList<Nepomuk2::Series> Nepomuk2::Publication::inSerieses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Series> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#inSeries") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Series( *it ) );
    return rl;
}

void Nepomuk2::Publication::setInSerieses( const QList<Nepomuk2::Series>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Series>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#inSeries"), Variant( l ) );
}

void Nepomuk2::Publication::addInSeries( const Nepomuk2::Series& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#inSeries") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#inSeries"), v );
}

Nepomuk2::Series Nepomuk2::Publication::inSeries() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return Series( property( QUrl::fromEncoded("http://www.example.com/nbib#inSeries") ).toResource().uri() );
}

void Nepomuk2::Publication::setInSeries( const Nepomuk2::Series& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#inSeries"), Variant( value ) );
}

QUrl Nepomuk2::Publication::inSeriesUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#inSeries");
}

QStringList Nepomuk2::Publication::publicationTypes() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#publicationType") ).toStringList());
}

void Nepomuk2::Publication::setPublicationTypes( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#publicationType"), Variant( value ) );
}

void Nepomuk2::Publication::addPublicationType( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#publicationType") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#publicationType"), v );
}

QString Nepomuk2::Publication::publicationType() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#publicationType") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setPublicationType( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#publicationType"), Variant( value ) );
}

QUrl Nepomuk2::Publication::publicationTypeUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#publicationType");
}

QStringList Nepomuk2::Publication::shortTitles() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#shortTitle") ).toStringList());
}

void Nepomuk2::Publication::setShortTitles( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#shortTitle"), Variant( value ) );
}

void Nepomuk2::Publication::addShortTitle( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#shortTitle") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#shortTitle"), v );
}

QString Nepomuk2::Publication::shortTitle() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#shortTitle") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setShortTitle( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#shortTitle"), Variant( value ) );
}

QUrl Nepomuk2::Publication::shortTitleUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#shortTitle");
}

QList<Nepomuk2::Publication> Nepomuk2::Publication::translationOfs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Publication> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#translationOf") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Publication( *it ) );
    return rl;
}

void Nepomuk2::Publication::setTranslationOfs( const QList<Nepomuk2::Publication>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<Publication>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#translationOf"), Variant( l ) );
}

void Nepomuk2::Publication::addTranslationOf( const Nepomuk2::Publication& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#translationOf") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#translationOf"), v );
}

Nepomuk2::Publication Nepomuk2::Publication::translationOf() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return Publication( property( QUrl::fromEncoded("http://www.example.com/nbib#translationOf") ).toResource().uri() );
}

void Nepomuk2::Publication::setTranslationOf( const Nepomuk2::Publication& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#translationOf"), Variant( value ) );
}

QUrl Nepomuk2::Publication::translationOfUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#translationOf");
}

QStringList Nepomuk2::Publication::volumes() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#volume") ).toStringList());
}

void Nepomuk2::Publication::setVolumes( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#volume"), Variant( value ) );
}

void Nepomuk2::Publication::addVolume( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#volume") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#volume"), v );
}

QString Nepomuk2::Publication::volume() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#volume") ).toStringList() << QString() ).first();
}

void Nepomuk2::Publication::setVolume( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#volume"), Variant( value ) );
}

QUrl Nepomuk2::Publication::volumeUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#volume");
}


