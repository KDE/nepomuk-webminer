/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _PUBLICATION_H_
#define _PUBLICATION_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Reference;
    class DocumentStatus;
    class Series;
    class DocumentPart;
    class Event;
    class Document;
    class Resource;
    class Publication;

}

#include "informationelement.h"


namespace Nepomuk2 {

    /**
     * A bibliographic reference resource type (article, book, paper 
     * and such) 
     */
    class  Publication : public InformationElement
    {
    public:
        /**
         * Create a new empty and invalid Publication instance
         */
        Publication();

        /**
         * Default copy constructor
         */
        Publication( const Publication& );
        Publication( const Resource& );

        /**
         * Create a new Publication instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Publication( const QString& uriOrIdentifier );

        /**
         * Create a new Publication instance representing the resource
         * referenced by \a uri.
         */
        Publication( const QUrl& uri );
        ~Publication();

        Publication& operator=( const Publication& );

        /**
         * Get property 'documentStatus'. The status of the publication 
         * of a document. 
         */
        QList<DocumentStatus> documentStatuses() const;

        /**
         * Set property 'documentStatus'. The status of the publication 
         * of a document. 
         */
        void setDocumentStatuses( const QList<DocumentStatus>& value );

        /**
         * Add a value to property 'documentStatus'. The status of the 
         * publication of a document. 
         */
        void addDocumentStatus( const DocumentStatus& value );

        /**
         * Get property 'documentStatus'. The status of the publication 
         * of a document. 
         */
        DocumentStatus documentStatus() const;

        /**
         * Set property 'documentStatus'. The status of the publication 
         * of a document. 
         */
        void setDocumentStatus( const DocumentStatus& value );

        /**
         * \return The URI of the property 'documentStatus'. 
         */
        static QUrl documentStatusUri();

        /**
         * Get property 'translator'. The translator of a Publication 
         */
        QList<Resource> translators() const;

        /**
         * Set property 'translator'. The translator of a Publication 
         */
        void setTranslators( const QList<Resource>& value );

        /**
         * Add a value to property 'translator'. The translator of a Publication 
         */
        void addTranslator( const Resource& value );

        /**
         * \return The URI of the property 'translator'. 
         */
        static QUrl translatorUri();

        /**
         * Get property 'contributor'. The contributor of a Publication 
         */
        QList<Resource> contributors() const;

        /**
         * Set property 'contributor'. The contributor of a Publication 
         */
        void setContributors( const QList<Resource>& value );

        /**
         * Add a value to property 'contributor'. The contributor of a 
         * Publication 
         */
        void addContributor( const Resource& value );

        /**
         * \return The URI of the property 'contributor'. 
         */
        static QUrl contributorUri();

        /**
         * Get property 'reviewedAuthor'. The person who reviewed a Publication 
         */
        QList<Resource> reviewedAuthors() const;

        /**
         * Set property 'reviewedAuthor'. The person who reviewed a Publication 
         */
        void setReviewedAuthors( const QList<Resource>& value );

        /**
         * Add a value to property 'reviewedAuthor'. The person who reviewed 
         * a Publication 
         */
        void addReviewedAuthor( const Resource& value );

        /**
         * \return The URI of the property 'reviewedAuthor'. 
         */
        static QUrl reviewedAuthorUri();

        /**
         * Get property 'commenter'. The commenter of a Publication. 
         * Mostly used for Blogs, Forum posts 
         */
        QList<Resource> commenters() const;

        /**
         * Set property 'commenter'. The commenter of a Publication. 
         * Mostly used for Blogs, Forum posts 
         */
        void setCommenters( const QList<Resource>& value );

        /**
         * Add a value to property 'commenter'. The commenter of a Publication. 
         * Mostly used for Blogs, Forum posts 
         */
        void addCommenter( const Resource& value );

        /**
         * \return The URI of the property 'commenter'. 
         */
        static QUrl commenterUri();

        /**
         * Get property 'isPublicationOf'. Links a publication to its 
         * document. 
         */
        QList<Document> isPublicationOfs() const;

        /**
         * Set property 'isPublicationOf'. Links a publication to its 
         * document. 
         */
        void setIsPublicationOfs( const QList<Document>& value );

        /**
         * Add a value to property 'isPublicationOf'. Links a publication 
         * to its document. 
         */
        void addIsPublicationOf( const Document& value );

        /**
         * \return The URI of the property 'isPublicationOf'. 
         */
        static QUrl isPublicationOfUri();

        /**
         * Get property 'edition'. The edition of a book, long form (such 
         * as 'first' or 'second'). 
         */
        QStringList editions() const;

        /**
         * Set property 'edition'. The edition of a book, long form (such 
         * as 'first' or 'second'). 
         */
        void setEditions( const QStringList& value );

        /**
         * Add a value to property 'edition'. The edition of a book, long 
         * form (such as 'first' or 'second'). 
         */
        void addEdition( const QString& value );

        /**
         * Get property 'edition'. The edition of a book, long form (such 
         * as 'first' or 'second'). 
         */
        QString edition() const;

        /**
         * Set property 'edition'. The edition of a book, long form (such 
         * as 'first' or 'second'). 
         */
        void setEdition( const QString& value );

        /**
         * \return The URI of the property 'edition'. 
         */
        static QUrl editionUri();

        /**
         * Get property 'eprint'. A specification of an electronic publication, 
         * often a preprint or a technical report. 
         */
        QStringList eprints() const;

        /**
         * Set property 'eprint'. A specification of an electronic publication, 
         * often a preprint or a technical report. 
         */
        void setEprints( const QStringList& value );

        /**
         * Add a value to property 'eprint'. A specification of an electronic 
         * publication, often a preprint or a technical report. 
         */
        void addEprint( const QString& value );

        /**
         * Get property 'eprint'. A specification of an electronic publication, 
         * often a preprint or a technical report. 
         */
        QString eprint() const;

        /**
         * Set property 'eprint'. A specification of an electronic publication, 
         * often a preprint or a technical report. 
         */
        void setEprint( const QString& value );

        /**
         * \return The URI of the property 'eprint'. 
         */
        static QUrl eprintUri();

        /**
         * Get property 'archive'. The archive where the publication 
         * can be found, see also nbib::archivelocation 
         */
        QStringList archives() const;

        /**
         * Set property 'archive'. The archive where the publication 
         * can be found, see also nbib::archivelocation 
         */
        void setArchives( const QStringList& value );

        /**
         * Add a value to property 'archive'. The archive where the publication 
         * can be found, see also nbib::archivelocation 
         */
        void addArchive( const QString& value );

        /**
         * Get property 'archive'. The archive where the publication 
         * can be found, see also nbib::archivelocation 
         */
        QString archive() const;

        /**
         * Set property 'archive'. The archive where the publication 
         * can be found, see also nbib::archivelocation 
         */
        void setArchive( const QString& value );

        /**
         * \return The URI of the property 'archive'. 
         */
        static QUrl archiveUri();

        /**
         * Get property 'archiveLocation'. The location where the publication 
         * can be found in the archive specified via nbib::archive 
         */
        QStringList archiveLocations() const;

        /**
         * Set property 'archiveLocation'. The location where the publication 
         * can be found in the archive specified via nbib::archive 
         */
        void setArchiveLocations( const QStringList& value );

        /**
         * Add a value to property 'archiveLocation'. The location where 
         * the publication can be found in the archive specified via nbib::archive 
         */
        void addArchiveLocation( const QString& value );

        /**
         * Get property 'archiveLocation'. The location where the publication 
         * can be found in the archive specified via nbib::archive 
         */
        QString archiveLocation() const;

        /**
         * Set property 'archiveLocation'. The location where the publication 
         * can be found in the archive specified via nbib::archive 
         */
        void setArchiveLocation( const QString& value );

        /**
         * \return The URI of the property 'archiveLocation'. 
         */
        static QUrl archiveLocationUri();

        /**
         * Get property 'libraryCatalog'. The library catalog information 
         * where the publication can be found 
         */
        QStringList libraryCatalogs() const;

        /**
         * Set property 'libraryCatalog'. The library catalog information 
         * where the publication can be found 
         */
        void setLibraryCatalogs( const QStringList& value );

        /**
         * Add a value to property 'libraryCatalog'. The library catalog 
         * information where the publication can be found 
         */
        void addLibraryCatalog( const QString& value );

        /**
         * Get property 'libraryCatalog'. The library catalog information 
         * where the publication can be found 
         */
        QString libraryCatalog() const;

        /**
         * Set property 'libraryCatalog'. The library catalog information 
         * where the publication can be found 
         */
        void setLibraryCatalog( const QString& value );

        /**
         * \return The URI of the property 'libraryCatalog'. 
         */
        static QUrl libraryCatalogUri();

        /**
         * Get property 'documentPart'. Connects a publication to a part 
         * of it (for example a chapter or quoted passage) 
         */
        QList<DocumentPart> documentParts() const;

        /**
         * Set property 'documentPart'. Connects a publication to a part 
         * of it (for example a chapter or quoted passage) 
         */
        void setDocumentParts( const QList<DocumentPart>& value );

        /**
         * Add a value to property 'documentPart'. Connects a publication 
         * to a part of it (for example a chapter or quoted passage) 
         */
        void addDocumentPart( const DocumentPart& value );

        /**
         * \return The URI of the property 'documentPart'. 
         */
        static QUrl documentPartUri();

        /**
         * Get property 'reference'. All references of a publication. 
         * Used to quickly get all different references (different quotes, 
         * chapters etc) 
         */
        QList<Reference> references() const;

        /**
         * Set property 'reference'. All references of a publication. 
         * Used to quickly get all different references (different quotes, 
         * chapters etc) 
         */
        void setReferences( const QList<Reference>& value );

        /**
         * Add a value to property 'reference'. All references of a publication. 
         * Used to quickly get all different references (different quotes, 
         * chapters etc) 
         */
        void addReference( const Reference& value );

        /**
         * \return The URI of the property 'reference'. 
         */
        static QUrl referenceUri();

        /**
         * Get property 'publicationMethod'. How it was published, if 
         * the publishing method is nonstandard. 
         */
        QStringList publicationMethods() const;

        /**
         * Set property 'publicationMethod'. How it was published, if 
         * the publishing method is nonstandard. 
         */
        void setPublicationMethods( const QStringList& value );

        /**
         * Add a value to property 'publicationMethod'. How it was published, 
         * if the publishing method is nonstandard. 
         */
        void addPublicationMethod( const QString& value );

        /**
         * Get property 'publicationMethod'. How it was published, if 
         * the publishing method is nonstandard. 
         */
        QString publicationMethod() const;

        /**
         * Set property 'publicationMethod'. How it was published, if 
         * the publishing method is nonstandard. 
         */
        void setPublicationMethod( const QString& value );

        /**
         * \return The URI of the property 'publicationMethod'. 
         */
        static QUrl publicationMethodUri();

        /**
         * Get property 'isbn'. The International Standard Book Number. 
         */
        QStringList isbns() const;

        /**
         * Set property 'isbn'. The International Standard Book Number. 
         */
        void setIsbns( const QStringList& value );

        /**
         * Add a value to property 'isbn'. The International Standard 
         * Book Number. 
         */
        void addIsbn( const QString& value );

        /**
         * Get property 'isbn'. The International Standard Book Number. 
         */
        QString isbn() const;

        /**
         * Set property 'isbn'. The International Standard Book Number. 
         */
        void setIsbn( const QString& value );

        /**
         * \return The URI of the property 'isbn'. 
         */
        static QUrl isbnUri();

        /**
         * Get property 'lccn'. The Library of Congress Call Number. 
         */
        QStringList lccns() const;

        /**
         * Set property 'lccn'. The Library of Congress Call Number. 
         */
        void setLccns( const QStringList& value );

        /**
         * Add a value to property 'lccn'. The Library of Congress Call 
         * Number. 
         */
        void addLccn( const QString& value );

        /**
         * Get property 'lccn'. The Library of Congress Call Number. 
         */
        QString lccn() const;

        /**
         * Set property 'lccn'. The Library of Congress Call Number. 
         */
        void setLccn( const QString& value );

        /**
         * \return The URI of the property 'lccn'. 
         */
        static QUrl lccnUri();

        /**
         * Get property 'mrNumber'. The Mathematical Reviews number. 
         */
        QStringList mrNumbers() const;

        /**
         * Set property 'mrNumber'. The Mathematical Reviews number. 
         */
        void setMrNumbers( const QStringList& value );

        /**
         * Add a value to property 'mrNumber'. The Mathematical Reviews 
         * number. 
         */
        void addMrNumber( const QString& value );

        /**
         * Get property 'mrNumber'. The Mathematical Reviews number. 
         */
        QString mrNumber() const;

        /**
         * Set property 'mrNumber'. The Mathematical Reviews number. 
         */
        void setMrNumber( const QString& value );

        /**
         * \return The URI of the property 'mrNumber'. 
         */
        static QUrl mrNumberUri();

        /**
         * Get property 'numberOfPages'. The number of pages contained 
         * in the publication. 
         */
        QList<qint64> numberOfPageses() const;

        /**
         * Set property 'numberOfPages'. The number of pages contained 
         * in the publication. 
         */
        void setNumberOfPageses( const QList<qint64>& value );

        /**
         * Add a value to property 'numberOfPages'. The number of pages 
         * contained in the publication. 
         */
        void addNumberOfPages( const qint64& value );

        /**
         * Get property 'numberOfPages'. The number of pages contained 
         * in the publication. 
         */
        qint64 numberOfPages() const;

        /**
         * Set property 'numberOfPages'. The number of pages contained 
         * in the publication. 
         */
        void setNumberOfPages( const qint64& value );

        /**
         * \return The URI of the property 'numberOfPages'. 
         */
        static QUrl numberOfPagesUri();

        /**
         * Get property 'numberOfVolumes'. The number of volumes that 
         * exists for a publication. 
         */
        QList<qint64> numberOfVolumeses() const;

        /**
         * Set property 'numberOfVolumes'. The number of volumes that 
         * exists for a publication. 
         */
        void setNumberOfVolumeses( const QList<qint64>& value );

        /**
         * Add a value to property 'numberOfVolumes'. The number of volumes 
         * that exists for a publication. 
         */
        void addNumberOfVolumes( const qint64& value );

        /**
         * Get property 'numberOfVolumes'. The number of volumes that 
         * exists for a publication. 
         */
        qint64 numberOfVolumes() const;

        /**
         * Set property 'numberOfVolumes'. The number of volumes that 
         * exists for a publication. 
         */
        void setNumberOfVolumes( const qint64& value );

        /**
         * \return The URI of the property 'numberOfVolumes'. 
         */
        static QUrl numberOfVolumesUri();

        /**
         * Get property 'number'. The '(issue) number' of a journal, magazine, 
         * or tech-report, pr the publicl aw Number of a Statute or the number 
         * of a patent etc 
         */
        QStringList numbers() const;

        /**
         * Set property 'number'. The '(issue) number' of a journal, magazine, 
         * or tech-report, pr the publicl aw Number of a Statute or the number 
         * of a patent etc 
         */
        void setNumbers( const QStringList& value );

        /**
         * Add a value to property 'number'. The '(issue) number' of a journal, 
         * magazine, or tech-report, pr the publicl aw Number of a Statute 
         * or the number of a patent etc 
         */
        void addNumber( const QString& value );

        /**
         * Get property 'number'. The '(issue) number' of a journal, magazine, 
         * or tech-report, pr the publicl aw Number of a Statute or the number 
         * of a patent etc 
         */
        QString number() const;

        /**
         * Set property 'number'. The '(issue) number' of a journal, magazine, 
         * or tech-report, pr the publicl aw Number of a Statute or the number 
         * of a patent etc 
         */
        void setNumber( const QString& value );

        /**
         * \return The URI of the property 'number'. 
         */
        static QUrl numberUri();

        /**
         * Get property 'organization'. The organization that held the 
         * conference where the proceedings comes from or that is otherwise 
         * responsible for the publication 
         */
        QList<Resource> organizations() const;

        /**
         * Set property 'organization'. The organization that held the 
         * conference where the proceedings comes from or that is otherwise 
         * responsible for the publication 
         */
        void setOrganizations( const QList<Resource>& value );

        /**
         * Add a value to property 'organization'. The organization that 
         * held the conference where the proceedings comes from or that 
         * is otherwise responsible for the publication 
         */
        void addOrganization( const Resource& value );

        /**
         * Get property 'organization'. The organization that held the 
         * conference where the proceedings comes from or that is otherwise 
         * responsible for the publication 
         */
        Resource organization() const;

        /**
         * Set property 'organization'. The organization that held the 
         * conference where the proceedings comes from or that is otherwise 
         * responsible for the publication 
         */
        void setOrganization( const Resource& value );

        /**
         * \return The URI of the property 'organization'. 
         */
        static QUrl organizationUri();

        /**
         * Get property 'event'. The event this publication was shown, 
         * represented, published etc 
         */
        QList<Event> events() const;

        /**
         * Set property 'event'. The event this publication was shown, 
         * represented, published etc 
         */
        void setEvents( const QList<Event>& value );

        /**
         * Add a value to property 'event'. The event this publication 
         * was shown, represented, published etc 
         */
        void addEvent( const Event& value );

        /**
         * Get property 'event'. The event this publication was shown, 
         * represented, published etc 
         */
        Event event() const;

        /**
         * Set property 'event'. The event this publication was shown, 
         * represented, published etc 
         */
        void setEvent( const Event& value );

        /**
         * \return The URI of the property 'event'. 
         */
        static QUrl eventUri();

        /**
         * Get property 'pubMed'. The PubMed ID. 
         */
        QStringList pubMeds() const;

        /**
         * Set property 'pubMed'. The PubMed ID. 
         */
        void setPubMeds( const QStringList& value );

        /**
         * Add a value to property 'pubMed'. The PubMed ID. 
         */
        void addPubMed( const QString& value );

        /**
         * Get property 'pubMed'. The PubMed ID. 
         */
        QString pubMed() const;

        /**
         * Set property 'pubMed'. The PubMed ID. 
         */
        void setPubMed( const QString& value );

        /**
         * \return The URI of the property 'pubMed'. 
         */
        static QUrl pubMedUri();

        /**
         * Get property 'inSeries'. The series the publication was published 
         * in. (for example a series of books, a series of lecture notes, 
         * a journal series 
         */
        QList<Series> inSerieses() const;

        /**
         * Set property 'inSeries'. The series the publication was published 
         * in. (for example a series of books, a series of lecture notes, 
         * a journal series 
         */
        void setInSerieses( const QList<Series>& value );

        /**
         * Add a value to property 'inSeries'. The series the publication 
         * was published in. (for example a series of books, a series of 
         * lecture notes, a journal series 
         */
        void addInSeries( const Series& value );

        /**
         * Get property 'inSeries'. The series the publication was published 
         * in. (for example a series of books, a series of lecture notes, 
         * a journal series 
         */
        Series inSeries() const;

        /**
         * Set property 'inSeries'. The series the publication was published 
         * in. (for example a series of books, a series of lecture notes, 
         * a journal series 
         */
        void setInSeries( const Series& value );

        /**
         * \return The URI of the property 'inSeries'. 
         */
        static QUrl inSeriesUri();

        /**
         * Get property 'publicationType'. The type of tech-report or 
         * other kind of Publication, for example, 'Research Note'. 
         */
        QStringList publicationTypes() const;

        /**
         * Set property 'publicationType'. The type of tech-report or 
         * other kind of Publication, for example, 'Research Note'. 
         */
        void setPublicationTypes( const QStringList& value );

        /**
         * Add a value to property 'publicationType'. The type of tech-report 
         * or other kind of Publication, for example, 'Research Note'. 
         */
        void addPublicationType( const QString& value );

        /**
         * Get property 'publicationType'. The type of tech-report or 
         * other kind of Publication, for example, 'Research Note'. 
         */
        QString publicationType() const;

        /**
         * Set property 'publicationType'. The type of tech-report or 
         * other kind of Publication, for example, 'Research Note'. 
         */
        void setPublicationType( const QString& value );

        /**
         * \return The URI of the property 'publicationType'. 
         */
        static QUrl publicationTypeUri();

        /**
         * Get property 'shortTitle'. The short version of the title 
         */
        QStringList shortTitles() const;

        /**
         * Set property 'shortTitle'. The short version of the title 
         */
        void setShortTitles( const QStringList& value );

        /**
         * Add a value to property 'shortTitle'. The short version of the 
         * title 
         */
        void addShortTitle( const QString& value );

        /**
         * Get property 'shortTitle'. The short version of the title 
         */
        QString shortTitle() const;

        /**
         * Set property 'shortTitle'. The short version of the title 
         */
        void setShortTitle( const QString& value );

        /**
         * \return The URI of the property 'shortTitle'. 
         */
        static QUrl shortTitleUri();

        /**
         * Get property 'translationOf'. Relates a translated document 
         * to the original document. 
         */
        QList<Publication> translationOfs() const;

        /**
         * Set property 'translationOf'. Relates a translated document 
         * to the original document. 
         */
        void setTranslationOfs( const QList<Publication>& value );

        /**
         * Add a value to property 'translationOf'. Relates a translated 
         * document to the original document. 
         */
        void addTranslationOf( const Publication& value );

        /**
         * Get property 'translationOf'. Relates a translated document 
         * to the original document. 
         */
        Publication translationOf() const;

        /**
         * Set property 'translationOf'. Relates a translated document 
         * to the original document. 
         */
        void setTranslationOf( const Publication& value );

        /**
         * \return The URI of the property 'translationOf'. 
         */
        static QUrl translationOfUri();

        /**
         * Get property 'volume'. The volume of a journal or multi-volume 
         * book. 
         */
        QStringList volumes() const;

        /**
         * Set property 'volume'. The volume of a journal or multi-volume 
         * book. 
         */
        void setVolumes( const QStringList& value );

        /**
         * Add a value to property 'volume'. The volume of a journal or multi-volume 
         * book. 
         */
        void addVolume( const QString& value );

        /**
         * Get property 'volume'. The volume of a journal or multi-volume 
         * book. 
         */
        QString volume() const;

        /**
         * Set property 'volume'. The volume of a journal or multi-volume 
         * book. 
         */
        void setVolume( const QString& value );

        /**
         * \return The URI of the property 'volume'. 
         */
        static QUrl volumeUri();

        /**
         * Get all resources that have this resource set as property 'publishedAs'. 
         * Links a document to its publication information. \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Document> publishedAsOf() const;

        /**
         * Get all resources that have this resource set as property 'seriesOf'. 
         * The publication this series belongs to \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Series> seriesOfOf() const;

        /**
         * Get all resources that have this resource set as property 'translationOf'. 
         * Relates a translated document to the original document. \sa 
         * ResourceManager::allResourcesWithProperty 
         */
        QList<Publication> translationOfOf() const;

        /**
         * Retrieve a list of all available Publication resources. This 
         * list consists of all resource of type Publication that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Publication> allPublications();


        /**
         * \return The URI of the resource type that is used in Publication instances.
         */
        static QString resourceTypeUri();

    protected:
       Publication( const QString& uri, const QUrl& type );
       Publication( const QUrl& uri, const QUrl& type );
    };
}

#endif
