/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "legalcasedocument.h"

#include "courtreporter.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::LegalCaseDocument::LegalCaseDocument()
  : LegalDocument( QUrl(), QUrl::fromEncoded("http://www.example.com/nbib#LegalCaseDocument") )
{
}



Nepomuk2::LegalCaseDocument::LegalCaseDocument( const LegalCaseDocument& res )
  : LegalDocument( res )
{
}


Nepomuk2::LegalCaseDocument::LegalCaseDocument( const Nepomuk2::Resource& res )
  : LegalDocument( res )
{
}


Nepomuk2::LegalCaseDocument::LegalCaseDocument( const QString& uri )
  : LegalDocument( uri, QUrl::fromEncoded("http://www.example.com/nbib#LegalCaseDocument") )
{
}

Nepomuk2::LegalCaseDocument::LegalCaseDocument( const QUrl& uri )
  : LegalDocument( uri, QUrl::fromEncoded("http://www.example.com/nbib#LegalCaseDocument") )
{
}

Nepomuk2::LegalCaseDocument::LegalCaseDocument( const QString& uri, const QUrl& type )
  : LegalDocument( uri, type )
{
}


Nepomuk2::LegalCaseDocument::LegalCaseDocument( const QUrl& uri, const QUrl& type )
  : LegalDocument( uri, type )
{
}

Nepomuk2::LegalCaseDocument::~LegalCaseDocument()
{
}

Nepomuk2::LegalCaseDocument& Nepomuk2::LegalCaseDocument::operator=( const LegalCaseDocument& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::LegalCaseDocument::resourceTypeUri()
{
    return QLatin1String("http://www.example.com/nbib#LegalCaseDocument");
}

QList<Nepomuk2::CourtReporter> Nepomuk2::LegalCaseDocument::courtReporters() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<CourtReporter> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#courtReporter") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( CourtReporter( *it ) );
    return rl;
}

void Nepomuk2::LegalCaseDocument::setCourtReporters( const QList<Nepomuk2::CourtReporter>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<CourtReporter>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#courtReporter"), Variant( l ) );
}

void Nepomuk2::LegalCaseDocument::addCourtReporter( const Nepomuk2::CourtReporter& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#courtReporter") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#courtReporter"), v );
}

Nepomuk2::CourtReporter Nepomuk2::LegalCaseDocument::courtReporter() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return CourtReporter( property( QUrl::fromEncoded("http://www.example.com/nbib#courtReporter") ).toResource().uri() );
}

void Nepomuk2::LegalCaseDocument::setCourtReporter( const Nepomuk2::CourtReporter& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#courtReporter"), Variant( value ) );
}

QUrl Nepomuk2::LegalCaseDocument::courtReporterUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#courtReporter");
}


