/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _SERIES_H_
#define _SERIES_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Publication;

}

#include "informationelement.h"


namespace Nepomuk2 {

    /**
     * Superclass to represent a series of some published data. (Book 
     * Series, Journal with several issues etc) 
     */
    class  Series : public InformationElement
    {
    public:
        /**
         * Create a new empty and invalid Series instance
         */
        Series();

        /**
         * Default copy constructor
         */
        Series( const Series& );
        Series( const Resource& );

        /**
         * Create a new Series instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Series( const QString& uriOrIdentifier );

        /**
         * Create a new Series instance representing the resource
         * referenced by \a uri.
         */
        Series( const QUrl& uri );
        ~Series();

        Series& operator=( const Series& );

        /**
         * Get property 'issn'. The International Standard Serial Number. 
         * Used to identify a series of publications. 
         */
        QStringList issns() const;

        /**
         * Set property 'issn'. The International Standard Serial Number. 
         * Used to identify a series of publications. 
         */
        void setIssns( const QStringList& value );

        /**
         * Add a value to property 'issn'. The International Standard 
         * Serial Number. Used to identify a series of publications. 
         */
        void addIssn( const QString& value );

        /**
         * Get property 'issn'. The International Standard Serial Number. 
         * Used to identify a series of publications. 
         */
        QString issn() const;

        /**
         * Set property 'issn'. The International Standard Serial Number. 
         * Used to identify a series of publications. 
         */
        void setIssn( const QString& value );

        /**
         * \return The URI of the property 'issn'. 
         */
        static QUrl issnUri();

        /**
         * Get property 'seriesOf'. The publication this series belongs 
         * to 
         */
        QList<Publication> seriesOfs() const;

        /**
         * Set property 'seriesOf'. The publication this series belongs 
         * to 
         */
        void setSeriesOfs( const QList<Publication>& value );

        /**
         * Add a value to property 'seriesOf'. The publication this series 
         * belongs to 
         */
        void addSeriesOf( const Publication& value );

        /**
         * \return The URI of the property 'seriesOf'. 
         */
        static QUrl seriesOfUri();

        /**
         * Get all resources that have this resource set as property 'inSeries'. 
         * The series the publication was published in. (for example a 
         * series of books, a series of lecture notes, a journal series 
         * \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Publication> inSeriesOf() const;

        /**
         * Retrieve a list of all available Series resources. This list 
         * consists of all resource of type Series that are stored in the 
         * local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Series> allSeriess();


        /**
         * \return The URI of the resource type that is used in Series instances.
         */
        static QString resourceTypeUri();

    protected:
       Series( const QString& uri, const QUrl& type );
       Series( const QUrl& uri, const QUrl& type );
    };
}

#endif
