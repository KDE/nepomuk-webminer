/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _DECISION_H_
#define _DECISION_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Decision;

}

#include "legalcasedocument.h"


namespace Nepomuk2 {

    /**
     * A document containing an authoritative determination (as 
     * a decree or judgment) made after consideration of facts or law. 
     */
    class  Decision : public LegalCaseDocument
    {
    public:
        /**
         * Create a new empty and invalid Decision instance
         */
        Decision();

        /**
         * Default copy constructor
         */
        Decision( const Decision& );
        Decision( const Resource& );

        /**
         * Create a new Decision instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Decision( const QString& uriOrIdentifier );

        /**
         * Create a new Decision instance representing the resource
         * referenced by \a uri.
         */
        Decision( const QUrl& uri );
        ~Decision();

        Decision& operator=( const Decision& );

        /**
         * Get property 'affirmedBy'. A legal decision that affirms a 
         * ruling. 
         */
        QList<Decision> affirmedBys() const;

        /**
         * Set property 'affirmedBy'. A legal decision that affirms a 
         * ruling. 
         */
        void setAffirmedBys( const QList<Decision>& value );

        /**
         * Add a value to property 'affirmedBy'. A legal decision that 
         * affirms a ruling. 
         */
        void addAffirmedBy( const Decision& value );

        /**
         * \return The URI of the property 'affirmedBy'. 
         */
        static QUrl affirmedByUri();

        /**
         * Get all resources that have this resource set as property 'affirmedBy'. 
         * A legal decision that affirms a ruling. \sa ResourceManager::allResourcesWithProperty 
         */
        QList<Decision> affirmedByOf() const;

        /**
         * Retrieve a list of all available Decision resources. This list 
         * consists of all resource of type Decision that are stored in 
         * the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Decision> allDecisions();


        /**
         * \return The URI of the resource type that is used in Decision instances.
         */
        static QString resourceTypeUri();

    protected:
       Decision( const QString& uri, const QUrl& type );
       Decision( const QUrl& uri, const QUrl& type );
    };
}

#endif
