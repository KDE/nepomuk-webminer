/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _REFERENCE_H_
#define _REFERENCE_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class InformationElement;
    class DocumentPart;
    class Publication;

}

#include "informationelement.h"


namespace Nepomuk2 {

    /**
     * A bibliographic reference 
     */
    class  Reference : public InformationElement
    {
    public:
        /**
         * Create a new empty and invalid Reference instance
         */
        Reference();

        /**
         * Default copy constructor
         */
        Reference( const Reference& );
        Reference( const Resource& );

        /**
         * Create a new Reference instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Reference( const QString& uriOrIdentifier );

        /**
         * Create a new Reference instance representing the resource
         * referenced by \a uri.
         */
        Reference( const QUrl& uri );
        ~Reference();

        Reference& operator=( const Reference& );

        /**
         * Get property 'citeKey'. Used to identify the reference. 
         */
        QStringList citeKeys() const;

        /**
         * Set property 'citeKey'. Used to identify the reference. 
         */
        void setCiteKeys( const QStringList& value );

        /**
         * Add a value to property 'citeKey'. Used to identify the reference. 
         */
        void addCiteKey( const QString& value );

        /**
         * Get property 'citeKey'. Used to identify the reference. 
         */
        QString citeKey() const;

        /**
         * Set property 'citeKey'. Used to identify the reference. 
         */
        void setCiteKey( const QString& value );

        /**
         * \return The URI of the property 'citeKey'. 
         */
        static QUrl citeKeyUri();

        /**
         * Get property 'referencedPart'. The specific part of the document 
         * of a reference. Used to reference a chapter or quote a small portion 
         * of a publication 
         */
        QList<DocumentPart> referencedParts() const;

        /**
         * Set property 'referencedPart'. The specific part of the document 
         * of a reference. Used to reference a chapter or quote a small portion 
         * of a publication 
         */
        void setReferencedParts( const QList<DocumentPart>& value );

        /**
         * Add a value to property 'referencedPart'. The specific part 
         * of the document of a reference. Used to reference a chapter or 
         * quote a small portion of a publication 
         */
        void addReferencedPart( const DocumentPart& value );

        /**
         * Get property 'referencedPart'. The specific part of the document 
         * of a reference. Used to reference a chapter or quote a small portion 
         * of a publication 
         */
        DocumentPart referencedPart() const;

        /**
         * Set property 'referencedPart'. The specific part of the document 
         * of a reference. Used to reference a chapter or quote a small portion 
         * of a publication 
         */
        void setReferencedPart( const DocumentPart& value );

        /**
         * \return The URI of the property 'referencedPart'. 
         */
        static QUrl referencedPartUri();

        /**
         * Get property 'publication'. The publication used for this 
         * reference 
         */
        QList<Publication> publications() const;

        /**
         * Set property 'publication'. The publication used for this 
         * reference 
         */
        void setPublications( const QList<Publication>& value );

        /**
         * Add a value to property 'publication'. The publication used 
         * for this reference 
         */
        void addPublication( const Publication& value );

        /**
         * Get property 'publication'. The publication used for this 
         * reference 
         */
        Publication publication() const;

        /**
         * Set property 'publication'. The publication used for this 
         * reference 
         */
        void setPublication( const Publication& value );

        /**
         * \return The URI of the property 'publication'. 
         */
        static QUrl publicationUri();

        /**
         * Get property 'pages'. Page numbers, separated either by commas 
         * or double-hyphens. 
         */
        QStringList pageses() const;

        /**
         * Set property 'pages'. Page numbers, separated either by commas 
         * or double-hyphens. 
         */
        void setPageses( const QStringList& value );

        /**
         * Add a value to property 'pages'. Page numbers, separated either 
         * by commas or double-hyphens. 
         */
        void addPages( const QString& value );

        /**
         * Get property 'pages'. Page numbers, separated either by commas 
         * or double-hyphens. 
         */
        QString pages() const;

        /**
         * Set property 'pages'. Page numbers, separated either by commas 
         * or double-hyphens. 
         */
        void setPages( const QString& value );

        /**
         * \return The URI of the property 'pages'. 
         */
        static QUrl pagesUri();

        /**
         * Get all resources that have this resource set as property 'citedReference'. 
         * Links all cited references from one publication. Good way to 
         * find new sources to read \sa ResourceManager::allResourcesWithProperty 
         */
        QList<InformationElement> citedReferenceOf() const;

        /**
         * Retrieve a list of all available Reference resources. This 
         * list consists of all resource of type Reference that are stored 
         * in the local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Reference> allReferences();


        /**
         * \return The URI of the resource type that is used in Reference instances.
         */
        static QString resourceTypeUri();

    protected:
       Reference( const QString& uri, const QUrl& type );
       Reference( const QUrl& uri, const QUrl& type );
    };
}

#endif
