/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _PATENT_H_
#define _PATENT_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Resource;

}

#include "publication.h"


namespace Nepomuk2 {

    /**
     * A patent. 
     */
    class  Patent : public Publication
    {
    public:
        /**
         * Create a new empty and invalid Patent instance
         */
        Patent();

        /**
         * Default copy constructor
         */
        Patent( const Patent& );
        Patent( const Resource& );

        /**
         * Create a new Patent instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        Patent( const QString& uriOrIdentifier );

        /**
         * Create a new Patent instance representing the resource
         * referenced by \a uri.
         */
        Patent( const QUrl& uri );
        ~Patent();

        Patent& operator=( const Patent& );

        /**
         * Get property 'attorneyAgent'. A attorney agent related to 
         * a patent 
         */
        QList<Resource> attorneyAgents() const;

        /**
         * Set property 'attorneyAgent'. A attorney agent related to 
         * a patent 
         */
        void setAttorneyAgents( const QList<Resource>& value );

        /**
         * Add a value to property 'attorneyAgent'. A attorney agent related 
         * to a patent 
         */
        void addAttorneyAgent( const Resource& value );

        /**
         * \return The URI of the property 'attorneyAgent'. 
         */
        static QUrl attorneyAgentUri();

        /**
         * Get property 'assignee'. The assignee of an patent 
         */
        QList<Resource> assignees() const;

        /**
         * Set property 'assignee'. The assignee of an patent 
         */
        void setAssignees( const QList<Resource>& value );

        /**
         * Add a value to property 'assignee'. The assignee of an patent 
         */
        void addAssignee( const Resource& value );

        /**
         * \return The URI of the property 'assignee'. 
         */
        static QUrl assigneeUri();

        /**
         * Get property 'applicationNumber'. The application number 
         * of a patent 
         */
        QStringList applicationNumbers() const;

        /**
         * Set property 'applicationNumber'. The application number 
         * of a patent 
         */
        void setApplicationNumbers( const QStringList& value );

        /**
         * Add a value to property 'applicationNumber'. The application 
         * number of a patent 
         */
        void addApplicationNumber( const QString& value );

        /**
         * Get property 'applicationNumber'. The application number 
         * of a patent 
         */
        QString applicationNumber() const;

        /**
         * Set property 'applicationNumber'. The application number 
         * of a patent 
         */
        void setApplicationNumber( const QString& value );

        /**
         * \return The URI of the property 'applicationNumber'. 
         */
        static QUrl applicationNumberUri();

        /**
         * Get property 'priorityNumbers'. The priority number of a patent 
         */
        QStringList priorityNumberses() const;

        /**
         * Set property 'priorityNumbers'. The priority number of a patent 
         */
        void setPriorityNumberses( const QStringList& value );

        /**
         * Add a value to property 'priorityNumbers'. The priority number 
         * of a patent 
         */
        void addPriorityNumbers( const QString& value );

        /**
         * \return The URI of the property 'priorityNumbers'. 
         */
        static QUrl priorityNumbersUri();

        /**
         * Get property 'filingDate'. The date when the patent was filed, 
         * the issue date is the same as the publication date 
         */
        QList<QDateTime> filingDates() const;

        /**
         * Set property 'filingDate'. The date when the patent was filed, 
         * the issue date is the same as the publication date 
         */
        void setFilingDates( const QList<QDateTime>& value );

        /**
         * Add a value to property 'filingDate'. The date when the patent 
         * was filed, the issue date is the same as the publication date 
         */
        void addFilingDate( const QDateTime& value );

        /**
         * Get property 'filingDate'. The date when the patent was filed, 
         * the issue date is the same as the publication date 
         */
        QDateTime filingDate() const;

        /**
         * Set property 'filingDate'. The date when the patent was filed, 
         * the issue date is the same as the publication date 
         */
        void setFilingDate( const QDateTime& value );

        /**
         * \return The URI of the property 'filingDate'. 
         */
        static QUrl filingDateUri();

        /**
         * Get property 'patentReferences'. The references for this 
         * patent 
         */
        QStringList patentReferenceses() const;

        /**
         * Set property 'patentReferences'. The references for this 
         * patent 
         */
        void setPatentReferenceses( const QStringList& value );

        /**
         * Add a value to property 'patentReferences'. The references 
         * for this patent 
         */
        void addPatentReferences( const QString& value );

        /**
         * \return The URI of the property 'patentReferences'. 
         */
        static QUrl patentReferencesUri();

        /**
         * Get property 'legalStatus'. The legal status of this patent 
         */
        QStringList legalStatuses() const;

        /**
         * Set property 'legalStatus'. The legal status of this patent 
         */
        void setLegalStatuses( const QStringList& value );

        /**
         * Add a value to property 'legalStatus'. The legal status of this 
         * patent 
         */
        void addLegalStatus( const QString& value );

        /**
         * \return The URI of the property 'legalStatus'. 
         */
        static QUrl legalStatusUri();

        /**
         * Retrieve a list of all available Patent resources. This list 
         * consists of all resource of type Patent that are stored in the 
         * local Nepomuk meta data storage and any changes made locally. 
         * Be aware that in some cases this list can get very big. Then it 
         * might be better to use libKNep directly. 
         */
        static QList<Patent> allPatents();


        /**
         * \return The URI of the resource type that is used in Patent instances.
         */
        static QString resourceTypeUri();

    protected:
       Patent( const QString& uri, const QUrl& type );
       Patent( const QUrl& uri, const QUrl& type );
    };
}

#endif
