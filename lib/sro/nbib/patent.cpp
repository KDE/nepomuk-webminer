/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "patent.h"



#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::Patent::Patent()
  : Publication( QUrl(), QUrl::fromEncoded("http://www.example.com/nbib#Patent") )
{
}



Nepomuk2::Patent::Patent( const Patent& res )
  : Publication( res )
{
}


Nepomuk2::Patent::Patent( const Nepomuk2::Resource& res )
  : Publication( res )
{
}


Nepomuk2::Patent::Patent( const QString& uri )
  : Publication( uri, QUrl::fromEncoded("http://www.example.com/nbib#Patent") )
{
}

Nepomuk2::Patent::Patent( const QUrl& uri )
  : Publication( uri, QUrl::fromEncoded("http://www.example.com/nbib#Patent") )
{
}

Nepomuk2::Patent::Patent( const QString& uri, const QUrl& type )
  : Publication( uri, type )
{
}


Nepomuk2::Patent::Patent( const QUrl& uri, const QUrl& type )
  : Publication( uri, type )
{
}

Nepomuk2::Patent::~Patent()
{
}

Nepomuk2::Patent& Nepomuk2::Patent::operator=( const Patent& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::Patent::resourceTypeUri()
{
    return QLatin1String("http://www.example.com/nbib#Patent");
}

QList<Nepomuk2::Resource> Nepomuk2::Patent::attorneyAgents() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#attorneyAgent") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::Patent::setAttorneyAgents( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#attorneyAgent"), Variant( value ) );
}

void Nepomuk2::Patent::addAttorneyAgent( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#attorneyAgent") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#attorneyAgent"), v );
}

QUrl Nepomuk2::Patent::attorneyAgentUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#attorneyAgent");
}

QList<Nepomuk2::Resource> Nepomuk2::Patent::assignees() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#assignee") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::Patent::setAssignees( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#assignee"), Variant( value ) );
}

void Nepomuk2::Patent::addAssignee( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#assignee") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#assignee"), v );
}

QUrl Nepomuk2::Patent::assigneeUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#assignee");
}

QStringList Nepomuk2::Patent::applicationNumbers() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#applicationNumber") ).toStringList());
}

void Nepomuk2::Patent::setApplicationNumbers( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#applicationNumber"), Variant( value ) );
}

void Nepomuk2::Patent::addApplicationNumber( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#applicationNumber") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#applicationNumber"), v );
}

QString Nepomuk2::Patent::applicationNumber() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#applicationNumber") ).toStringList() << QString() ).first();
}

void Nepomuk2::Patent::setApplicationNumber( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#applicationNumber"), Variant( value ) );
}

QUrl Nepomuk2::Patent::applicationNumberUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#applicationNumber");
}

QStringList Nepomuk2::Patent::priorityNumberses() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#priorityNumbers") ).toStringList());
}

void Nepomuk2::Patent::setPriorityNumberses( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#priorityNumbers"), Variant( value ) );
}

void Nepomuk2::Patent::addPriorityNumbers( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#priorityNumbers") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#priorityNumbers"), v );
}

QUrl Nepomuk2::Patent::priorityNumbersUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#priorityNumbers");
}

QList<QDateTime> Nepomuk2::Patent::filingDates() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#filingDate") ).toDateTimeList());
}

void Nepomuk2::Patent::setFilingDates( const QList<QDateTime>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#filingDate"), Variant( value ) );
}

void Nepomuk2::Patent::addFilingDate( const QDateTime& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#filingDate") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#filingDate"), v );
}

QDateTime Nepomuk2::Patent::filingDate() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#filingDate") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk2::Patent::setFilingDate( const QDateTime& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#filingDate"), Variant( value ) );
}

QUrl Nepomuk2::Patent::filingDateUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#filingDate");
}

QStringList Nepomuk2::Patent::patentReferenceses() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#patentReferences") ).toStringList());
}

void Nepomuk2::Patent::setPatentReferenceses( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#patentReferences"), Variant( value ) );
}

void Nepomuk2::Patent::addPatentReferences( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#patentReferences") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#patentReferences"), v );
}

QUrl Nepomuk2::Patent::patentReferencesUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#patentReferences");
}

QStringList Nepomuk2::Patent::legalStatuses() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#legalStatus") ).toStringList());
}

void Nepomuk2::Patent::setLegalStatuses( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#legalStatus"), Variant( value ) );
}

void Nepomuk2::Patent::addLegalStatus( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#legalStatus") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#legalStatus"), v );
}

QUrl Nepomuk2::Patent::legalStatusUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#legalStatus");
}


