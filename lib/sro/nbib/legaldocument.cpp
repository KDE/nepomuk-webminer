/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "legaldocument.h"



#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::LegalDocument::LegalDocument()
  : Publication( QUrl(), QUrl::fromEncoded("http://www.example.com/nbib#LegalDocument") )
{
}



Nepomuk2::LegalDocument::LegalDocument( const LegalDocument& res )
  : Publication( res )
{
}


Nepomuk2::LegalDocument::LegalDocument( const Nepomuk2::Resource& res )
  : Publication( res )
{
}


Nepomuk2::LegalDocument::LegalDocument( const QString& uri )
  : Publication( uri, QUrl::fromEncoded("http://www.example.com/nbib#LegalDocument") )
{
}

Nepomuk2::LegalDocument::LegalDocument( const QUrl& uri )
  : Publication( uri, QUrl::fromEncoded("http://www.example.com/nbib#LegalDocument") )
{
}

Nepomuk2::LegalDocument::LegalDocument( const QString& uri, const QUrl& type )
  : Publication( uri, type )
{
}


Nepomuk2::LegalDocument::LegalDocument( const QUrl& uri, const QUrl& type )
  : Publication( uri, type )
{
}

Nepomuk2::LegalDocument::~LegalDocument()
{
}

Nepomuk2::LegalDocument& Nepomuk2::LegalDocument::operator=( const LegalDocument& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::LegalDocument::resourceTypeUri()
{
    return QLatin1String("http://www.example.com/nbib#LegalDocument");
}

QList<Nepomuk2::Resource> Nepomuk2::LegalDocument::counsels() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.example.com/nbib#counsel") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::LegalDocument::setCounsels( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#counsel"), Variant( value ) );
}

void Nepomuk2::LegalDocument::addCounsel( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#counsel") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#counsel"), v );
}

QUrl Nepomuk2::LegalDocument::counselUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#counsel");
}

QStringList Nepomuk2::LegalDocument::historys() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#history") ).toStringList());
}

void Nepomuk2::LegalDocument::setHistorys( const QStringList& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#history"), Variant( value ) );
}

void Nepomuk2::LegalDocument::addHistory( const QString& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#history") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#history"), v );
}

QString Nepomuk2::LegalDocument::history() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#history") ).toStringList() << QString() ).first();
}

void Nepomuk2::LegalDocument::setHistory( const QString& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#history"), Variant( value ) );
}

QUrl Nepomuk2::LegalDocument::historyUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#history");
}

QList<QDateTime> Nepomuk2::LegalDocument::arguedDates() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#arguedDate") ).toDateTimeList());
}

void Nepomuk2::LegalDocument::setArguedDates( const QList<QDateTime>& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#arguedDate"), Variant( value ) );
}

void Nepomuk2::LegalDocument::addArguedDate( const QDateTime& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.example.com/nbib#arguedDate") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#arguedDate"), v );
}

QDateTime Nepomuk2::LegalDocument::arguedDate() const
{
    return ( property( QUrl::fromEncoded("http://www.example.com/nbib#arguedDate") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk2::LegalDocument::setArguedDate( const QDateTime& value )
{
    setProperty( QUrl::fromEncoded("http://www.example.com/nbib#arguedDate"), Variant( value ) );
}

QUrl Nepomuk2::LegalDocument::arguedDateUri()
{
    return QUrl::fromEncoded("http://www.example.com/nbib#arguedDate");
}


