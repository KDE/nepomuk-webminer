/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#ifndef _INFORMATIONELEMENT_H_
#define _INFORMATIONELEMENT_H_

class QDateTime;
class QDate;
class QTime;

namespace Nepomuk2 {
    class Reference;
    class Resource;

}

#include <Nepomuk2/Resource>


namespace Nepomuk2 {


    class  InformationElement : public Resource
    {
    public:
        /**
         * Create a new empty and invalid InformationElement instance
         */
        InformationElement();

        /**
         * Default copy constructor
         */
        InformationElement( const InformationElement& );
        InformationElement( const Resource& );

        /**
         * Create a new InformationElement instance representing the resource
         * referenced by \a uriOrIdentifier.
         */
        InformationElement( const QString& uriOrIdentifier );

        /**
         * Create a new InformationElement instance representing the resource
         * referenced by \a uri.
         */
        InformationElement( const QUrl& uri );
        ~InformationElement();

        InformationElement& operator=( const InformationElement& );

        /**
         * Get property 'abstract'. An abstract of the work. 
         */
        QStringList abstracts() const;

        /**
         * Set property 'abstract'. An abstract of the work. 
         */
        void setAbstracts( const QStringList& value );

        /**
         * Add a value to property 'abstract'. An abstract of the work. 
         */
        void addAbstract( const QString& value );

        /**
         * Get property 'abstract'. An abstract of the work. 
         */
        QString abstract() const;

        /**
         * Set property 'abstract'. An abstract of the work. 
         */
        void setAbstract( const QString& value );

        /**
         * \return The URI of the property 'abstract'. 
         */
        static QUrl abstractUri();

        /**
         * Get property 'doi'. The Digital object identifier. see http://www.doi.org/ 
         * for more information 
         */
        QStringList dois() const;

        /**
         * Set property 'doi'. The Digital object identifier. see http://www.doi.org/ 
         * for more information 
         */
        void setDois( const QStringList& value );

        /**
         * Add a value to property 'doi'. The Digital object identifier. 
         * see http://www.doi.org/ for more information 
         */
        void addDoi( const QString& value );

        /**
         * Get property 'doi'. The Digital object identifier. see http://www.doi.org/ 
         * for more information 
         */
        QString doi() const;

        /**
         * Set property 'doi'. The Digital object identifier. see http://www.doi.org/ 
         * for more information 
         */
        void setDoi( const QString& value );

        /**
         * \return The URI of the property 'doi'. 
         */
        static QUrl doiUri();

        /**
         * Get property 'editor'. The name(s) of the editor(s). 
         */
        QList<Resource> editors() const;

        /**
         * Set property 'editor'. The name(s) of the editor(s). 
         */
        void setEditors( const QList<Resource>& value );

        /**
         * Add a value to property 'editor'. The name(s) of the editor(s). 
         */
        void addEditor( const Resource& value );

        /**
         * \return The URI of the property 'editor'. 
         */
        static QUrl editorUri();

        /**
         * Get property 'citedReference'. Links all cited references 
         * from one publication. Good way to find new sources to read 
         */
        QList<Reference> citedReferences() const;

        /**
         * Set property 'citedReference'. Links all cited references 
         * from one publication. Good way to find new sources to read 
         */
        void setCitedReferences( const QList<Reference>& value );

        /**
         * Add a value to property 'citedReference'. Links all cited references 
         * from one publication. Good way to find new sources to read 
         */
        void addCitedReference( const Reference& value );

        /**
         * \return The URI of the property 'citedReference'. 
         */
        static QUrl citedReferenceUri();

        /**
         * Get property 'publicationDate'. The date of the publication 
         */
        QList<QDateTime> publicationDates() const;

        /**
         * Set property 'publicationDate'. The date of the publication 
         */
        void setPublicationDates( const QList<QDateTime>& value );

        /**
         * Add a value to property 'publicationDate'. The date of the publication 
         */
        void addPublicationDate( const QDateTime& value );

        /**
         * Get property 'publicationDate'. The date of the publication 
         */
        QDateTime publicationDate() const;

        /**
         * Set property 'publicationDate'. The date of the publication 
         */
        void setPublicationDate( const QDateTime& value );

        /**
         * \return The URI of the property 'publicationDate'. 
         */
        static QUrl publicationDateUri();

        /**
         * Retrieve a list of all available InformationElement resources. 
         * This list consists of all resource of type InformationElement 
         * that are stored in the local Nepomuk meta data storage and any 
         * changes made locally. Be aware that in some cases this list can 
         * get very big. Then it might be better to use libKNep directly. 
         */
        static QList<InformationElement> allInformationElements();


        /**
         * \return The URI of the resource type that is used in InformationElement instances.
         */
        static QString resourceTypeUri();

    protected:
       InformationElement( const QString& uri, const QUrl& type );
       InformationElement( const QUrl& uri, const QUrl& type );
    };
}

#endif
