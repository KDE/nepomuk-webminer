/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk2/variant.h>
#include <nepomuk2/resourcemanager.h>
#include "dataobject.h"

#include "datasource.h"
#include "informationelement.h"

#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk2::DataObject::DataObject()
  : Resource( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataObject") )
{
}



Nepomuk2::DataObject::DataObject( const DataObject& res )
  : Resource( res )
{
}


Nepomuk2::DataObject::DataObject( const Nepomuk2::Resource& res )
  : Resource( res )
{
}


Nepomuk2::DataObject::DataObject( const QString& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataObject") )
{
}

Nepomuk2::DataObject::DataObject( const QUrl& uri )
  : Resource( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataObject") )
{
}

Nepomuk2::DataObject::DataObject( const QString& uri, const QUrl& type )
  : Resource( uri, type )
{
}


Nepomuk2::DataObject::DataObject( const QUrl& uri, const QUrl& type )
  : Resource( uri, type )
{
}

Nepomuk2::DataObject::~DataObject()
{
}

Nepomuk2::DataObject& Nepomuk2::DataObject::operator=( const DataObject& res )
{
    Resource::operator=( res );
    return *this;
}

QString Nepomuk2::DataObject::resourceTypeUri()
{
    return QLatin1String("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataObject");
}

QList<QDateTime> Nepomuk2::DataObject::modifieds() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#modified") ).toDateTimeList());
}

void Nepomuk2::DataObject::setModifieds( const QList<QDateTime>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#modified"), Variant( value ) );
}

void Nepomuk2::DataObject::addModified( const QDateTime& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#modified") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#modified"), v );
}

QUrl Nepomuk2::DataObject::modifiedUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#modified");
}

QList<QDateTime> Nepomuk2::DataObject::createds() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created") ).toDateTimeList());
}

void Nepomuk2::DataObject::setCreateds( const QList<QDateTime>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created"), Variant( value ) );
}

void Nepomuk2::DataObject::addCreated( const QDateTime& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created"), v );
}

QDateTime Nepomuk2::DataObject::created() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk2::DataObject::setCreated( const QDateTime& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created"), Variant( value ) );
}

QUrl Nepomuk2::DataObject::createdUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#created");
}

QList<QDateTime> Nepomuk2::DataObject::lastModifieds() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastModified") ).toDateTimeList());
}

void Nepomuk2::DataObject::setLastModifieds( const QList<QDateTime>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastModified"), Variant( value ) );
}

void Nepomuk2::DataObject::addLastModified( const QDateTime& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastModified") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastModified"), v );
}

QDateTime Nepomuk2::DataObject::lastModified() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastModified") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk2::DataObject::setLastModified( const QDateTime& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastModified"), Variant( value ) );
}

QUrl Nepomuk2::DataObject::lastModifiedUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastModified");
}

QList<Nepomuk2::InformationElement> Nepomuk2::DataObject::interpretedAses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<InformationElement> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( InformationElement( *it ) );
    return rl;
}

void Nepomuk2::DataObject::setInterpretedAses( const QList<Nepomuk2::InformationElement>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<InformationElement>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs"), Variant( l ) );
}

void Nepomuk2::DataObject::addInterpretedAs( const Nepomuk2::InformationElement& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs"), v );
}

QUrl Nepomuk2::DataObject::interpretedAsUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#interpretedAs");
}

QList<Nepomuk2::InformationElement> Nepomuk2::DataObject::isPartOfs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<InformationElement> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( InformationElement( *it ) );
    return rl;
}

void Nepomuk2::DataObject::setIsPartOfs( const QList<Nepomuk2::InformationElement>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<InformationElement>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf"), Variant( l ) );
}

void Nepomuk2::DataObject::addIsPartOf( const Nepomuk2::InformationElement& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf"), v );
}

QUrl Nepomuk2::DataObject::isPartOfUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isPartOf");
}

QList<QDateTime> Nepomuk2::DataObject::lastRefresheds() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed") ).toDateTimeList());
}

void Nepomuk2::DataObject::setLastRefresheds( const QList<QDateTime>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed"), Variant( value ) );
}

void Nepomuk2::DataObject::addLastRefreshed( const QDateTime& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed"), v );
}

QDateTime Nepomuk2::DataObject::lastRefreshed() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed") ).toDateTimeList() << QDateTime() ).first();
}

void Nepomuk2::DataObject::setLastRefreshed( const QDateTime& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed"), Variant( value ) );
}

QUrl Nepomuk2::DataObject::lastRefreshedUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#lastRefreshed");
}

QList<Nepomuk2::DataSource> Nepomuk2::DataObject::dataSources() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<DataSource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( DataSource( *it ) );
    return rl;
}

void Nepomuk2::DataObject::setDataSources( const QList<Nepomuk2::DataSource>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataSource>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource"), Variant( l ) );
}

void Nepomuk2::DataObject::addDataSource( const Nepomuk2::DataSource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource"), v );
}

QUrl Nepomuk2::DataObject::dataSourceUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#dataSource");
}

QList<Nepomuk2::Resource> Nepomuk2::DataObject::coreGraphs() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#coreGraph") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::DataObject::setCoreGraphs( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#coreGraph"), Variant( value ) );
}

void Nepomuk2::DataObject::addCoreGraph( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#coreGraph") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#coreGraph"), v );
}

QUrl Nepomuk2::DataObject::coreGraphUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#coreGraph");
}

QList<qint64> Nepomuk2::DataObject::byteSizes() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize") ).toInt64List());
}

void Nepomuk2::DataObject::setByteSizes( const QList<qint64>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize"), Variant( value ) );
}

void Nepomuk2::DataObject::addByteSize( const qint64& value )
{
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize") );
    v.append( value );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize"), v );
}

qint64 Nepomuk2::DataObject::byteSize() const
{
    return ( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize") ).toInt64List() << 0 ).first();
}

void Nepomuk2::DataObject::setByteSize( const qint64& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize"), Variant( value ) );
}

QUrl Nepomuk2::DataObject::byteSizeUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#byteSize");
}

QList<Nepomuk2::Resource> Nepomuk2::DataObject::urls() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> rl;
    QList<Resource> l = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#url") ).toResourceList() ;
    for( QList<Resource>::const_iterator it = l.constBegin();
        it != l.constEnd(); ++it )
    rl.append( Resource( *it ) );
    return rl;
}

void Nepomuk2::DataObject::setUrls( const QList<Nepomuk2::Resource>& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#url"), Variant( value ) );
}

void Nepomuk2::DataObject::addUrl( const Nepomuk2::Resource& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#url") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#url"), v );
}

Nepomuk2::Resource Nepomuk2::DataObject::url() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return Resource( property( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#url") ).toResource().uri() );
}

void Nepomuk2::DataObject::setUrl( const Nepomuk2::Resource& value )
{
    setProperty( QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#url"), Variant( value ) );
}

QUrl Nepomuk2::DataObject::urlUri()
{
    return QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#url");
}


