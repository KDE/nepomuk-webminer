/**
@mainpage Overview

@author JÃ¶rg Ehrichs <joerg.ehrichs@gmx.de>

The Nepomuk-WebMiner is a simple plugin-based framework to find and extract additional data for @c files and @c resources from the internet.

The work is done in 3 different areas:
@li The \ref resourceextractor finds/extracts useful search parameter from a given @c file or @c Nepomuk @c Resource
@li The \ref webextractor enables the web-based search and data extraction via a selectable python/ruby/javascript plugin
@li The @link NepomukWebMiner::Pipe NepomukPipe @endlink takes the QVariantMap data from the \ref webextractor and transforms the key/value pairs in meaningfull and semantic correct Nepomuk DMS calls

The reason for the split with the \ref webextractor and @link NepomukWebMiner::Pipe NepomukPipe @endlink is the lack of good support of Nepomuk in Python.
Furthermore this simplyfies the plugin writing, as all that has to be done is to parse a webpage and return a simple @c QVariantMap <i>(Python dict)</i> without knowing anything about the underlying Ontology or use of the Nepomuk SimpleResource / DMS parts.

The @link NepomukWebMiner::Pipe NepomukPipe @endlink can also add some additional checkings to the retrived data that won't be necessary to write over and over again in the plugins. In addition additinal downloading of banner/posters into a user defined folder is part of the pipe classes and the plugin writer does not need to know about it.

The framework can be used in different ways:

<b>Calling the metadataextractor from commandline. </b><br>
This is done for the @c dolphin integration, so additional data for a file or each file in a folder can be fetched.
In this case a small Dialog will be presented to guide the user through the searching and fetching process in addition a hidden background task can be started
to do all the fecthing in the background without any further user interaction.

See @c nepomuk-webminer @c --help for more information

<b>Adding the FetcherDialog directly to the program that wants to use it.</b><br>
Does the same thing as the commandline approach but without the need to spawn another @c QProcess to call the commandline program.
@see @link NepomukWebMiner::UI::FetcherDialog FetcherDialog @endlink
@see @link NepomukWebMiner::UI::AutomaticFetcher AutomaticFetcher @endlink
@see @link NepomukWebMiner::UI::BatchExtractor BatchExtractor @endlink

<b>Writing your own fetcher dialog and reuse the extractor and pipe classes.</b><br>
If the developer wants to use a different look and feel or process the meta data results in a different way <i>(present them to the user rather than importing them directly)</i> it is possible to use the @link NepomukWebMiner::Extractor Extractor @endlink and @link NepomukWebMiner::Pipe NepomukPipe @endlink classes each on their own.

@see @link NepomukWebMiner::Extractor Extractor Overview @endlink
@see \ref resourceextractor
@see \ref webextractor
@see @link NepomukWebMiner::Pipe NepomukPipe Overview @endlink

*/ 
